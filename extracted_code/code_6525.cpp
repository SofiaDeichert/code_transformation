int getNumOfPaths ( int numOfRows ) ; int getCurrentBlockSize ( int numOfRows , int currentRow ) ; int main ( ) { int numOfTestCases ; int numOfRows ; int i , j , k , l ; int rowValues [ MAX_VALUES_PER_ROW ] ; int rowIDsBefore [ NUM_OF_ERGS ] ; int ergs [ NUM_OF_ERGS ] ; int rowFillCounter ; int largestPath ; rowIDsBefore [ 0 ] = 0 ; for ( i = 0 ; i < NUM_OF_ERGS ; i ++ ) { ergs [ i ] = 0 ; } scanf ( "%d\n" , & numOfTestCases ) ; for ( i = 0 ; i < numOfTestCases ; i ++ ) { scanf ( "%d\n" , & numOfRows ) ; for ( j = 0 ; j < numOfRows ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( "%d " , & rowValues [ k ] ) ; } rowFillCounter = 0 ; for ( k = 0 ; k < j ; k ++ ) { for ( l = 0 ; l < getCurrentBlockSize ( numOfRows , j + 1 ) ; l ++ , rowFillCounter ++ ) { ergs [ rowFillCounter ] += rowValues [ rowIDsBefore [ k ] ] ; } for ( l = 0 ; l < getCurrentBlockSize ( numOfRows , j + 1 ) ; l ++ , rowFillCounter ++ ) { ergs [ rowFillCounter ] += rowValues [ rowIDsBefore [ k ] + 1 ] ; } } if ( j == 0 ) { for ( l = 0 ; l < getCurrentBlockSize ( numOfRows , j + 1 ) ; l ++ ) { ergs [ l ] = rowValues [ 0 ] ; } } for ( k = j - 1 ; k >= 0 ; k -- ) { rowIDsBefore [ 2 * k ] = rowIDsBefore [ k ] ; rowIDsBefore [ 2 * k + 1 ] = rowIDsBefore [ k ] + 1 ; } } largestPath = ergs [ 0 ] ; for ( j = 1 ; j < getNumOfPaths ( numOfRows ) ; j ++ ) { if ( ergs [ j ] > largestPath ) { largestPath = ergs [ j ] ; } } printf ( "%d\n" , largestPath ) ; } return 0 ; } int getNumOfPaths ( int numOfRows ) { int erg = 1 ; int i ; for ( i = 1 ; i < numOfRows ; i ++ ) { erg = erg * 2 ; } return erg ; } int getCurrentBlockSize ( int numOfRows , int currentRow ) { int erg = 1 ; int i ; for ( i = 1 ; i < numOfRows - currentRow + 1 ; i ++ ) { erg = erg * 2 ; } return erg ; }