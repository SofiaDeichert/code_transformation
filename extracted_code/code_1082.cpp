int max ( int * * s , int * * m , int row , int col , int i , int j ) { if ( i == row - 2 ) { if ( s [ i + 1 ] [ j ] > s [ i + 1 ] [ j + 1 ] ) { return s [ i ] [ j ] + s [ i + 1 ] [ j ] ; } else { return s [ i ] [ j ] + s [ i + 1 ] [ j + 1 ] ; } } else { m [ i + 1 ] [ j ] = max ( s , m , row , col , i + 1 , j ) ; m [ i + 1 ] [ j + 1 ] = max ( s , m , row , col , i + 1 , j + 1 ) ; if ( m [ i + 1 ] [ j ] > m [ i + 1 ] [ j + 1 ] ) { return ( s [ i ] [ j ] + m [ i + 1 ] [ j ] ) ; } else { return ( s [ i ] [ j ] + m [ i + 1 ] [ j + 1 ] ) ; } } } int main ( ) { int t ; scanf ( "%d" , & t ) ; while ( t -- ) { int n , i , j , * p [ 10 ] , * * pf , * mp [ 10 ] , * * mpf ; scanf ( "%d" , & n ) ; int s [ n ] [ n ] , m [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & s [ i ] [ j ] ) ; } p [ i ] = s [ i ] ; mp [ i ] = m [ i ] ; } pf = p ; mpf = mp ; int sum = max ( ( int * * ) p , ( int * * ) mpf , n , n , 0 , 0 ) ; printf ( "%d\n" , sum ) ; } return 0 ; }