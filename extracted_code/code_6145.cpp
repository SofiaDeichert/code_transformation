struct treenode { int data ; struct treenode * left ; struct treenode * right ; } ; struct treenode * root = NULL ; int maxsum = 0 ; void treesum ( struct treenode * ptr , int sum ) { if ( ptr != NULL ) { sum = sum + ptr -> data ; if ( ptr -> left == NULL && ptr -> right == NULL ) { if ( sum > maxsum ) maxsum = sum ; } treesum ( ptr -> left , sum ) ; treesum ( ptr -> right , sum ) ; } } void createtree ( struct treenode * ptr , int * * a , int n , int i , int j ) { if ( i < n - 1 && j <= i ) { ptr -> left = ( struct treenode * ) malloc ( sizeof ( struct treenode ) ) ; ptr -> left -> left = NULL ; ptr -> left -> right = NULL ; ptr -> left -> data = * ( * ( a + i + 1 ) + j ) ; createtree ( ptr -> left , a , n , i + 1 , j ) ; ptr -> right = ( struct treenode * ) malloc ( sizeof ( struct treenode ) ) ; ptr -> right -> left = NULL ; ptr -> right -> right = NULL ; ptr -> right -> data = * ( * ( a + i + 1 ) + ( j + 1 ) ) ; createtree ( ptr -> right , a , n , i + 1 , j + 1 ) ; } } int main ( ) { int m , * * a , i , j , n , k , d ; printf ( "Enter the number of test cases\n" ) ; scanf ( "%d" , & n ) ; if ( n > 1000 || n < 0 ) { printf ( "Invalid value of n\n" ) ; exit ( 0 ) ; } for ( k = 1 ; k <= n ; k ++ ) { printf ( "Enter the number of lines\n" ) ; scanf ( "%d" , & m ) ; if ( m < 1 || m > 99 ) { printf ( "Invalid number of lines\n" ) ; exit ( 0 ) ; } maxsum = 0 ; root = NULL ; a = ( int * * ) malloc ( m * sizeof ( int * ) ) ; printf ( "Enter the numbers in triangular form\n" ) ; for ( i = 0 ; i < m ; i ++ ) a [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( i = 0 ; i < m ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , ( * ( a + i ) + j ) ) ; d = * ( * ( a + i ) + j ) ; if ( d < 0 || d > 99 ) { printf ( "Invalid Input\n" ) ; exit ( 0 ) ; } } for ( i = 0 ; i < m ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) printf ( "%d\t" , * ( * ( a + i ) + j ) ) ; printf ( "\n" ) ; } root = * a ; root -> data = * ( * ( a + 0 ) + 0 ) ; if ( m == 1 ) maxsum = root -> data ; else { createtree ( root , a , m , 0 , 0 ) ; treesum ( root , 0 ) ; free ( root ) ; } printf ( "Greatest Sum: %d\n" , maxsum ) ; free ( * a ) ; } return 0 ; }