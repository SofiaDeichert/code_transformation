int memo [ 100 ] [ 100 ] = { 0 } ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int findSum ( int a [ 100 ] [ 100 ] , int i , int j , int row ) { int sum = a [ i ] [ j ] ; if ( row == 1 ) return a [ i ] [ j ] ; else { if ( memo [ i + 1 ] [ j ] < 0 ) memo [ i + 1 ] [ j ] = findSum ( a , i + 1 , j , row - 1 ) ; if ( memo [ i + 1 ] [ j + 1 ] < 0 ) memo [ i + 1 ] [ j + 1 ] = findSum ( a , i + 1 , j + 1 , row - 1 ) ; sum += max ( memo [ i + 1 ] [ j ] , memo [ i + 1 ] [ j + 1 ] ) ; return sum ; } } int main ( ) { int T , r , n , i , j , max ; int a [ 100 ] [ 100 ] ; scanf ( "%d" , & T ) ; while ( T != 0 ) { max = 0 ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; memo [ i ] [ j ] = - 1 ; } } max = findSum ( a , 0 , 0 , n ) ; printf ( "%d\n" , max ) ; T -- ; } return 0 ; }