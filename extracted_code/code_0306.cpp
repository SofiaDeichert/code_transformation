static char _rbuf [ 8192 * 8 ] ; static char * _rend = 0 ; static char * _rpos = 0 ; static int _getchar ( ) { int n = read ( 0 , _rbuf , sizeof _rbuf ) ; if ( n <= 0 ) { printf ( "EOF(%d)\n" , n ) ; exit ( 1 ) ; } _rend = _rbuf + n ; _rpos = _rbuf + 1 ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < '0' ) { } int n = c - '0' ; while ( ( ( c = mygetchar ( ) ) ) >= '0' ) { n = n * 10 + c - '0' ; } return n ; } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - 1 ; while ( 1 ) { buf [ bn -- ] = '0' + ( n ) ; n = n / 10 ; if ( n == 0 ) break ; } while ( bn < BSIZE - 1 ) putchar ( buf [ ++ bn ] ) ; putchar ( '\n' ) ; } static int dump ( int a [ ] , int n ) { int i = 0 ; printf ( "line-dump:" ) ; while ( i < n ) printf ( "%d " , a [ i ++ ] ) ; printf ( "\n" ) ; } void tria ( int n ) { int a [ n ] ; int b [ n ] ; a [ 0 ] = 0 ; int * cur = b ; int * old = a ; int i = 0 ; while ( i < n ) { cur [ 0 ] = get_i ( ) + old [ 0 ] ; int j = 1 ; while ( j < i ) { cur [ j ] = get_i ( ) + max ( old [ j - 1 ] , old [ j ] ) ; j ++ ; } if ( i ) cur [ j ] = get_i ( ) + old [ j - 1 ] ; if ( cur == b ) { cur = a ; old = b ; } else { cur = b ; old = a ; } i ++ ; } int mx = 0 ; for ( i = 0 ; i < n ; i ++ ) mx = max ( mx , old [ i ] ) ; put_i ( mx ) ; } int main ( int ac , char * * av ) { int n = get_i ( ) ; while ( n -- > 0 ) { tria ( get_i ( ) ) ; } return 0 ; }