int * p [ 1001 ] ; int trisum ( int n ) { int sum = 0 , i , key1 = 0 , key2 = 0 ; if ( n == 1 ) { sum = p [ 1 ] [ 1 ] ; return sum ; } else if ( n > 1 ) { for ( i = 1 ; i <= n - 1 ; i ++ ) { key1 = p [ n - 1 ] [ i ] + p [ n ] [ i ] ; key2 = p [ n - 1 ] [ i ] + p [ n ] [ i + 1 ] ; if ( key1 > key2 ) { p [ n - 1 ] [ i ] = key1 ; } else p [ n - 1 ] [ i ] = key2 ; } return trisum ( n - 1 ) ; } } int main ( ) { int t , n , i , j , sum = 0 ; scanf ( "%d" , & t ) ; while ( t -- ) { scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { p [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; for ( j = 1 ; j <= i ; j ++ ) scanf ( "%d" , & p [ i ] [ j ] ) ; } sum = trisum ( n ) ; printf ( "%d \n" , sum ) ; } return 0 ; }