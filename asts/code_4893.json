{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 356,
  "text": "int main ( void ) { int m , n , gcd = 0 , num , lcm = 0 , m1 , n1 ; scanf ( \"%d\" , & num ) ; while ( num -- ) { scanf ( \"%d %d\" , & m , & n ) ; m1 = m ; n1 = n ; while ( m != n ) { if ( m > n ) { m = m - n ; } else if ( m < n ) { n = n - m ; } else gcd = m ; } lcm = ( m1 * n1 ) / gcd ; printf ( \"%d %d\\n\" , gcd , lcm ) ; gcd = 0 ; lcm = 0 ; } return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 356,
      "text": "int main ( void ) { int m , n , gcd = 0 , num , lcm = 0 , m1 , n1 ; scanf ( \"%d\" , & num ) ; while ( num -- ) { scanf ( \"%d %d\" , & m , & n ) ; m1 = m ; n1 = n ; while ( m != n ) { if ( m > n ) { m = m - n ; } else if ( m < n ) { n = n - m ; } else gcd = m ; } lcm = ( m1 * n1 ) / gcd ; printf ( \"%d %d\\n\" , gcd , lcm ) ; gcd = 0 ; lcm = 0 ; } return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 17,
          "text": "main ( void )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 17,
              "text": "( void )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": "parameter_declaration",
                  "start_byte": 11,
                  "end_byte": 15,
                  "text": "void",
                  "children": [
                    {
                      "type": "primitive_type",
                      "start_byte": 11,
                      "end_byte": 15,
                      "text": "void",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "start_byte": 16,
                  "end_byte": 17,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 18,
          "end_byte": 356,
          "text": "{ int m , n , gcd = 0 , num , lcm = 0 , m1 , n1 ; scanf ( \"%d\" , & num ) ; while ( num -- ) { scanf ( \"%d %d\" , & m , & n ) ; m1 = m ; n1 = n ; while ( m != n ) { if ( m > n ) { m = m - n ; } else if ( m < n ) { n = n - m ; } else gcd = m ; } lcm = ( m1 * n1 ) / gcd ; printf ( \"%d %d\\n\" , gcd , lcm ) ; gcd = 0 ; lcm = 0 ; } return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 18,
              "end_byte": 19,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 20,
              "end_byte": 67,
              "text": "int m , n , gcd = 0 , num , lcm = 0 , m1 , n1 ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 20,
                  "end_byte": 23,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 24,
                  "end_byte": 25,
                  "text": "m",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 26,
                  "end_byte": 27,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 28,
                  "end_byte": 29,
                  "text": "n",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 30,
                  "end_byte": 31,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "init_declarator",
                  "start_byte": 32,
                  "end_byte": 39,
                  "text": "gcd = 0",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 32,
                      "end_byte": 35,
                      "text": "gcd",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 36,
                      "end_byte": 37,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "number_literal",
                      "start_byte": 38,
                      "end_byte": 39,
                      "text": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "start_byte": 40,
                  "end_byte": 41,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 42,
                  "end_byte": 45,
                  "text": "num",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 46,
                  "end_byte": 47,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "init_declarator",
                  "start_byte": 48,
                  "end_byte": 55,
                  "text": "lcm = 0",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 48,
                      "end_byte": 51,
                      "text": "lcm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 52,
                      "end_byte": 53,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "number_literal",
                      "start_byte": 54,
                      "end_byte": 55,
                      "text": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "start_byte": 56,
                  "end_byte": 57,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 58,
                  "end_byte": 60,
                  "text": "m1",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 61,
                  "end_byte": 62,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 63,
                  "end_byte": 65,
                  "text": "n1",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 66,
                  "end_byte": 67,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 68,
              "end_byte": 92,
              "text": "scanf ( \"%d\" , & num ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 68,
                  "end_byte": 90,
                  "text": "scanf ( \"%d\" , & num )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 68,
                      "end_byte": 73,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 74,
                      "end_byte": 90,
                      "text": "( \"%d\" , & num )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 74,
                          "end_byte": 75,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 76,
                          "end_byte": 80,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 76,
                              "end_byte": 77,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 77,
                              "end_byte": 79,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 79,
                              "end_byte": 80,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 81,
                          "end_byte": 82,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 83,
                          "end_byte": 88,
                          "text": "& num",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 83,
                              "end_byte": 84,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 85,
                              "end_byte": 88,
                              "text": "num",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 89,
                          "end_byte": 90,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 91,
                  "end_byte": 92,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 93,
              "end_byte": 343,
              "text": "while ( num -- ) { scanf ( \"%d %d\" , & m , & n ) ; m1 = m ; n1 = n ; while ( m != n ) { if ( m > n ) { m = m - n ; } else if ( m < n ) { n = n - m ; } else gcd = m ; } lcm = ( m1 * n1 ) / gcd ; printf ( \"%d %d\\n\" , gcd , lcm ) ; gcd = 0 ; lcm = 0 ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 93,
                  "end_byte": 98,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 99,
                  "end_byte": 109,
                  "text": "( num -- )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 99,
                      "end_byte": 100,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "update_expression",
                      "start_byte": 101,
                      "end_byte": 107,
                      "text": "num --",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 101,
                          "end_byte": 104,
                          "text": "num",
                          "children": []
                        },
                        {
                          "type": "--",
                          "start_byte": 105,
                          "end_byte": 107,
                          "text": "--",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 108,
                      "end_byte": 109,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 110,
                  "end_byte": 343,
                  "text": "{ scanf ( \"%d %d\" , & m , & n ) ; m1 = m ; n1 = n ; while ( m != n ) { if ( m > n ) { m = m - n ; } else if ( m < n ) { n = n - m ; } else gcd = m ; } lcm = ( m1 * n1 ) / gcd ; printf ( \"%d %d\\n\" , gcd , lcm ) ; gcd = 0 ; lcm = 0 ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 110,
                      "end_byte": 111,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 112,
                      "end_byte": 143,
                      "text": "scanf ( \"%d %d\" , & m , & n ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 112,
                          "end_byte": 141,
                          "text": "scanf ( \"%d %d\" , & m , & n )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 112,
                              "end_byte": 117,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 118,
                              "end_byte": 141,
                              "text": "( \"%d %d\" , & m , & n )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 118,
                                  "end_byte": 119,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 120,
                                  "end_byte": 127,
                                  "text": "\"%d %d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 120,
                                      "end_byte": 121,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 121,
                                      "end_byte": 126,
                                      "text": "%d %d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 126,
                                      "end_byte": 127,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 128,
                                  "end_byte": 129,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 130,
                                  "end_byte": 133,
                                  "text": "& m",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 130,
                                      "end_byte": 131,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 132,
                                      "end_byte": 133,
                                      "text": "m",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 134,
                                  "end_byte": 135,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 136,
                                  "end_byte": 139,
                                  "text": "& n",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 136,
                                      "end_byte": 137,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 138,
                                      "end_byte": 139,
                                      "text": "n",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 140,
                                  "end_byte": 141,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 142,
                          "end_byte": 143,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 144,
                      "end_byte": 152,
                      "text": "m1 = m ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 144,
                          "end_byte": 150,
                          "text": "m1 = m",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 144,
                              "end_byte": 146,
                              "text": "m1",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 147,
                              "end_byte": 148,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 149,
                              "end_byte": 150,
                              "text": "m",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 151,
                          "end_byte": 152,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 153,
                      "end_byte": 161,
                      "text": "n1 = n ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 153,
                          "end_byte": 159,
                          "text": "n1 = n",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 153,
                              "end_byte": 155,
                              "text": "n1",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 156,
                              "end_byte": 157,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 158,
                              "end_byte": 159,
                              "text": "n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 160,
                          "end_byte": 161,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "while_statement",
                      "start_byte": 162,
                      "end_byte": 260,
                      "text": "while ( m != n ) { if ( m > n ) { m = m - n ; } else if ( m < n ) { n = n - m ; } else gcd = m ; }",
                      "children": [
                        {
                          "type": "while",
                          "start_byte": 162,
                          "end_byte": 167,
                          "text": "while",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 168,
                          "end_byte": 178,
                          "text": "( m != n )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 168,
                              "end_byte": 169,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 170,
                              "end_byte": 176,
                              "text": "m != n",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 170,
                                  "end_byte": 171,
                                  "text": "m",
                                  "children": []
                                },
                                {
                                  "type": "!=",
                                  "start_byte": 172,
                                  "end_byte": 174,
                                  "text": "!=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 175,
                                  "end_byte": 176,
                                  "text": "n",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 177,
                              "end_byte": 178,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 179,
                          "end_byte": 260,
                          "text": "{ if ( m > n ) { m = m - n ; } else if ( m < n ) { n = n - m ; } else gcd = m ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 179,
                              "end_byte": 180,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "if_statement",
                              "start_byte": 181,
                              "end_byte": 258,
                              "text": "if ( m > n ) { m = m - n ; } else if ( m < n ) { n = n - m ; } else gcd = m ;",
                              "children": [
                                {
                                  "type": "if",
                                  "start_byte": 181,
                                  "end_byte": 183,
                                  "text": "if",
                                  "children": []
                                },
                                {
                                  "type": "condition_clause",
                                  "start_byte": 184,
                                  "end_byte": 193,
                                  "text": "( m > n )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 184,
                                      "end_byte": 185,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 186,
                                      "end_byte": 191,
                                      "text": "m > n",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 186,
                                          "end_byte": 187,
                                          "text": "m",
                                          "children": []
                                        },
                                        {
                                          "type": ">",
                                          "start_byte": 188,
                                          "end_byte": 189,
                                          "text": ">",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 190,
                                          "end_byte": 191,
                                          "text": "n",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 192,
                                      "end_byte": 193,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "compound_statement",
                                  "start_byte": 194,
                                  "end_byte": 209,
                                  "text": "{ m = m - n ; }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "start_byte": 194,
                                      "end_byte": 195,
                                      "text": "{",
                                      "children": []
                                    },
                                    {
                                      "type": "expression_statement",
                                      "start_byte": 196,
                                      "end_byte": 207,
                                      "text": "m = m - n ;",
                                      "children": [
                                        {
                                          "type": "assignment_expression",
                                          "start_byte": 196,
                                          "end_byte": 205,
                                          "text": "m = m - n",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 196,
                                              "end_byte": 197,
                                              "text": "m",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "start_byte": 198,
                                              "end_byte": 199,
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_expression",
                                              "start_byte": 200,
                                              "end_byte": 205,
                                              "text": "m - n",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 200,
                                                  "end_byte": 201,
                                                  "text": "m",
                                                  "children": []
                                                },
                                                {
                                                  "type": "-",
                                                  "start_byte": 202,
                                                  "end_byte": 203,
                                                  "text": "-",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 204,
                                                  "end_byte": 205,
                                                  "text": "n",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "start_byte": 206,
                                          "end_byte": 207,
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "start_byte": 208,
                                      "end_byte": 209,
                                      "text": "}",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "else_clause",
                                  "start_byte": 210,
                                  "end_byte": 258,
                                  "text": "else if ( m < n ) { n = n - m ; } else gcd = m ;",
                                  "children": [
                                    {
                                      "type": "else",
                                      "start_byte": 210,
                                      "end_byte": 214,
                                      "text": "else",
                                      "children": []
                                    },
                                    {
                                      "type": "if_statement",
                                      "start_byte": 215,
                                      "end_byte": 258,
                                      "text": "if ( m < n ) { n = n - m ; } else gcd = m ;",
                                      "children": [
                                        {
                                          "type": "if",
                                          "start_byte": 215,
                                          "end_byte": 217,
                                          "text": "if",
                                          "children": []
                                        },
                                        {
                                          "type": "condition_clause",
                                          "start_byte": 218,
                                          "end_byte": 227,
                                          "text": "( m < n )",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start_byte": 218,
                                              "end_byte": 219,
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_expression",
                                              "start_byte": 220,
                                              "end_byte": 225,
                                              "text": "m < n",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 220,
                                                  "end_byte": 221,
                                                  "text": "m",
                                                  "children": []
                                                },
                                                {
                                                  "type": "<",
                                                  "start_byte": 222,
                                                  "end_byte": 223,
                                                  "text": "<",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 224,
                                                  "end_byte": 225,
                                                  "text": "n",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "start_byte": 226,
                                              "end_byte": 227,
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "compound_statement",
                                          "start_byte": 228,
                                          "end_byte": 243,
                                          "text": "{ n = n - m ; }",
                                          "children": [
                                            {
                                              "type": "{",
                                              "start_byte": 228,
                                              "end_byte": 229,
                                              "text": "{",
                                              "children": []
                                            },
                                            {
                                              "type": "expression_statement",
                                              "start_byte": 230,
                                              "end_byte": 241,
                                              "text": "n = n - m ;",
                                              "children": [
                                                {
                                                  "type": "assignment_expression",
                                                  "start_byte": 230,
                                                  "end_byte": 239,
                                                  "text": "n = n - m",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start_byte": 230,
                                                      "end_byte": 231,
                                                      "text": "n",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "start_byte": 232,
                                                      "end_byte": 233,
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_expression",
                                                      "start_byte": 234,
                                                      "end_byte": 239,
                                                      "text": "n - m",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 234,
                                                          "end_byte": 235,
                                                          "text": "n",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "-",
                                                          "start_byte": 236,
                                                          "end_byte": 237,
                                                          "text": "-",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 238,
                                                          "end_byte": 239,
                                                          "text": "m",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "start_byte": 240,
                                                  "end_byte": 241,
                                                  "text": ";",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "}",
                                              "start_byte": 242,
                                              "end_byte": 243,
                                              "text": "}",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "else_clause",
                                          "start_byte": 244,
                                          "end_byte": 258,
                                          "text": "else gcd = m ;",
                                          "children": [
                                            {
                                              "type": "else",
                                              "start_byte": 244,
                                              "end_byte": 248,
                                              "text": "else",
                                              "children": []
                                            },
                                            {
                                              "type": "expression_statement",
                                              "start_byte": 249,
                                              "end_byte": 258,
                                              "text": "gcd = m ;",
                                              "children": [
                                                {
                                                  "type": "assignment_expression",
                                                  "start_byte": 249,
                                                  "end_byte": 256,
                                                  "text": "gcd = m",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start_byte": 249,
                                                      "end_byte": 252,
                                                      "text": "gcd",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "start_byte": 253,
                                                      "end_byte": 254,
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start_byte": 255,
                                                      "end_byte": 256,
                                                      "text": "m",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "start_byte": 257,
                                                  "end_byte": 258,
                                                  "text": ";",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 259,
                              "end_byte": 260,
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 261,
                      "end_byte": 286,
                      "text": "lcm = ( m1 * n1 ) / gcd ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 261,
                          "end_byte": 284,
                          "text": "lcm = ( m1 * n1 ) / gcd",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 261,
                              "end_byte": 264,
                              "text": "lcm",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 265,
                              "end_byte": 266,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 267,
                              "end_byte": 284,
                              "text": "( m1 * n1 ) / gcd",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "start_byte": 267,
                                  "end_byte": 278,
                                  "text": "( m1 * n1 )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 267,
                                      "end_byte": 268,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 269,
                                      "end_byte": 276,
                                      "text": "m1 * n1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 269,
                                          "end_byte": 271,
                                          "text": "m1",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "start_byte": 272,
                                          "end_byte": 273,
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 274,
                                          "end_byte": 276,
                                          "text": "n1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 277,
                                      "end_byte": 278,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "/",
                                  "start_byte": 279,
                                  "end_byte": 280,
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 281,
                                  "end_byte": 284,
                                  "text": "gcd",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 285,
                          "end_byte": 286,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 287,
                      "end_byte": 321,
                      "text": "printf ( \"%d %d\\n\" , gcd , lcm ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 287,
                          "end_byte": 319,
                          "text": "printf ( \"%d %d\\n\" , gcd , lcm )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 287,
                              "end_byte": 293,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 294,
                              "end_byte": 319,
                              "text": "( \"%d %d\\n\" , gcd , lcm )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 294,
                                  "end_byte": 295,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 296,
                                  "end_byte": 305,
                                  "text": "\"%d %d\\n\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 296,
                                      "end_byte": 297,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 297,
                                      "end_byte": 302,
                                      "text": "%d %d",
                                      "children": []
                                    },
                                    {
                                      "type": "escape_sequence",
                                      "start_byte": 302,
                                      "end_byte": 304,
                                      "text": "\\n",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 304,
                                      "end_byte": 305,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 306,
                                  "end_byte": 307,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 308,
                                  "end_byte": 311,
                                  "text": "gcd",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "start_byte": 312,
                                  "end_byte": 313,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 314,
                                  "end_byte": 317,
                                  "text": "lcm",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 318,
                                  "end_byte": 319,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 320,
                          "end_byte": 321,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 322,
                      "end_byte": 331,
                      "text": "gcd = 0 ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 322,
                          "end_byte": 329,
                          "text": "gcd = 0",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 322,
                              "end_byte": 325,
                              "text": "gcd",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 326,
                              "end_byte": 327,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "start_byte": 328,
                              "end_byte": 329,
                              "text": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 330,
                          "end_byte": 331,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 332,
                      "end_byte": 341,
                      "text": "lcm = 0 ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 332,
                          "end_byte": 339,
                          "text": "lcm = 0",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 332,
                              "end_byte": 335,
                              "text": "lcm",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 336,
                              "end_byte": 337,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "start_byte": 338,
                              "end_byte": 339,
                              "text": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 340,
                          "end_byte": 341,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 342,
                      "end_byte": 343,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 344,
              "end_byte": 354,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 344,
                  "end_byte": 350,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 351,
                  "end_byte": 352,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 353,
                  "end_byte": 354,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 355,
              "end_byte": 356,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}