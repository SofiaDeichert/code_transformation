int * * table ; unsigned int * * arr ; unsigned int t ; int fill ( int row , int col ) { if ( col < 0 || col > row || row > t - 1 || row < 0 ) return 0 ; if ( table [ row ] [ col ] == 0 ) { if ( row - 1 >= 0 ) { unsigned int val1 , val2 ; if ( col - 1 >= 0 ) { if ( table [ row - 1 ] [ col - 1 ] == 0 ) { table [ row - 1 ] [ col - 1 ] = fill ( row - 1 , col - 1 ) ; } val1 = arr [ row ] [ col ] + table [ row - 1 ] [ col - 1 ] ; } else val1 = arr [ row ] [ col ] ; if ( col <= row - 1 ) { if ( table [ row - 1 ] [ col ] == 0 ) { table [ row - 1 ] [ col ] = fill ( row - 1 , col ) ; } val2 = arr [ row ] [ col ] + table [ row - 1 ] [ col ] ; } else val2 = arr [ row ] [ col ] ; table [ row ] [ col ] = val1 >= val2 ? val1 : val2 ; } else table [ row ] [ col ] = arr [ row ] [ col ] ; } return table [ row ] [ col ] ; } unsigned int get_max ( ) { unsigned int i , max = 0 ; for ( i = 0 ; i < t ; i ++ ) { if ( max < fill ( t - 1 , i ) ) max = fill ( t - 1 , i ) ; } return max ; } int main ( ) { unsigned int n ; scanf ( "%u" , & n ) ; while ( n -- > 0 ) { unsigned int i ; scanf ( "%u" , & t ) ; arr = ( unsigned int * * ) malloc ( sizeof ( unsigned int * ) * t ) ; table = ( int * * ) malloc ( sizeof ( int * ) * t ) ; for ( i = 0 ; i < t ; i ++ ) { unsigned int j ; arr [ i ] = ( unsigned int * ) malloc ( sizeof ( unsigned int ) * ( i + 1 ) ) ; table [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%u" , & arr [ i ] [ j ] ) ; table [ i ] [ j ] = 0 ; } } printf ( "%u\n" , get_max ( ) ) ; } return 0 ; }