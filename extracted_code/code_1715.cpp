int findMaxSum ( int data [ ] [ MAX ] , int , int , int , int ) ; int maxFun = 0 ; int main ( ) { int testCases , sizeData , itrInner , itrOuter , max = 0 ; int data [ MAX ] [ MAX ] ; scanf ( "%d" , & testCases ) ; while ( testCases -- ) { scanf ( "%d" , & sizeData ) ; for ( itrInner = 0 ; itrInner < sizeData ; itrInner ++ ) { for ( itrOuter = 0 ; itrOuter <= itrInner ; itrOuter ++ ) { scanf ( "%d" , & data [ itrInner ] [ itrOuter ] ) ; } } findMaxSum ( data , sizeData , data [ 0 ] [ 0 ] , 1 , 0 ) ; printf ( "%d\n" , maxFun ) ; } return 0 ; } int findMaxSum ( int data [ ] [ MAX ] , int sizeData , int recSum , int rowElement , int colElement ) { int itr ; if ( rowElement == sizeData ) { maxFun = ( maxFun < recSum ) ? recSum : maxFun ; return ; } else { for ( itr = 0 ; itr <= rowElement ; itr ++ ) { if ( itr - colElement == 0 || itr - colElement == 1 ) { recSum = recSum + data [ rowElement ] [ itr ] ; findMaxSum ( data , sizeData , recSum , rowElement + 1 , itr ) ; recSum = recSum - data [ rowElement ] [ itr ] ; } } } }