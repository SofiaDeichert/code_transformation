int * p [ 100 ] , n ; int fun ( int x , int cnt ) { if ( cnt == n ) return 0 ; return max ( ( p [ cnt ] [ x ] + fun ( x , cnt + 1 ) ) , ( p [ cnt ] [ x ] + fun ( x + 1 , cnt + 1 ) ) ) ; } main ( ) { int t , i , j , k , num ; scanf ( "%d" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { p [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { scanf ( "%d" , & num ) ; p [ i ] [ j ] = num ; } } printf ( "%d\n" , fun ( 0 , 0 ) ) ; } }