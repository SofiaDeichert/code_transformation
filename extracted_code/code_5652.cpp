int n ; int get_max ( int col_sum [ ] , int row , int col , int * ecount ) { int i , max , pos = col ; max = col_sum [ col ] ; for ( i = col + 1 ; i < ( n - row + col ) ; i ++ ) { if ( col_sum [ i ] > max ) pos = i ; else if ( col_sum [ i ] == max ) ( * ecount ) ++ ; } return pos ; } void column_sum ( int a [ n ] [ n ] , int col_sum [ ] , int row , int col ) { int i , j ; col_sum [ col ] = 0 ; for ( i = row + 1 ; i < n ; i ++ ) col_sum [ col ] += a [ i ] [ col ] ; for ( j = col + 1 ; j < n ; j ++ ) { col_sum [ j ] = 0 ; for ( i = j + 1 ; i < n ; i ++ ) col_sum [ j ] += a [ i ] [ j ] ; } } int main ( ) { int i , row , col , t , sum , max , ecount ; scanf ( "%d" , & t ) ; int res [ t ] ; for ( i = 0 ; i < t ; i ++ ) { scanf ( "%d" , & n ) ; int a [ n ] [ n ] ; int col_sum [ n ] ; for ( row = 0 ; row < n ; row ++ ) for ( col = 0 ; col <= row ; col ++ ) scanf ( "%d" , & a [ row ] [ col ] ) ; sum = a [ 0 ] [ 0 ] ; row = 0 , col = 0 ; while ( row < n - 1 && col < n - 1 ) { ecount = 0 ; column_sum ( a , col_sum , row , col ) ; max = get_max ( col_sum , row , col , & ecount ) ; if ( ecount == n - row - 1 ) { if ( a [ row + 1 ] [ col ] > a [ row + 1 ] [ col + 1 ] ) row ++ ; else row ++ , col ++ ; sum += a [ row ] [ col ] ; } else { if ( col == max ) { row ++ ; sum += a [ row ] [ col ] ; } while ( col < max ) { col ++ , row ++ ; sum += a [ row ] [ col ] ; } } } res [ i ] = sum ; } for ( i = 0 ; i < t ; i ++ ) printf ( "%d\n" , res [ i ] ) ; return 0 ; }