static inline int max ( int a , int b ) { return a > b ? a : b ; } int maxArray ( int a [ ] , int aLength ) { int i , localMax = 0 ; for ( i = 0 ; i < aLength ; i ++ ) localMax = max ( localMax , a [ i ] ) ; return localMax ; } int main ( ) { int numberOfTestCases ; int numberOfRows ; int rowIndex ; int columnIndex ; int resultsArray [ ARRAYLENGTH ] ; int nextData ; int putMe ; int compareMe ; int i ; scanf ( "%d" , & numberOfTestCases ) ; printf ( "Number of test cases: %d\n" , numberOfTestCases ) ; while ( numberOfTestCases -- ) { scanf ( "%d" , & numberOfRows ) ; printf ( "----------------\nTest case #: %d\nNumber of rows: %d\n" , numberOfTestCases , numberOfRows ) ; for ( i = 0 ; i < ARRAYLENGTH ; i ++ ) resultsArray [ i ] = 0 ; for ( rowIndex = 0 ; rowIndex < numberOfRows ; rowIndex ++ ) { for ( columnIndex = 0 ; columnIndex <= rowIndex ; columnIndex ++ ) { scanf ( "%d" , & nextData ) ; putMe = ( numberOfRows - rowIndex + columnIndex ) % ( numberOfRows + 1 ) ; compareMe = ( putMe + 1 ) % ( numberOfRows + 1 ) ; resultsArray [ putMe ] = max ( resultsArray [ putMe ] , resultsArray [ compareMe ] ) + nextData ; printf ( "= " , resultsArray [ putMe ] ) ; } printf ( "\n" ) ; } printf ( "\n\n Max: %d" , maxArray ( resultsArray , ARRAYLENGTH ) ) ; printf ( "%d " , maxArray ( resultsArray , ARRAYLENGTH ) ) ; } return 0 ; }