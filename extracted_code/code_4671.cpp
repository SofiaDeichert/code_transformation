int solution [ 100 ] [ 100 ] ; int findpathsum ( int triangle [ ] [ 101 ] , int i , int j ) { int val1 , val2 ; if ( triangle [ i ] [ j ] == - 1 ) return 0 ; if ( solution [ i + 1 ] [ j ] == - 1 ) { val1 = findpathsum ( triangle , i + 1 , j ) ; solution [ i + 1 ] [ j ] = val1 ; } else { val1 = solution [ i + 1 ] [ j ] ; } if ( solution [ i + 1 ] [ j + 1 ] == - 1 ) { val2 = findpathsum ( triangle , i + 1 , j + 1 ) ; solution [ i + 1 ] [ j + 1 ] = val2 ; } else { val2 = solution [ i + 1 ] [ j + 1 ] ; } if ( val1 > val2 ) return triangle [ i ] [ j ] + val1 ; else return triangle [ i ] [ j ] + val2 ; } int main ( ) { int nt , nr ; int i , j , k ; int triangle [ 101 ] [ 101 ] ; int sol [ 1000 ] , sol_i ; sol_i = 0 ; scanf ( "%d" , & nt ) ; for ( i = 0 ; i < nt ; i ++ ) { scanf ( "%d" , & nr ) ; for ( j = 0 ; j < nr ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( "%d" , & triangle [ j ] [ k ] ) ; solution [ j ] [ k ] = - 1 ; } } for ( k = 0 ; k <= j ; k ++ ) triangle [ j ] [ k ] = - 1 ; sol [ sol_i ++ ] = findpathsum ( triangle , 0 , 0 ) ; } for ( i = 0 ; i < sol_i ; i ++ ) printf ( "%d\n" , sol [ i ] ) ; return 0 ; }