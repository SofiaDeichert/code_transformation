void below ( int , int , int ) ; void right ( int , int , int ) ; int a [ 101 ] [ 101 ] , t = 1 , ans [ 10000 ] , rows ; void below ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + 1 ; } else { i = i + 1 ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } } void right ( int x , int i , int j ) { if ( i == rows ) { ans [ t ] = x ; t = t + 1 ; } else { i = i + 1 ; j = j + 1 ; x = x + a [ i ] [ j ] ; below ( x , i , j ) ; right ( x , i , j ) ; } } int main ( ) { int i , j , test_case , k , r , max = 0 ; scanf ( "%d" , & test_case ) ; for ( i = 1 ; i <= test_case ; i ++ ) { scanf ( "%d" , & rows ) ; for ( j = 1 ; j <= rows ; j ++ ) { for ( k = 1 ; k <= j ; k ++ ) { scanf ( "%d" , & a [ j ] [ k ] ) ; } } below ( 1 , 1 , 1 ) ; right ( 1 , 1 , 1 ) ; for ( r = 1 ; ans [ r ] != '\0' ; r ++ ) { if ( ans [ r ] > max ) max = ans [ r ] ; } printf ( "%d" , max ) ; } return 0 ; }