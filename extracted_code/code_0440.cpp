const unsigned int bufsize = 524288 ; const unsigned int numbufsize = 10 ; const char zero = '0' ; const char newline = '\n' ; const char space = ' ' ; char inbuf [ 524288 ] ; char outbuf [ 524288 ] ; unsigned int inptr = 0 ; unsigned int outptr = 0 ; void dump ( unsigned int a [ ] , unsigned int j ) { unsigned int i ; printf ( "a (j = %u) : " , j ) ; if ( j == 0 ) { printf ( "%u\n" , a [ j ] ) ; return ; } for ( i = 0 ; i < j ; i ++ ) { printf ( "%u " , a [ i ] ) ; } printf ( "%u\n" , a [ j ] ) ; } unsigned int getint ( ) { unsigned int n = 0 ; while ( inbuf [ inptr ] != newline && inbuf [ inptr ] != space ) { n = n * 10 + ( inbuf [ inptr ++ ] - zero ) ; if ( inptr == bufsize ) { fread ( inbuf , bufsize , 1 , stdin ) ; inptr = 0 ; } } inptr ++ ; if ( inptr == bufsize ) { fread ( inbuf , bufsize , 1 , stdin ) ; inptr = 0 ; } return n ; } void setint ( unsigned int n ) { if ( n == 0 ) { outbuf [ outptr ++ ] = zero ; if ( outptr == bufsize ) { fwrite ( outbuf , bufsize , 1 , stdout ) ; outptr = 0 ; } outbuf [ outptr ++ ] = newline ; if ( outptr == bufsize ) { fwrite ( outbuf , bufsize , 1 , stdout ) ; outptr = 0 ; } } else { char numbuf [ 5 ] , i = 5 ; if ( outptr + 5 >= bufsize ) { fwrite ( outbuf , outptr , 1 , stdout ) ; outptr = 0 ; } numbuf [ -- i ] = newline ; while ( n > 0 ) { numbuf [ -- i ] = n % 10 + zero ; n = n / 10 ; } memcpy ( outbuf + outptr , numbuf + i , 5 - i ) ; outptr += ( 5 - i ) ; } } void initbuf ( ) { fread ( inbuf , bufsize , 1 , stdin ) ; } void flushbuf ( ) { fwrite ( outbuf , outptr , 1 , stdout ) ; } int main ( ) { unsigned int t , i , n ; initbuf ( ) ; t = getint ( ) ; for ( i = 0 ; i < t ; i ++ ) { unsigned int n = getint ( ) , j , a [ 100 ] , max , previous ; if ( n == 0 ) continue ; a [ 0 ] = previous = getint ( ) ; if ( n == 1 ) { setint ( previous ) ; continue ; } for ( j = 1 ; j < n - 1 ; j ++ ) { unsigned int k ; previous = a [ 0 ] ; a [ 0 ] = a [ 0 ] + getint ( ) ; for ( k = 1 ; k < j ; k ++ ) { unsigned int m = getint ( ) ; unsigned int current = a [ k ] ; a [ k ] = ( current > previous ) ? current + m : previous + m ; previous = current ; } a [ j ] = previous + getint ( ) ; } max = a [ 0 ] + getint ( ) ; previous = a [ 0 ] ; for ( j = 1 ; j < n - 1 ; j ++ ) { unsigned int m = getint ( ) ; unsigned int current = a [ j ] ; unsigned int x = ( current > previous ) ? current + m : previous + m ; if ( x > max ) max = x ; previous = current ; } unsigned int m = getint ( ) ; max = ( max > ( previous + m ) ) ? max : previous + m ; setint ( max ) ; } flushbuf ( ) ; return 0 ; }