int result [ 1000 ] [ 1000 ] ; int a [ 100 ] [ 100 ] ; int maxpath ( int i , int j , int n , int test_cases ) { if ( i > n ) return 0 ; if ( result [ i + test_cases ] [ j ] != 0 ) return result [ i + test_cases ] [ j ] ; int t1 , t2 , t ; t1 = maxpath ( i + 1 , j , n , test_cases ) ; t2 = maxpath ( i + 1 , j + 1 , n , test_cases ) ; t = t1 > t2 ? t1 : t2 ; t = t + a [ i ] [ j ] ; result [ i + test_cases ] [ j ] = t ; return t ; } int main ( ) { int i , j , test_cases , row , p ; printf ( "enter the number of test cases" ) ; scanf ( "%d" , & test_cases ) ; while ( test_cases > 0 ) { printf ( "enter the number of rows" ) ; scanf ( "%d" , & row ) ; for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; } p = maxpath ( 0 , 0 , row , test_cases ) ; printf ( "%d" , p ) ; test_cases -- ; } return 0 ; }