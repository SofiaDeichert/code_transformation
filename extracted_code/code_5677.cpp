static char _rbuf [ BUF_SIZE ] ; static char * _rpos = 0 ; static int len = 0 ; static char * _rend = 0 ; static int _readC ( ) { if ( _rpos >= _rend ) { len = read ( 0 , _rbuf , sizeof _rbuf ) ; if ( len < 1 ) return - 1 ; _rend = _rbuf + len ; _rpos = _rbuf ; } return * _rpos ++ ; } int readInt ( ) { int c , ve = 1 , i = 0 ; do { c = _readC ( ) ; } while ( ( c < '0' || c > '9' ) ) ; do { i = ( i << 3 + i << 1 ) + c - '0' ; c = _readC ( ) ; } while ( c >= '0' && c <= '9' ) ; return i * ve ; } int main ( ) { int T , n , i , j , A [ 150 ] [ 150 ] ; T = readInt ( ) ; while ( T -- ) { n = readInt ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) A [ i ] [ j ] = readInt ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) A [ i ] [ j ] += MAX ( A [ i + 1 ] [ j ] , A [ i + 1 ] [ j + 1 ] ) ; printf ( "%d\n" , A [ 0 ] [ 0 ] ) ; } return 0 ; }