void display_triangle ( int * * triangle , int rows ) { int i , j ; for ( i = 0 ; i < rows ; i ++ ) { printf ( "\n" ) ; for ( j = 0 ; j < i + 1 ; j ++ ) { printf ( "%d\t" , triangle [ i ] [ j ] ) ; } } } void free_triangle ( int * * triangle , int rows ) { int i ; for ( i = 0 ; i < rows ; i ++ ) { free ( triangle [ i ] ) ; } free ( triangle ) ; } int find_max_triangle_old ( int * * triangle , int columns , int rows , int temp_sum ) { static int max_sum ; int cur_sum , i ; if ( columns == rows ) { return temp_sum ; } for ( i = 0 ; i < columns + 1 ; i ++ ) { cur_sum = find_max_triangle ( triangle , columns + 1 , rows , temp_sum + triangle [ columns ] [ i ] ) ; if ( max_sum < cur_sum ) max_sum = cur_sum ; } return max_sum ; } int find_max_triangle ( int * * triangle , int start , int columns , int rows , int temp_sum ) { static int max_sum ; int cur_sum , i ; if ( columns == rows ) { return temp_sum ; } for ( i = start ; i < columns + 1 && i < start + 2 ; i ++ ) { cur_sum = find_max_triangle ( triangle , i , columns + 1 , rows , temp_sum + triangle [ columns ] [ i ] ) ; if ( max_sum < cur_sum ) max_sum = cur_sum ; } return max_sum ; } int main ( void ) { int * * triangle = NULL ; int n , rows , i , j ; scanf ( "%d" , & n ) ; while ( n -- ) { scanf ( "%d" , & rows ) ; triangle = ( int * * ) malloc ( rows * sizeof ( int ) ) ; for ( i = 0 ; i < rows ; i ++ ) { triangle [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j < ( i + 1 ) ; j ++ ) scanf ( "%d" , & triangle [ i ] [ j ] ) ; } printf ( "%d\n" , find_max_triangle ( triangle , 0 , 0 , rows , 0 ) ) ; } return 0 ; }