int maxValue = 0 ; int maxPath ( int * input , int row , int pos , int n , int curMax ) { int r = row * ( row - 1 ) / 2 ; if ( row > n ) { if ( curMax > maxValue ) maxValue = curMax ; return 0 ; } int v1 = * ( input + r + pos - 1 ) , v2 = * ( input + r + pos ) ; maxPath ( input , row + 1 , pos + 1 , n , v2 + curMax ) ; maxPath ( input , row + 1 , pos , n , v1 + curMax ) ; } int main ( ) { int tests , n , i , k ; scanf ( "%d" , & tests ) ; int out [ tests ] ; for ( k = 0 ; k < tests ; k ++ ) { maxValue = 0 ; scanf ( "%d" , & n ) ; int lenght = n * ( n + 1 ) / 2 ; int input [ lenght ] ; for ( i = 0 ; i < lenght ; i ++ ) { scanf ( "%d" , input + i ) ; } maxPath ( input , 2 , 1 , n , 0 ) ; * ( out + k ) = * input + maxValue ; } for ( k = 0 ; k < tests ; k ++ ) { printf ( "%d\n" , * ( out + k ) ) ; } return 0 ; }