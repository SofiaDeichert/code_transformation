typedef struct node { int value ; struct node * next ; } node ; int main ( ) { int t , num , r , i , j , largest ; node * start [ 100 ] , * ptr , * new_node , * p , * q ; scanf ( "%d" , & t ) ; while ( t != 0 ) { scanf ( "%d" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { start [ i ] = NULL ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & num ) ; new_node = ( node * ) malloc ( sizeof ( node ) ) ; new_node -> value = num ; if ( start [ i ] == NULL ) { start [ i ] = new_node ; ptr = new_node ; ptr -> next = NULL ; } else { ptr -> next = new_node ; ptr = new_node ; ptr -> next = NULL ; } } } p = q = ( node * ) malloc ( sizeof ( node ) ) ; p -> value = start [ 0 ] -> value ; for ( i = 0 ; i < r - 1 ; i ++ ) { ptr = start [ i + 1 ] ; for ( j = 0 ; j <= i ; j ++ ) { new_node = ( node * ) malloc ( sizeof ( node ) ) ; q -> next = new_node ; new_node -> next = NULL ; q = new_node ; q -> value = ptr -> value + p -> value ; ptr = ptr -> next ; new_node = ( node * ) malloc ( sizeof ( node ) ) ; q -> next = new_node ; new_node -> next = NULL ; q = new_node ; q -> value = ptr -> value + p -> value ; p = p -> next ; } } largest = p -> value ; do { p = p -> next ; if ( largest < p -> value ) largest = p -> value ; } while ( p != q ) ; printf ( "%d\n" , largest ) ; t -- ; } return 0 ; }