int prob [ 100 ] [ 100 ] = { 0 } ; int maxsum [ 100 ] [ 100 ] = { 0 } ; int getmaxsum ( int x , int y ) { if ( maxsum [ x ] [ y ] ) return maxsum [ x ] [ y ] ; else { if ( x == 0 ) return 0 ; else if ( y == 0 ) maxsum [ x ] [ y ] = getmaxsum ( x - 1 , y ) + prob [ x - 1 ] [ y ] ; else maxsum [ x ] [ y ] = max ( getmaxsum ( x - 1 , y - 1 ) + prob [ x - 1 ] [ y - 1 ] , getmaxsum ( x - 1 , y ) + prob [ x - 1 ] [ y ] ) ; return maxsum [ x ] [ y ] ; } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int main ( ) { int max , t , i , j ; int size ; int testcases ; scanf ( "%d" , & testcases ) ; while ( testcases ) { scanf ( "%d" , & size ) ; for ( i = 0 ; i < size ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & prob [ i ] [ j ] ) ; maxsum [ i ] [ j ] = 0 ; } } size -- ; max = getmaxsum ( size , 0 ) + prob [ size ] [ 0 ] ; for ( i = 1 ; i <= size ; i ++ ) { t = getmaxsum ( size , i ) + prob [ size ] [ i ] ; if ( t > max ) max = t ; } printf ( "%d\n" , max ) ; testcases -- ; } return 0 ; }