int max ( int a , int b ) { return a >= b ? a : b ; } int main ( void ) { int t , n , i , j , k , sum ; scanf ( "%d" , & t ) ; while ( t -- ) { scanf ( "%d" , & n ) ; sum = - 1 ; int * * a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) a [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; } if ( n == 1 ) { printf ( "%d\n" , a [ 0 ] [ 0 ] ) ; continue ; } int * * dp = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) dp [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) dp [ i ] [ 0 ] = a [ i ] [ 0 ] ; if ( dp [ 0 ] [ 0 ] > sum ) sum = dp [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { dp [ i ] [ 0 ] += dp [ i - 1 ] [ 0 ] ; if ( dp [ i ] [ 0 ] > sum ) sum = dp [ i ] [ 0 ] ; } dp [ 1 ] [ 1 ] = a [ 1 ] [ 1 ] + dp [ 0 ] [ 0 ] ; if ( dp [ 1 ] [ 1 ] > sum ) sum = dp [ 1 ] [ 1 ] ; for ( i = 2 ; i < n ; i ++ ) { for ( j = 1 ; j < i + 1 ; j ++ ) { if ( i == j ) dp [ i ] [ j ] = dp [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else dp [ i ] [ j ] = max ( dp [ i - 1 ] [ j ] , dp [ i - 1 ] [ j - 1 ] ) + a [ i ] [ j ] ; if ( dp [ i ] [ j ] > sum ) sum = dp [ i ] [ j ] ; } } printf ( "%d\n" , sum ) ; free ( a ) ; free ( dp ) ; } return 0 ; }