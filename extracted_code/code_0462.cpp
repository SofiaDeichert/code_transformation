int * A [ 1000 ] ; int max ( int , int , int , int ) ; int main ( ) { int n , i , j , k ; int T [ 1000 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & T [ i ] ) ; k = T [ i ] * ( T [ i ] + 1 ) / 2 ; A [ i ] = ( int * ) malloc ( k * sizeof ( int ) ) ; for ( j = 0 ; j < k ; j ++ ) { scanf ( "%d" , & A [ i ] [ j ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { printf ( "\n%d" , max ( 0 , 0 , T [ i ] , i ) ) ; } return 0 ; } int max ( int i , int j , int T , int k ) { int sum1 = 0 , sum2 = 0 ; if ( i == T - 1 ) if ( A [ k ] [ i * ( i + 1 ) / 2 + j ] > A [ k ] [ 1 + i * ( i + 1 ) / 2 + j ] ) return A [ k ] [ i * ( i + 1 ) / 2 + j ] ; else return A [ k ] [ 1 + i * ( i + 1 ) / 2 + j ] ; sum1 = A [ k ] [ i * ( i + 1 ) / 2 + j ] + max ( i + 1 , j , T , k ) ; sum2 = A [ k ] [ i * ( i + 1 ) / 2 + j ] + max ( i + 1 , j + 1 , T , k ) ; if ( sum1 > sum2 ) { printf ( "Sum1=%d" , sum1 ) ; return sum1 ; } else { printf ( "Sum1=%d" , sum2 ) ; return sum2 ; } }