int max ( int a , int b ) { if ( a > b ) return a ; return b ; } int sum ( int * * A , int i , int j , int * * MEMO , int n ) { if ( i == n - 1 ) { MEMO [ i ] [ j ] = A [ i ] [ j ] ; return MEMO [ i ] [ j ] ; } if ( MEMO [ i + 1 ] [ j ] == 0 && MEMO [ i + 1 ] [ j + 1 ] == 0 ) MEMO [ i ] [ j ] = A [ i ] [ j ] + max ( sum ( A , i + 1 , j , MEMO , n ) , sum ( A , i + 1 , j + 1 , MEMO , n ) ) ; if ( MEMO [ i + 1 ] [ j ] != 0 && MEMO [ i + 1 ] [ j + 1 ] != 0 ) MEMO [ i ] [ j ] = max ( A [ i ] [ j ] + MEMO [ i + 1 ] [ j ] , A [ i ] [ j ] + MEMO [ i + 1 ] [ j + 1 ] ) ; if ( MEMO [ i + 1 ] [ j ] == 0 ) MEMO [ i ] [ j ] = A [ i ] [ j ] + max ( sum ( A , i + 1 , j , MEMO , n ) , MEMO [ i + 1 ] [ j + 1 ] ) ; if ( MEMO [ i + 1 ] [ j + 1 ] == 0 ) MEMO [ i ] [ j ] = A [ i ] [ j ] + max ( sum ( A , i + 1 , j + 1 , MEMO , n ) , MEMO [ i + 1 ] [ j + 1 ] ) ; return MEMO [ i ] [ j ] ; } int main ( ) { int T ; scanf ( "%d" , & T ) ; while ( T -- ) { int n ; scanf ( "%d" , & n ) ; int size = n ; int * * A = ( int * * ) malloc ( sizeof ( int ) * ( n ) ) ; int * * MEMO = ( int * * ) malloc ( sizeof ( int ) * ( n ) ) ; int i = 0 , j = 0 ; int level = 0 ; for ( i = 0 ; i < size ; i ++ ) { A [ i ] = ( int * ) malloc ( sizeof ( int ) * ( n ) ) ; MEMO [ i ] = ( int * ) malloc ( sizeof ( int ) * ( n ) ) ; memset ( A [ i ] , 0 , sizeof ( A [ i ] ) ) ; memset ( MEMO [ i ] , 0 , sizeof ( MEMO [ i ] ) ) ; } for ( i = 0 ; i < n ; i ++ ) { level ++ ; for ( j = 0 ; j < level ; j ++ ) { scanf ( "%d" , & A [ i ] [ j ] ) ; } } printf ( "%d\n" , sum ( A , 0 , 0 , MEMO , size ) ) ; } }