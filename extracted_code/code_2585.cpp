int n ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int sumtri ( int arr [ n + 1 ] [ n + 1 ] , int n , int row , int col ) { if ( row == n ) return 0 ; else { if ( col + 1 < n ) return max ( sumtri ( arr , n , row + 1 , col ) + arr [ row + 1 ] [ col ] , sumtri ( arr , n , row + 1 , col + 1 ) + arr [ row + 1 ] [ col + 1 ] ) ; else if ( col + 1 == n ) return sumtri ( arr , n , row + 1 , col ) + arr [ row + 1 ] [ col ] ; else return 0 ; } } int dynamic ( int arr [ n + 1 ] [ n + 1 ] , int n ) { int grid [ n + 1 ] [ n + 1 ] , i , j ; grid [ 0 ] [ 0 ] = arr [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) grid [ i ] [ 0 ] = grid [ i - 1 ] [ j ] + arr [ i ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 1 ; j <= i ; j ++ ) if ( j == i ) grid [ i ] [ j ] = grid [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] ; else grid [ i ] [ j ] = max ( grid [ i - 1 ] [ j - 1 ] + arr [ i ] [ j ] , grid [ i - 1 ] [ j ] + arr [ i ] [ j ] ) ; int gr = 0 ; for ( i = 0 ; i < n ; i ++ ) if ( grid [ n - 1 ] [ i ] > gr ) gr = grid [ n - 1 ] [ i ] ; return gr ; } int main ( ) { int T ; scanf ( "%d" , & T ) ; while ( T -- > 0 ) { int i , j ; scanf ( "%d" , & n ) ; int arr [ n + 1 ] [ n + 1 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( "%d" , & arr [ i ] [ j ] ) ; printf ( "%d\n" , arr [ 0 ] [ 0 ] + sumtri ( arr , n , 0 , 0 ) ) ; } return 0 ; }