char array [ 5000 ] = { 0 } ; char sum [ 5000 ] = { 0 } ; int maxUpto ( int lineNumber , int endPoint ) ; int pop ( int id , int i , int j ) ; void push ( int id , int i , int j , int num ) ; int main ( int argc , char * * argv ) { int noOfCases ; scanf ( "%d" , & noOfCases ) ; while ( noOfCases -- ) { int N = 0 , tempSum = 0 , i = 0 , maxSum = 0 ; for ( i = 0 ; i < 5000 ; i ++ ) { array [ i ] = 0 ; sum [ i ] = 0 ; } scanf ( "%d" , & N ) ; for ( i = 0 ; i < N * ( N + 1 ) / 2 ; i ++ ) scanf ( "%d" , & array [ i ] ) ; for ( i = 0 ; i < N ; i ++ ) { tempSum = maxUpto ( N - 1 , i ) ; if ( tempSum > maxSum ) maxSum = tempSum ; } printf ( "%d\n" , maxSum ) ; } return 0 ; } int maxUpto ( int lineNumber , int endPoint ) { if ( pop ( 0 , lineNumber , endPoint ) != 0 ) return pop ( 0 , lineNumber , endPoint ) ; int i ; if ( lineNumber == 0 ) { push ( 0 , 0 , 0 , pop ( 1 , 0 , 0 ) ) ; return pop ( 0 , 0 , 0 ) ; } if ( endPoint == 0 ) { push ( 0 , lineNumber , 0 , ( pop ( 1 , lineNumber , 0 ) + maxUpto ( lineNumber - 1 , 0 ) ) ) ; return pop ( 0 , lineNumber , 0 ) ; } if ( endPoint <= lineNumber - 1 ) { int a = maxUpto ( lineNumber - 1 , endPoint - 1 ) ; int b = maxUpto ( lineNumber - 1 , endPoint ) ; int c = pop ( 1 , lineNumber , endPoint ) ; if ( a + c > b + c ) { push ( 0 , lineNumber , endPoint , a + c ) ; return a + c ; } else { push ( 0 , lineNumber , endPoint , b + c ) ; return b + c ; } } if ( endPoint == lineNumber ) { push ( 0 , lineNumber , lineNumber , maxUpto ( lineNumber - 1 , lineNumber - 1 ) + pop ( 1 , lineNumber , lineNumber ) ) ; return maxUpto ( lineNumber - 1 , lineNumber - 1 ) + pop ( 1 , lineNumber , lineNumber ) ; } } int pop ( int id , int i , int j ) { int index ; index = i * ( i + 1 ) / 2 + j ; if ( id == 0 ) return sum [ index ] ; else return array [ index ] ; } void push ( int id , int i , int j , int num ) { int index ; index = i * ( i + 1 ) / 2 + j ; if ( id == 0 ) sum [ index ] = num ; else array [ index ] = num ; return ; }