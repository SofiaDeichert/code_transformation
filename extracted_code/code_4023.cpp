void read_input ( ) ; void process ( ) ; void calculate ( int ) ; void print_input ( ) ; int num_test_cases ; typedef struct test_case { int num_lines ; int * * values ; } testcase ; testcase * t ; int main ( ) { read_input ( ) ; process ( ) ; return 0 ; } void read_input ( ) { char * s ; char * ipstring ; char * token ; int i , j , k , n , ipval ; s = ( char * ) malloc ( 3 * sizeof ( char ) ) ; gets ( s ) ; num_test_cases = atoi ( s ) ; t = ( testcase * ) malloc ( num_test_cases * sizeof ( struct test_case ) ) ; for ( i = 0 ; i < num_test_cases ; i ++ ) { gets ( s ) ; n = atoi ( s ) ; ( t + i ) -> num_lines = n ; ( t + i ) -> values = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( j = 1 ; j <= n ; j ++ ) { ( t + i ) -> values [ j - 1 ] = ( int * ) malloc ( j * sizeof ( int ) ) ; ipstring = ( char * ) malloc ( 4 * j * sizeof ( char ) ) ; gets ( ipstring ) ; token = strtok ( ipstring , " " ) ; k = 1 ; while ( token != NULL ) { * ( ( ( t + i ) -> values [ j - 1 ] ) + ( k - 1 ) ) = atoi ( token ) ; token = strtok ( NULL , " " ) ; k ++ ; } free ( ipstring ) ; } } } void process ( ) { int i ; for ( i = 0 ; i < num_test_cases ; i ++ ) { calculate ( i ) ; } } void calculate ( int n ) { int k , j ; int down , down_right ; int * * a = ( t + n ) -> values ; for ( k = ( t + n ) -> num_lines - 1 ; k >= 0 ; k -- ) { for ( j = 0 ; j < k ; j ++ ) { down = * ( a [ k ] + j ) ; down_right = * ( a [ k ] + ( j + 1 ) ) ; if ( down > down_right ) { * ( a [ k - 1 ] + j ) += down ; } else { * ( a [ k - 1 ] + j ) += down_right ; } } if ( k > 0 ) { free ( a [ k ] ) ; } } printf ( "%d\n" , * ( a [ 0 ] + 0 ) ) ; }