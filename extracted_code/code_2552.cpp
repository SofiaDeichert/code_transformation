int scanInt ( ) { register int retInt = 0 , d ; while ( ( d = getchar ( ) ) >= '0' ) { retInt = ( retInt << 3 ) + ( retInt << 1 ) + ( d - '0' ) ; } return retInt ; } struct node { unsigned int length ; unsigned int a [ 100 ] [ 100 ] ; } ; int main ( void ) { register unsigned int testcase = 0 , i = 0 , j = 0 , k = 0 ; unsigned int * ans ; testcase = scanInt ( ) ; if ( testcase <= 1000 ) { ans = ( int * ) malloc ( testcase * sizeof ( int ) ) ; for ( i = 0 ; i < testcase ; i ++ ) { struct node c ; c . length = scanInt ( ) ; if ( c . length <= 100 ) { for ( j = 0 ; j < c . length ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { if ( j == 0 ) c . a [ j ] [ k ] = scanInt ( ) ; else { if ( k == 0 ) c . a [ j ] [ k ] = c . a [ j - 1 ] [ k ] + scanInt ( ) ; else if ( j == k ) c . a [ j ] [ k ] = c . a [ j - 1 ] [ k - 1 ] + scanInt ( ) ; else { unsigned int total = scanInt ( ) ; unsigned int a1 = ( c . a [ j - 1 ] [ k - 1 ] + total ) ; unsigned int a2 = ( c . a [ j - 1 ] [ k ] + total ) ; c . a [ j ] [ k ] = ( a1 < a2 ) ? a2 : a1 ; } } } } ans [ i ] = 0 ; j = c . length - 1 ; k = c . length - 1 ; while ( k -- ) { if ( ans [ i ] < c . a [ j ] [ k ] ) ans [ i ] = c . a [ j ] [ k ] ; } } else exit ( 0 ) ; } for ( i = 0 ; i < testcase ; i ++ ) { printf ( "%d\n" , ans [ i ] ) ; } } return 0 ; }