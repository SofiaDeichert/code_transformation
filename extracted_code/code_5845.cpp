int array [ 100 ] [ 100 ] , memoization [ 5050 ] ; int length ; int path ( int row , int column ) { if ( row == length - 1 || column == length - 1 ) { return array [ row ] [ column ] ; } if ( memoization [ row + column ] != - 1 ) return memoization [ row + column ] ; if ( path ( row + 1 , column ) > path ( row + 1 , column + 1 ) ) { memoization [ row + column ] = path ( row + 1 , column ) + array [ row ] [ column ] ; return memoization [ row + column ] ; } else { memoization [ row + column ] = path ( row + 1 , column + 1 ) + array [ row ] [ column ] ; return memoization [ row + column ] ; } } int main ( void ) { int i , j , t , r ; scanf ( "%d" , & t ) ; for ( r = 0 ; r < t ; r ++ ) { scanf ( "%d" , & length ) ; for ( i = 0 ; i < 5050 ; i ++ ) { memoization [ i ] = - 1 ; } for ( i = 1 ; i <= length ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( "%d" , & array [ i - 1 ] [ j - 1 ] ) ; } } printf ( "%d\n" , path ( 0 , 0 ) ) ; for ( i = 0 ; i < 2 * length ; i ++ ) { memoization [ i ] = - 1 ; } } return 0 ; }