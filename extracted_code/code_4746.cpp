int * * allocate2DArea ( int n ) { int * * ptr ; int i ; ptr = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) { * ( ptr + i ) = ( int * ) malloc ( n * sizeof ( int ) ) ; } return ptr ; } void readTriangle ( int n , int * * multiarray ) { int i = 0 ; int j = 0 ; int num ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & num ) ; multiarray [ i ] [ j ] = num ; } } } int findMax ( int a , int b ) { if ( a > b ) return a ; else return b ; } void calculateMultisum ( int n , int * * multiarray , int * * multisum ) { int row , col , max ; for ( row = 0 ; row < n ; row ++ ) { for ( col = 0 ; col <= row ; col ++ ) { if ( row == 0 ) multisum [ 0 ] [ 0 ] = multiarray [ 0 ] [ 0 ] ; else if ( col == 0 ) multisum [ row ] [ col ] = multisum [ row - 1 ] [ col ] + multiarray [ row ] [ col ] ; else { max = findMax ( multisum [ row - 1 ] [ col ] , multisum [ row - 1 ] [ col - 1 ] ) ; multisum [ row ] [ col ] = max + multiarray [ row ] [ col ] ; } } } } void printMultisum ( int n , int * * multisum ) { int col ; int max = multisum [ n - 1 ] [ 0 ] ; for ( col = 0 ; col < n ; col ++ ) { if ( max < multisum [ n - 1 ] [ col ] ) max = multisum [ n - 1 ] [ col ] ; } printf ( "%d\n" , max ) ; } void freeAll2DMatrix ( int n , int * * array2D ) { int i ; for ( i = 0 ; i < n ; i ++ ) free ( * ( array2D + i ) ) ; free ( array2D ) ; } int main ( ) { int n ; int * * multiarray , * * multisum ; int T ; scanf ( "%d" , & T ) ; while ( T -- ) { scanf ( "%d" , & n ) ; multiarray = allocate2DArea ( n ) ; multisum = allocate2DArea ( n ) ; readTriangle ( n , multiarray ) ; calculateMultisum ( n , multiarray , multisum ) ; printMultisum ( n , multisum ) ; freeAll2DMatrix ( n , multiarray ) ; freeAll2DMatrix ( n , multisum ) ; } return 0 ; }