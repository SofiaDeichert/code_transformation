int Tri [ 5100 ] [ 5100 ] , RSum [ 5100 ] [ 5100 ] ; void rootSum ( int , int ) ; int levels = 4 , x = 1 , y = 1 ; int readint ( ) { int cc = getc ( stdin ) ; for ( ; cc < '0' || cc > '9' ; ) cc = getc ( stdin ) ; int ret = 0 ; for ( ; cc >= '0' && cc <= '9' ; ) { ret = ret * 10 + cc - '0' ; cc = getc ( stdin ) ; } return ret ; } int main ( ) { int Input [ 5100 ] ; int i , j , k = 0 , iter = 0 , size , t ; t = readint ( ) ; for ( iter = 1 ; iter <= t ; iter ++ ) { k = 0 ; levels = readint ( ) ; size = levels * ( levels + 1 ) / 2 ; for ( i = 0 ; i < size ; i ++ ) Input [ i ] = readint ( ) ; for ( i = 1 ; i <= levels ; i ++ ) { for ( j = i ; j >= 1 ; j -- ) { Tri [ j ] [ i - j + 1 ] = Input [ k ++ ] ; } } for ( i = levels ; i >= 1 ; i -- ) { for ( j = 1 ; j <= i ; j ++ ) { rootSum ( i - j + 1 , j ) ; } } printf ( "%d\n" , RSum [ 1 ] [ 1 ] ) ; } return 0 ; } void rootSum ( int j , int i ) { RSum [ j ] [ i ] = - 1 ; if ( j + i - 1 != levels ) { if ( RSum [ j ] [ i ] < RSum [ j + 1 ] [ i ] + Tri [ j ] [ i ] ) { RSum [ j ] [ i ] = RSum [ j + 1 ] [ i ] + Tri [ j ] [ i ] ; } if ( RSum [ j ] [ i ] < RSum [ j ] [ i + 1 ] + Tri [ j ] [ i ] ) { RSum [ j ] [ i ] = RSum [ j ] [ i + 1 ] + Tri [ j ] [ i ] ; } } else RSum [ j ] [ i ] = Tri [ j ] [ i ] ; }