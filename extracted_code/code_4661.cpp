Merge_Sort ( int a [ ] , int p , int r ) { int q , i ; if ( p < r ) { q = ( p + r ) / 2 ; Merge_Sort ( a , p , q ) ; Merge_Sort ( a , q + 1 , r ) ; Merge ( a , p , q , r ) ; } } Merge ( int a [ ] , int p , int q , int r ) { int n1 , n2 , i , j , k , t1 , k1 ; n1 = q - p + 1 ; n2 = r - q ; int L [ n1 ] ; int R [ n2 ] ; for ( i = 1 ; i <= n1 ; i ++ ) L [ i ] = a [ p + i - 1 ] ; for ( j = 1 ; j <= n2 ; j ++ ) R [ j ] = a [ q + j ] ; i = 1 ; j = 1 ; for ( k = p ; k <= r ; k ++ ) { if ( L [ i ] <= R [ j ] ) { a [ k ] = L [ i ] ; i ++ ; if ( i > q ) { t1 = 1 ; break ; } } else { a [ k ] = R [ j ] ; j ++ ; if ( ( j + q ) > r ) { t1 = 0 ; break ; } } } if ( t1 == 1 ) { for ( k1 = k + 1 ; k1 <= r ; k1 ++ ) { a [ k1 ] = R [ j ] ; j ++ ; } } else { for ( k1 = k + 1 ; k1 <= r ; k1 ++ ) { a [ k1 ] = L [ i ] ; i ++ ; } } } int main ( void ) { int t , i ; int n ; long long int ans ; scanf ( "%d" , & t ) ; while ( t -- ) { scanf ( "%d" , & n ) ; int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } if ( n == 1 ) printf ( "%d\n" , a [ 0 ] ) ; else { Merge_Sort ( a , 0 , n ) ; ans = ( long long ) a [ 0 ] * ( long long ) ( n - 1 ) ; printf ( "%lld\n" , ans ) ; } } return 0 ; }