int sumtobase ( int * * intpyr , int row , int col , int size ) { if ( row == size ) return intpyr [ row ] [ col ] ; else { int way1 , way2 ; way1 = intpyr [ row ] [ col ] + sumtobase ( intpyr , row + 1 , col + 1 , size ) ; way2 = intpyr [ row ] [ col ] + sumtobase ( intpyr , row + 1 , col , size ) ; if ( way1 > way2 ) return way1 ; else return way2 ; } } int main ( ) { int itr ; int size ; int * * pyramid ; int * ans , i ; scanf ( "%d" , & itr ) ; ans = ( int * ) malloc ( itr * sizeof ( int ) ) ; for ( i = 0 ; i < itr ; i ++ ) { int j , k = 0 ; char temp ; scanf ( "%d" , & size ) ; pyramid = ( int * * ) malloc ( size * sizeof ( int * ) ) ; for ( j = 0 ; j < size ; j ++ ) { pyramid [ j ] = ( int * ) malloc ( ( j + 1 ) * sizeof ( int ) ) ; for ( k = 0 ; k <= j ; k ++ ) scanf ( "%d" , & pyramid [ j ] [ k ] ) ; } ans [ i ] = sumtobase ( pyramid , 0 , 0 , size - 1 ) ; } for ( i = 0 ; i < itr ; i ++ ) printf ( "%d\n" , ans [ i ] ) ; return 0 ; }