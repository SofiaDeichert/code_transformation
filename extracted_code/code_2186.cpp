void construct_candidates ( int k , int c [ ] , int * ncandidates , int in [ ] [ 100 ] , int x ) { c [ 0 ] = in [ k ] [ x ] ; c [ 1 ] = in [ k ] [ x + 1 ] ; * ncandidates = 2 ; } int sum = - 1 ; void backtrack ( int a [ ] [ 2 ] , int k , int n , int in [ ] [ 100 ] , int x ) { int c [ 10 ] , ncandidates , i ; if ( k == n ) { if ( a [ n ] [ 1 ] > sum ) sum = a [ n ] [ 1 ] ; if ( a [ n ] [ 0 ] > sum ) sum = a [ n ] [ 0 ] ; } else { k = k + 1 ; construct_candidates ( k , c , & ncandidates , in , x ) ; for ( i = 0 ; i < ncandidates ; i ++ ) { a [ k ] [ i ] = a [ k ] [ i ] + c [ i ] ; if ( i == 1 ) x ++ ; backtrack ( a , k , n , in , x ) ; } } } int main ( ) { int T , n ; scanf ( "%d" , & T ) ; while ( T -- ) { int i , j , in [ 100 ] [ 100 ] ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & in [ i ] [ j ] ) ; } } int a [ 100 ] [ 2 ] ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] [ 0 ] = 0 ; a [ i ] [ 1 ] = 0 ; } backtrack ( a , 0 , n - 1 , in , 0 ) ; printf ( "%d\n" , sum ) ; } return 0 ; }