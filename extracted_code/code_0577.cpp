int main ( ) { int i , * * a , j , * * b , max , tc , n ; scanf ( "%d" , & tc ) ; while ( tc -- ) { scanf ( "%d" , & n ) ; a = ( int * * ) malloc ( sizeof ( int * ) * n ) ; b = ( int * * ) malloc ( sizeof ( int * ) * n ) ; a [ 0 ] = ( int * ) malloc ( sizeof ( int ) ) ; b [ 0 ] = ( int * ) malloc ( sizeof ( int ) ) ; scanf ( "%d" , & a [ 0 ] [ 0 ] ) ; b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { free ( a [ i - 1 ] ) ; a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; b [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; b [ i ] [ j ] = 0 ; } for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - 1 ] [ j ] ; else if ( i == j ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - 1 ] [ j - 1 ] ; else { if ( ( a [ i ] [ j ] + b [ i - 1 ] [ j ] ) >= ( a [ i ] [ j ] + b [ i - 1 ] [ j - 1 ] ) ) b [ i ] [ j ] = a [ i ] [ j ] + b [ i - 1 ] [ j ] ; else b [ i ] [ j ] = a [ i ] [ j ] + b [ i - 1 ] [ j - 1 ] ; } } free ( b [ i - 1 ] ) ; } free ( a [ i - 1 ] ) ; max = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( max < b [ n - 1 ] [ i ] ) max = b [ n - 1 ] [ i ] ; } printf ( "%d\n" , max ) ; free ( b [ i - 1 ] ) ; free ( a ) ; free ( b ) ; } return 0 ; }