int fastscan ( ) { char c ; int t = 0 ; while ( ( '0' <= ( c = g ) ) && ( c <= '9' ) ) { t = ( t << 3 ) + ( t << 1 ) + ( c - '0' ) ; } return t ; } int main ( ) { int T ; int ans [ 2001 ] ; int sums [ 2001 ] ; int i , j ; int Tc ; int n ; int num [ 2001 ] ; T = fastscan ( ) ; Tc = T ; while ( Tc -- ) { n = fastscan ( ) ; memset ( ( void * ) sums , 0 , n * sizeof ( sums [ 0 ] ) ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < ( i + 1 ) ; j ++ ) { num [ j ] = fastscan ( ) ; } for ( j = i ; j >= 1 ; j -- ) { sums [ j ] = MAX ( sums [ j ] + num [ j ] , sums [ j - 1 ] + num [ j ] ) ; } sums [ 0 ] += num [ 0 ] ; } ans [ Tc ] = 0 ; for ( i = 0 ; i < n ; i ++ ) { ans [ Tc ] = MAX ( sums [ i ] , ans [ Tc ] ) ; } } while ( T -- ) { printf ( "%d\n" , ans [ T ] ) ; } return 0 ; }