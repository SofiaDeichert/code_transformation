char ibuffer [ BS ] ; long ibuffer_size = 0 , ibuffer_offset = 0 ; static long inline fastread ( ) { long r = 0 , s = 1 ; while ( 1 ) { if ( ibuffer_offset >= ibuffer_size ) { ibuffer_size = read ( 0 , ibuffer , BS ) ; ibuffer_offset = 0 ; } if ( ibuffer [ ibuffer_offset ] < '0' ) { if ( s ) ibuffer_offset ++ ; else return r ; } else { s = 0 ; r = r * 10 + ibuffer [ ibuffer_offset ++ ] - '0' ; } } } int main ( ) { int a [ 100 ] [ 100 ] , i , j , N , T , max ; scanf ( "%d" , & T ) ; while ( T -- ) { scanf ( "%d" , & N ) ; for ( i = 1 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; if ( j == 0 ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j ] ; else if ( i == j ) a [ i ] [ j ] = a [ i ] [ j ] + a [ i - 1 ] [ j - 1 ] ; else a [ i ] [ j ] = a [ i ] [ j ] + ( ( a [ i - 1 ] [ j ] > a [ i - 1 ] [ j - 1 ] ) ? a [ i - 1 ] [ j ] : a [ i - 1 ] [ j - 1 ] ) ; } } max = a [ N - 1 ] [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) if ( a [ N - 1 ] [ i ] > max ) max = a [ N - 1 ] [ i ] ; printf ( "%d\n" , max ) ; } return 0 ; }