void mergeSort ( int * a , int low , int mid , int high ) { int p1 = low , p2 = mid + 1 , i = 0 ; int temp [ high - low + 1 ] ; while ( p1 <= mid && p2 <= high ) { temp [ i ++ ] = ( a [ p1 ] < a [ p2 ] ) ? a [ p1 ++ ] : a [ p2 ++ ] ; } while ( p1 <= mid ) { temp [ i ++ ] = a [ p1 ++ ] ; } while ( p2 <= high ) { temp [ i ++ ] = a [ p2 ++ ] ; } for ( int j = low ; j <= high ; j ++ ) { a [ j ] = temp [ j - low ] ; } } void merge ( int * a , int low , int high ) { if ( low == high ) return ; int mid = low + ( high - low ) / 2 ; merge ( a , low , mid ) ; merge ( a , mid + 1 , high ) ; mergeSort ( a , low , mid , high ) ; } int main ( ) { int t ; scanf ( "%d" , & t ) ; while ( t -- ) { int n ; scanf ( "%d" , & n ) ; int a [ n ] ; for ( int i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } merge ( a , 0 , n - 1 ) ; printf ( "%d\n" , a [ n - 2 ] ) ; } return 0 ; }