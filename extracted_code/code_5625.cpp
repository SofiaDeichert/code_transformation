unsigned long count ( int a [ 100 ] [ 100 ] , int i , int j , int n ) ; int max ( int a , int b ) { return ( a > b ) ? a : b ; } int main ( ) { int n , i = - 1 , k , j , a [ 100 ] [ 100 ] , b ; unsigned long ans [ 1000 ] ; scanf ( "%d" , & n ) ; while ( ++ i < n ) { scanf ( "%d" , & b ) ; for ( j = 0 ; j < b ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( "%d" , & a [ j ] [ k ] ) ; } ans [ i ] = count ( a , 0 , 0 , b ) ; } for ( i = 0 ; i < n ; i ++ ) printf ( "%lu\n" , ans [ i ] ) ; } unsigned long count ( int a [ 100 ] [ 100 ] , int i , int j , int n ) { int DP [ 100 ] [ 100 ] , index , local_max ; unsigned long global_max ; DP [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) DP [ i ] [ j ] = DP [ i - 1 ] [ j ] + a [ i ] [ j ] ; else DP [ i ] [ j ] = max ( DP [ i - 1 ] [ j ] , DP [ i - 1 ] [ j - 1 ] ) + a [ i ] [ j ] ; } global_max = DP [ n - 1 ] [ 0 ] ; if ( n % 2 != 0 ) { index = 1 ; global_max = DP [ n - 1 ] [ 0 ] ; } else { index = 2 ; global_max = max ( DP [ n - 1 ] [ 0 ] , DP [ n - 1 ] [ 1 ] ) ; } for ( j = 0 ; j < n ; j += 2 ) { local_max = max ( DP [ n - 1 ] [ j ] , DP [ n - 1 ] [ j + 1 ] ) ; if ( local_max > global_max ) global_max = local_max ; } return global_max ; }