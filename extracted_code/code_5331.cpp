int max = - 1 ; int summ ( int mt [ ] [ MAX ] , int t , int row , int col ) ; void initialise ( int mt [ ] [ MAX ] ) ; int main ( ) { int i , j , k , d ; int n ; int mat [ MAX ] [ MAX ] ; scanf ( "%d" , & n ) ; if ( n <= 0 || n > 1000 ) return 0 ; int t ; initialise ( mat ) ; for ( i = 1 ; i <= n ; i ++ ) { scanf ( "%d" , & t ) ; if ( t >= 100 ) return 0 ; for ( j = 0 ; j < t ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( "%d" , & mat [ j ] [ k ] ) ; if ( ! ( mat [ j ] [ k ] >= 0 && mat [ j ] [ k ] <= 99 ) ) return 0 ; } } d = summ ( mat , t , 0 , 0 ) ; printf ( "%d\n" , max ) ; max = - 1 ; initialise ( mat ) ; } return 0 ; } void initialise ( int mt [ ] [ MAX ] ) { int i , j ; for ( i = 0 ; i < MAX ; i ++ ) { for ( j = 0 ; j < MAX ; j ++ ) mt [ i ] [ j ] = 0 ; } } int summ ( int mt [ ] [ MAX ] , int t , int row , int col ) { int array [ 1000 * MAX ] ; int ct = 0 ; int dupct , i , count ; for ( i = 0 ; i < 1000 * MAX ; i ++ ) array [ i ] = 0 ; array [ 0 ] = mt [ 0 ] [ 0 ] ; dupct = 0 ; for ( i = 0 ; i < t ; i ++ ) { count = i + 1 ; while ( count > 0 ) { array [ ct + 1 ] = array [ dupct ] + mt [ row + 1 ] [ col ] ; array [ ct + 2 ] = array [ dupct ] + mt [ row + 1 ] [ col + 1 ] ; count = count - 1 ; ct = ct + 2 ; col ++ ; dupct = dupct + 1 ; } row = row + 1 ; col = 0 ; } for ( i = 0 ; array [ i ] != 0 ; i ++ ) { if ( array [ i ] > max ) max = array [ i ] ; } printf ( "\n" ) ; return max ; }