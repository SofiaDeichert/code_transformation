{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 486,
  "text": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B , GCD , LCM , remainder , numerator , denominator ; scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } GCD = denominator ; LCM = A * B / GCD ; printf ( \"%d %d\\n\" , GCD , LCM ) ; } }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 486,
      "text": "int main ( ) { int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B , GCD , LCM , remainder , numerator , denominator ; scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } GCD = denominator ; LCM = A * B / GCD ; printf ( \"%d %d\\n\" , GCD , LCM ) ; } }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 486,
          "text": "{ int T ; scanf ( \"%d\" , & T ) ; while ( T -- ) { int A , B , GCD , LCM , remainder , numerator , denominator ; scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } GCD = denominator ; LCM = A * B / GCD ; printf ( \"%d %d\\n\" , GCD , LCM ) ; } }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 22,
              "text": "int T ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 15,
                  "end_byte": 18,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 19,
                  "end_byte": 20,
                  "text": "T",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 21,
                  "end_byte": 22,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 23,
              "end_byte": 45,
              "text": "scanf ( \"%d\" , & T ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 23,
                  "end_byte": 43,
                  "text": "scanf ( \"%d\" , & T )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 23,
                      "end_byte": 28,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 29,
                      "end_byte": 43,
                      "text": "( \"%d\" , & T )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 29,
                          "end_byte": 30,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 31,
                          "end_byte": 35,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 31,
                              "end_byte": 32,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 32,
                              "end_byte": 34,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 34,
                              "end_byte": 35,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 36,
                          "end_byte": 37,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 38,
                          "end_byte": 41,
                          "text": "& T",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 38,
                              "end_byte": 39,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 40,
                              "end_byte": 41,
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 42,
                          "end_byte": 43,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 44,
                  "end_byte": 45,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 46,
              "end_byte": 484,
              "text": "while ( T -- ) { int A , B , GCD , LCM , remainder , numerator , denominator ; scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } GCD = denominator ; LCM = A * B / GCD ; printf ( \"%d %d\\n\" , GCD , LCM ) ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 46,
                  "end_byte": 51,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 52,
                  "end_byte": 60,
                  "text": "( T -- )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 52,
                      "end_byte": 53,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "update_expression",
                      "start_byte": 54,
                      "end_byte": 58,
                      "text": "T --",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 54,
                          "end_byte": 55,
                          "text": "T",
                          "children": []
                        },
                        {
                          "type": "--",
                          "start_byte": 56,
                          "end_byte": 58,
                          "text": "--",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 59,
                      "end_byte": 60,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 61,
                  "end_byte": 484,
                  "text": "{ int A , B , GCD , LCM , remainder , numerator , denominator ; scanf ( \"%d %d\" , & A , & B ) ; if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } GCD = denominator ; LCM = A * B / GCD ; printf ( \"%d %d\\n\" , GCD , LCM ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 61,
                      "end_byte": 62,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "declaration",
                      "start_byte": 63,
                      "end_byte": 124,
                      "text": "int A , B , GCD , LCM , remainder , numerator , denominator ;",
                      "children": [
                        {
                          "type": "primitive_type",
                          "start_byte": 63,
                          "end_byte": 66,
                          "text": "int",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 67,
                          "end_byte": 68,
                          "text": "A",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 69,
                          "end_byte": 70,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 71,
                          "end_byte": 72,
                          "text": "B",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 73,
                          "end_byte": 74,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 75,
                          "end_byte": 78,
                          "text": "GCD",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 79,
                          "end_byte": 80,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 81,
                          "end_byte": 84,
                          "text": "LCM",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 85,
                          "end_byte": 86,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 87,
                          "end_byte": 96,
                          "text": "remainder",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 97,
                          "end_byte": 98,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 99,
                          "end_byte": 108,
                          "text": "numerator",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 109,
                          "end_byte": 110,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 111,
                          "end_byte": 122,
                          "text": "denominator",
                          "children": []
                        },
                        {
                          "type": ";",
                          "start_byte": 123,
                          "end_byte": 124,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 125,
                      "end_byte": 156,
                      "text": "scanf ( \"%d %d\" , & A , & B ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 125,
                          "end_byte": 154,
                          "text": "scanf ( \"%d %d\" , & A , & B )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 125,
                              "end_byte": 130,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 131,
                              "end_byte": 154,
                              "text": "( \"%d %d\" , & A , & B )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 131,
                                  "end_byte": 132,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 133,
                                  "end_byte": 140,
                                  "text": "\"%d %d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 133,
                                      "end_byte": 134,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 134,
                                      "end_byte": 139,
                                      "text": "%d %d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 139,
                                      "end_byte": 140,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 141,
                                  "end_byte": 142,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 143,
                                  "end_byte": 146,
                                  "text": "& A",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 143,
                                      "end_byte": 144,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 145,
                                      "end_byte": 146,
                                      "text": "A",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 147,
                                  "end_byte": 148,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 149,
                                  "end_byte": 152,
                                  "text": "& B",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 149,
                                      "end_byte": 150,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 151,
                                      "end_byte": 152,
                                      "text": "B",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 153,
                                  "end_byte": 154,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 155,
                          "end_byte": 156,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "start_byte": 157,
                      "end_byte": 250,
                      "text": "if ( A > B ) { numerator = A ; denominator = B ; } else { numerator = B ; denominator = A ; }",
                      "children": [
                        {
                          "type": "if",
                          "start_byte": 157,
                          "end_byte": 159,
                          "text": "if",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 160,
                          "end_byte": 169,
                          "text": "( A > B )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 160,
                              "end_byte": 161,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 162,
                              "end_byte": 167,
                              "text": "A > B",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 162,
                                  "end_byte": 163,
                                  "text": "A",
                                  "children": []
                                },
                                {
                                  "type": ">",
                                  "start_byte": 164,
                                  "end_byte": 165,
                                  "text": ">",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 166,
                                  "end_byte": 167,
                                  "text": "B",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 168,
                              "end_byte": 169,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 170,
                          "end_byte": 207,
                          "text": "{ numerator = A ; denominator = B ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 170,
                              "end_byte": 171,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 172,
                              "end_byte": 187,
                              "text": "numerator = A ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 172,
                                  "end_byte": 185,
                                  "text": "numerator = A",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 172,
                                      "end_byte": 181,
                                      "text": "numerator",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 182,
                                      "end_byte": 183,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 184,
                                      "end_byte": 185,
                                      "text": "A",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 186,
                                  "end_byte": 187,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 188,
                              "end_byte": 205,
                              "text": "denominator = B ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 188,
                                  "end_byte": 203,
                                  "text": "denominator = B",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 188,
                                      "end_byte": 199,
                                      "text": "denominator",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 200,
                                      "end_byte": 201,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 202,
                                      "end_byte": 203,
                                      "text": "B",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 204,
                                  "end_byte": 205,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 206,
                              "end_byte": 207,
                              "text": "}",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "else_clause",
                          "start_byte": 208,
                          "end_byte": 250,
                          "text": "else { numerator = B ; denominator = A ; }",
                          "children": [
                            {
                              "type": "else",
                              "start_byte": 208,
                              "end_byte": 212,
                              "text": "else",
                              "children": []
                            },
                            {
                              "type": "compound_statement",
                              "start_byte": 213,
                              "end_byte": 250,
                              "text": "{ numerator = B ; denominator = A ; }",
                              "children": [
                                {
                                  "type": "{",
                                  "start_byte": 213,
                                  "end_byte": 214,
                                  "text": "{",
                                  "children": []
                                },
                                {
                                  "type": "expression_statement",
                                  "start_byte": 215,
                                  "end_byte": 230,
                                  "text": "numerator = B ;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "start_byte": 215,
                                      "end_byte": 228,
                                      "text": "numerator = B",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 215,
                                          "end_byte": 224,
                                          "text": "numerator",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "start_byte": 225,
                                          "end_byte": 226,
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 227,
                                          "end_byte": 228,
                                          "text": "B",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "start_byte": 229,
                                      "end_byte": 230,
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "start_byte": 231,
                                  "end_byte": 248,
                                  "text": "denominator = A ;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "start_byte": 231,
                                      "end_byte": 246,
                                      "text": "denominator = A",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 231,
                                          "end_byte": 242,
                                          "text": "denominator",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "start_byte": 243,
                                          "end_byte": 244,
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 245,
                                          "end_byte": 246,
                                          "text": "A",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "start_byte": 247,
                                      "end_byte": 248,
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "}",
                                  "start_byte": 249,
                                  "end_byte": 250,
                                  "text": "}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 251,
                      "end_byte": 288,
                      "text": "remainder = numerator % denominator ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 251,
                          "end_byte": 286,
                          "text": "remainder = numerator % denominator",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 251,
                              "end_byte": 260,
                              "text": "remainder",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 261,
                              "end_byte": 262,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 263,
                              "end_byte": 286,
                              "text": "numerator % denominator",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 263,
                                  "end_byte": 272,
                                  "text": "numerator",
                                  "children": []
                                },
                                {
                                  "type": "%",
                                  "start_byte": 273,
                                  "end_byte": 274,
                                  "text": "%",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 275,
                                  "end_byte": 286,
                                  "text": "denominator",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 287,
                          "end_byte": 288,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "while_statement",
                      "start_byte": 289,
                      "end_byte": 407,
                      "text": "while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; }",
                      "children": [
                        {
                          "type": "while",
                          "start_byte": 289,
                          "end_byte": 294,
                          "text": "while",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 295,
                          "end_byte": 313,
                          "text": "( remainder != 0 )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 295,
                              "end_byte": 296,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 297,
                              "end_byte": 311,
                              "text": "remainder != 0",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 297,
                                  "end_byte": 306,
                                  "text": "remainder",
                                  "children": []
                                },
                                {
                                  "type": "!=",
                                  "start_byte": 307,
                                  "end_byte": 309,
                                  "text": "!=",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "start_byte": 310,
                                  "end_byte": 311,
                                  "text": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 312,
                              "end_byte": 313,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 314,
                          "end_byte": 407,
                          "text": "{ numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 314,
                              "end_byte": 315,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 316,
                              "end_byte": 341,
                              "text": "numerator = denominator ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 316,
                                  "end_byte": 339,
                                  "text": "numerator = denominator",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 316,
                                      "end_byte": 325,
                                      "text": "numerator",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 326,
                                      "end_byte": 327,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 328,
                                      "end_byte": 339,
                                      "text": "denominator",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 340,
                                  "end_byte": 341,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 342,
                              "end_byte": 367,
                              "text": "denominator = remainder ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 342,
                                  "end_byte": 365,
                                  "text": "denominator = remainder",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 342,
                                      "end_byte": 353,
                                      "text": "denominator",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 354,
                                      "end_byte": 355,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 356,
                                      "end_byte": 365,
                                      "text": "remainder",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 366,
                                  "end_byte": 367,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 368,
                              "end_byte": 405,
                              "text": "remainder = numerator % denominator ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 368,
                                  "end_byte": 403,
                                  "text": "remainder = numerator % denominator",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 368,
                                      "end_byte": 377,
                                      "text": "remainder",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 378,
                                      "end_byte": 379,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 380,
                                      "end_byte": 403,
                                      "text": "numerator % denominator",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 380,
                                          "end_byte": 389,
                                          "text": "numerator",
                                          "children": []
                                        },
                                        {
                                          "type": "%",
                                          "start_byte": 390,
                                          "end_byte": 391,
                                          "text": "%",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 392,
                                          "end_byte": 403,
                                          "text": "denominator",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 404,
                                  "end_byte": 405,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 406,
                              "end_byte": 407,
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 408,
                      "end_byte": 427,
                      "text": "GCD = denominator ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 408,
                          "end_byte": 425,
                          "text": "GCD = denominator",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 408,
                              "end_byte": 411,
                              "text": "GCD",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 412,
                              "end_byte": 413,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 414,
                              "end_byte": 425,
                              "text": "denominator",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 426,
                          "end_byte": 427,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 428,
                      "end_byte": 447,
                      "text": "LCM = A * B / GCD ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 428,
                          "end_byte": 445,
                          "text": "LCM = A * B / GCD",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 428,
                              "end_byte": 431,
                              "text": "LCM",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 432,
                              "end_byte": 433,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 434,
                              "end_byte": 445,
                              "text": "A * B / GCD",
                              "children": [
                                {
                                  "type": "binary_expression",
                                  "start_byte": 434,
                                  "end_byte": 439,
                                  "text": "A * B",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 434,
                                      "end_byte": 435,
                                      "text": "A",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "start_byte": 436,
                                      "end_byte": 437,
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 438,
                                      "end_byte": 439,
                                      "text": "B",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "/",
                                  "start_byte": 440,
                                  "end_byte": 441,
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 442,
                                  "end_byte": 445,
                                  "text": "GCD",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 446,
                          "end_byte": 447,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 448,
                      "end_byte": 482,
                      "text": "printf ( \"%d %d\\n\" , GCD , LCM ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 448,
                          "end_byte": 480,
                          "text": "printf ( \"%d %d\\n\" , GCD , LCM )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 448,
                              "end_byte": 454,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 455,
                              "end_byte": 480,
                              "text": "( \"%d %d\\n\" , GCD , LCM )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 455,
                                  "end_byte": 456,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 457,
                                  "end_byte": 466,
                                  "text": "\"%d %d\\n\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 457,
                                      "end_byte": 458,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 458,
                                      "end_byte": 463,
                                      "text": "%d %d",
                                      "children": []
                                    },
                                    {
                                      "type": "escape_sequence",
                                      "start_byte": 463,
                                      "end_byte": 465,
                                      "text": "\\n",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 465,
                                      "end_byte": 466,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 467,
                                  "end_byte": 468,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 469,
                                  "end_byte": 472,
                                  "text": "GCD",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "start_byte": 473,
                                  "end_byte": 474,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 475,
                                  "end_byte": 478,
                                  "text": "LCM",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 479,
                                  "end_byte": 480,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 481,
                          "end_byte": 482,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 483,
                      "end_byte": 484,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 485,
              "end_byte": 486,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}