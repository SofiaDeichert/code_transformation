int max ( int x , int y ) { return x > y ? x : y ; } long findBest ( int triangle [ ] [ MAXROWS ] , long best [ ] [ MAXROWS ] , int i , int j , int rows ) { if ( i == rows - 1 ) return ( long ) triangle [ i ] [ j ] ; else if ( best [ i ] [ j ] != 0 ) { return best [ i ] [ j ] ; } return best [ i ] [ j ] = ( long ) ( triangle [ i ] [ j ] + max ( findBest ( triangle , best , i + 1 , j , rows ) , findBest ( triangle , best , i + 1 , j + 1 , rows ) ) ) ; } int main ( ) { int t , n ; int triangle [ MAXROWS ] [ MAXROWS ] ; long best [ MAXROWS ] [ MAXROWS ] ; int i , j ; scanf ( "%d " , & t ) ; while ( t -- ) { scanf ( "%d " , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { best [ i ] [ j ] = 0 ; scanf ( "%d " , & triangle [ i ] [ j ] ) ; } } printf ( "%ld\n" , findBest ( triangle , best , 0 , 0 , n ) ) ; } return 0 ; }