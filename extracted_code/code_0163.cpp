void merge ( long long int , long long int , long long int ) ; void mergesort ( long long int , long long int ) ; long long int a [ 50000 ] ; int main ( void ) { long long int n , t , sum , i ; scanf ( "%lld" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( "%lld" , & n ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%lld" , & a [ i ] ) ; mergesort ( 0 , n - 1 ) ; printf ( "%lld\n" , a [ 0 ] * ( n - 1 ) ) ; } return 0 ; } void mergesort ( long long int start , long long int end ) { long long int mid ; if ( start < end ) { mid = ( start + end - 1 ) / 2 ; mergesort ( start , mid ) ; mergesort ( mid + 1 , end ) ; merge ( start , mid , end ) ; } } void merge ( long long int start , long long int mid , long long int end ) { long long int l [ 100000 ] , r [ 100000 ] , n1 , n2 , i , j , k ; n1 = mid - start + 1 ; n2 = end - mid ; for ( i = 0 ; i < n1 ; i ++ ) l [ i ] = a [ start + i ] ; for ( i = 0 ; i < n2 ; i ++ ) r [ i ] = a [ i + mid + 1 ] ; i = j = 0 ; k = start ; while ( i < n1 && j < n2 ) { if ( l [ i ] < r [ j ] ) { a [ k ] = l [ i ] ; i ++ ; } else { a [ k ] = r [ j ] ; j ++ ; } k ++ ; } while ( i < n1 ) { a [ k ] = l [ i ] ; i ++ ; k ++ ; } while ( j < n2 ) { a [ k ] = r [ j ] ; j ++ ; k ++ ; } }