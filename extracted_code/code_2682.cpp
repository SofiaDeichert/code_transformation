int solve ( int i , int j ) ; int max ( int , int ) ; int arr [ 100 ] [ 100 ] , n ; int main ( ) { int i , j , k , x ; scanf ( "%d " , & x ) ; for ( k = 1 ; k <= x ; k ++ ) { scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( "%d" , & arr [ i ] [ j ] ) ; } printf ( "%d\n" , solve ( 0 , 0 ) ) ; } return 0 ; } int solve ( int i , int j ) { int cost1 , cost2 , cost , cache [ 100 ] [ 100 ] , visited [ 100 ] [ 100 ] = { 0 } ; if ( i > n ) return 0 ; if ( visited [ i ] [ j ] == 1 ) return cache [ i ] [ j ] ; cost1 = solve ( i + 1 , j ) ; cost2 = solve ( i + 1 , j + 1 ) ; cost = max ( cost1 , cost2 ) + arr [ i ] [ j ] ; cache [ i ] [ j ] = cost ; visited [ i ] [ j ] = 1 ; return cost ; } int max ( int cost1 , int cost2 ) { if ( cost1 > cost2 ) return cost1 ; else return cost2 ; }