int triSum ( int height , int * pyr [ height ] ) { int * sum [ height ] ; int c = 0 ; int temp = 0 ; int maxVal = 0 ; while ( c < height ) { sum [ c ] = ( int * ) malloc ( sizeof ( int ) * ( c + 1 ) ) ; sum [ c ] [ 0 ] = pyr [ c ] [ 0 ] + temp ; temp = sum [ c ] [ 0 ] ; int i = 1 ; while ( i <= c && c != 0 ) { if ( i == c ) sum [ c ] [ i ] = sum [ c - 1 ] [ i - 1 ] + pyr [ c ] [ i ] ; else sum [ c ] [ i ] = sum [ c - 1 ] [ i - 1 ] > sum [ c - 1 ] [ i ] ? ( sum [ c - 1 ] [ i - 1 ] + pyr [ c ] [ i ] ) : ( sum [ c - 1 ] [ i ] + pyr [ c ] [ i ] ) ; i ++ ; } c ++ ; } c = 0 ; while ( c < height ) { if ( maxVal < sum [ height - 1 ] [ c ] ) maxVal = sum [ height - 1 ] [ c ] ; c ++ ; } return maxVal ; } int main ( ) { int count = 0 ; int cases ; scanf ( "%d" , & cases ) ; int levels ; int sol [ cases ] ; while ( count < cases ) { scanf ( "%d" , & levels ) ; int * inp [ count ] [ levels ] ; int c = 0 ; while ( c < levels ) { inp [ count ] [ c ] = ( int * ) malloc ( sizeof ( int ) * ( c + 1 ) ) ; int i = 0 ; while ( i <= c ) { scanf ( "%d" , & inp [ count ] [ c ] [ i ] ) ; i ++ ; } c ++ ; } sol [ count ] = triSum ( levels , inp [ count ] ) ; count ++ ; } count = 0 ; while ( count < cases ) { printf ( "%d\n" , sol [ count ] ) ; count ++ ; } return 0 ; }