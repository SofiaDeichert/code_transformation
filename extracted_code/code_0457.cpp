int find_sum ( int * triangle , int row , int column , int rows ) { int below , right , next_row = row + 1 ; if ( next_row == rows ) { return triangle [ row * 100 + column ] ; } below = find_sum ( triangle , next_row , column , rows ) ; right = find_sum ( triangle , next_row , column + 1 , rows ) ; return triangle [ row * 100 + column ] + ( below > right ? below : right ) ; } int find_max_sum ( int * triangle , int rows ) { return find_sum ( triangle , 0 , 0 , rows ) ; } int main ( ) { int testcases , rows , i , j , * triangle ; triangle = malloc ( sizeof ( int ) * 10000 ) ; scanf ( "%d" , & testcases ) ; while ( testcases -- ) { scanf ( "%d" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & triangle [ i * 100 + j ] ) ; } } printf ( "%d\n" , find_max_sum ( triangle , rows ) ) ; } return 0 ; }