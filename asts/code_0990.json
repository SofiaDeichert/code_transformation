{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 344,
  "text": "int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } return a ; } int main ( ) { int T , M , N ; long long ans ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & M , & N ) ; ans = gcd ( M , N ) ; printf ( \"%lld %lld\\n\" , ans , M * N / ans ) ; } return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 141,
      "text": "int gcd ( int a , int b ) { while ( a != b ) { if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } return a ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 25,
          "text": "gcd ( int a , int b )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 7,
              "text": "gcd",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 8,
              "end_byte": 25,
              "text": "( int a , int b )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 8,
                  "end_byte": 9,
                  "text": "(",
                  "children": []
                },
                {
                  "type": "parameter_declaration",
                  "start_byte": 10,
                  "end_byte": 15,
                  "text": "int a",
                  "children": [
                    {
                      "type": "primitive_type",
                      "start_byte": 10,
                      "end_byte": 13,
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 14,
                      "end_byte": 15,
                      "text": "a",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "start_byte": 16,
                  "end_byte": 17,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "parameter_declaration",
                  "start_byte": 18,
                  "end_byte": 23,
                  "text": "int b",
                  "children": [
                    {
                      "type": "primitive_type",
                      "start_byte": 18,
                      "end_byte": 21,
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 22,
                      "end_byte": 23,
                      "text": "b",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "start_byte": 24,
                  "end_byte": 25,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 26,
          "end_byte": 141,
          "text": "{ while ( a != b ) { if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } } return a ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 26,
              "end_byte": 27,
              "text": "{",
              "children": []
            },
            {
              "type": "while_statement",
              "start_byte": 28,
              "end_byte": 128,
              "text": "while ( a != b ) { if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 28,
                  "end_byte": 33,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 34,
                  "end_byte": 44,
                  "text": "( a != b )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 34,
                      "end_byte": 35,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 36,
                      "end_byte": 42,
                      "text": "a != b",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 36,
                          "end_byte": 37,
                          "text": "a",
                          "children": []
                        },
                        {
                          "type": "!=",
                          "start_byte": 38,
                          "end_byte": 40,
                          "text": "!=",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 41,
                          "end_byte": 42,
                          "text": "b",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 43,
                      "end_byte": 44,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 45,
                  "end_byte": 128,
                  "text": "{ if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; } }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 45,
                      "end_byte": 46,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "if_statement",
                      "start_byte": 47,
                      "end_byte": 126,
                      "text": "if ( a > b ) { return gcd ( a - b , b ) ; } else { return gcd ( a , b - a ) ; }",
                      "children": [
                        {
                          "type": "if",
                          "start_byte": 47,
                          "end_byte": 49,
                          "text": "if",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 50,
                          "end_byte": 59,
                          "text": "( a > b )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 50,
                              "end_byte": 51,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 52,
                              "end_byte": 57,
                              "text": "a > b",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 52,
                                  "end_byte": 53,
                                  "text": "a",
                                  "children": []
                                },
                                {
                                  "type": ">",
                                  "start_byte": 54,
                                  "end_byte": 55,
                                  "text": ">",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 56,
                                  "end_byte": 57,
                                  "text": "b",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 58,
                              "end_byte": 59,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 60,
                          "end_byte": 90,
                          "text": "{ return gcd ( a - b , b ) ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 60,
                              "end_byte": 61,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "return_statement",
                              "start_byte": 62,
                              "end_byte": 88,
                              "text": "return gcd ( a - b , b ) ;",
                              "children": [
                                {
                                  "type": "return",
                                  "start_byte": 62,
                                  "end_byte": 68,
                                  "text": "return",
                                  "children": []
                                },
                                {
                                  "type": "call_expression",
                                  "start_byte": 69,
                                  "end_byte": 86,
                                  "text": "gcd ( a - b , b )",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 69,
                                      "end_byte": 72,
                                      "text": "gcd",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "start_byte": 73,
                                      "end_byte": 86,
                                      "text": "( a - b , b )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start_byte": 73,
                                          "end_byte": 74,
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_expression",
                                          "start_byte": 75,
                                          "end_byte": 80,
                                          "text": "a - b",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 75,
                                              "end_byte": 76,
                                              "text": "a",
                                              "children": []
                                            },
                                            {
                                              "type": "-",
                                              "start_byte": 77,
                                              "end_byte": 78,
                                              "text": "-",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "start_byte": 79,
                                              "end_byte": 80,
                                              "text": "b",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "start_byte": 81,
                                          "end_byte": 82,
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 83,
                                          "end_byte": 84,
                                          "text": "b",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "start_byte": 85,
                                          "end_byte": 86,
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 87,
                                  "end_byte": 88,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 89,
                              "end_byte": 90,
                              "text": "}",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "else_clause",
                          "start_byte": 91,
                          "end_byte": 126,
                          "text": "else { return gcd ( a , b - a ) ; }",
                          "children": [
                            {
                              "type": "else",
                              "start_byte": 91,
                              "end_byte": 95,
                              "text": "else",
                              "children": []
                            },
                            {
                              "type": "compound_statement",
                              "start_byte": 96,
                              "end_byte": 126,
                              "text": "{ return gcd ( a , b - a ) ; }",
                              "children": [
                                {
                                  "type": "{",
                                  "start_byte": 96,
                                  "end_byte": 97,
                                  "text": "{",
                                  "children": []
                                },
                                {
                                  "type": "return_statement",
                                  "start_byte": 98,
                                  "end_byte": 124,
                                  "text": "return gcd ( a , b - a ) ;",
                                  "children": [
                                    {
                                      "type": "return",
                                      "start_byte": 98,
                                      "end_byte": 104,
                                      "text": "return",
                                      "children": []
                                    },
                                    {
                                      "type": "call_expression",
                                      "start_byte": 105,
                                      "end_byte": 122,
                                      "text": "gcd ( a , b - a )",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 105,
                                          "end_byte": 108,
                                          "text": "gcd",
                                          "children": []
                                        },
                                        {
                                          "type": "argument_list",
                                          "start_byte": 109,
                                          "end_byte": 122,
                                          "text": "( a , b - a )",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start_byte": 109,
                                              "end_byte": 110,
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "start_byte": 111,
                                              "end_byte": 112,
                                              "text": "a",
                                              "children": []
                                            },
                                            {
                                              "type": ",",
                                              "start_byte": 113,
                                              "end_byte": 114,
                                              "text": ",",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_expression",
                                              "start_byte": 115,
                                              "end_byte": 120,
                                              "text": "b - a",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 115,
                                                  "end_byte": 116,
                                                  "text": "b",
                                                  "children": []
                                                },
                                                {
                                                  "type": "-",
                                                  "start_byte": 117,
                                                  "end_byte": 118,
                                                  "text": "-",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 119,
                                                  "end_byte": 120,
                                                  "text": "a",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "start_byte": 121,
                                              "end_byte": 122,
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "start_byte": 123,
                                      "end_byte": 124,
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "}",
                                  "start_byte": 125,
                                  "end_byte": 126,
                                  "text": "}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 127,
                      "end_byte": 128,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 129,
              "end_byte": 139,
              "text": "return a ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 129,
                  "end_byte": 135,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 136,
                  "end_byte": 137,
                  "text": "a",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 138,
                  "end_byte": 139,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 140,
              "end_byte": 141,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "start_byte": 142,
      "end_byte": 344,
      "text": "int main ( ) { int T , M , N ; long long ans ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & M , & N ) ; ans = gcd ( M , N ) ; printf ( \"%lld %lld\\n\" , ans , M * N / ans ) ; } return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 142,
          "end_byte": 145,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 146,
          "end_byte": 154,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 146,
              "end_byte": 150,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 151,
              "end_byte": 154,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 151,
                  "end_byte": 152,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 153,
                  "end_byte": 154,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 155,
          "end_byte": 344,
          "text": "{ int T , M , N ; long long ans ; scanf ( \"%d\" , & T ) ; while ( T -- ) { scanf ( \"%d %d\" , & M , & N ) ; ans = gcd ( M , N ) ; printf ( \"%lld %lld\\n\" , ans , M * N / ans ) ; } return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 155,
              "end_byte": 156,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 157,
              "end_byte": 172,
              "text": "int T , M , N ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 157,
                  "end_byte": 160,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 161,
                  "end_byte": 162,
                  "text": "T",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 163,
                  "end_byte": 164,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 165,
                  "end_byte": 166,
                  "text": "M",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 167,
                  "end_byte": 168,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 169,
                  "end_byte": 170,
                  "text": "N",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 171,
                  "end_byte": 172,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "declaration",
              "start_byte": 173,
              "end_byte": 188,
              "text": "long long ans ;",
              "children": [
                {
                  "type": "sized_type_specifier",
                  "start_byte": 173,
                  "end_byte": 182,
                  "text": "long long",
                  "children": [
                    {
                      "type": "long",
                      "start_byte": 173,
                      "end_byte": 177,
                      "text": "long",
                      "children": []
                    },
                    {
                      "type": "long",
                      "start_byte": 178,
                      "end_byte": 182,
                      "text": "long",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "identifier",
                  "start_byte": 183,
                  "end_byte": 186,
                  "text": "ans",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 187,
                  "end_byte": 188,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 189,
              "end_byte": 211,
              "text": "scanf ( \"%d\" , & T ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 189,
                  "end_byte": 209,
                  "text": "scanf ( \"%d\" , & T )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 189,
                      "end_byte": 194,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 195,
                      "end_byte": 209,
                      "text": "( \"%d\" , & T )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 195,
                          "end_byte": 196,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 197,
                          "end_byte": 201,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 197,
                              "end_byte": 198,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 198,
                              "end_byte": 200,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 200,
                              "end_byte": 201,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 202,
                          "end_byte": 203,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 204,
                          "end_byte": 207,
                          "text": "& T",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 204,
                              "end_byte": 205,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 206,
                              "end_byte": 207,
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 208,
                          "end_byte": 209,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 210,
                  "end_byte": 211,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 212,
              "end_byte": 331,
              "text": "while ( T -- ) { scanf ( \"%d %d\" , & M , & N ) ; ans = gcd ( M , N ) ; printf ( \"%lld %lld\\n\" , ans , M * N / ans ) ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 212,
                  "end_byte": 217,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 218,
                  "end_byte": 226,
                  "text": "( T -- )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 218,
                      "end_byte": 219,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "update_expression",
                      "start_byte": 220,
                      "end_byte": 224,
                      "text": "T --",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 220,
                          "end_byte": 221,
                          "text": "T",
                          "children": []
                        },
                        {
                          "type": "--",
                          "start_byte": 222,
                          "end_byte": 224,
                          "text": "--",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 225,
                      "end_byte": 226,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 227,
                  "end_byte": 331,
                  "text": "{ scanf ( \"%d %d\" , & M , & N ) ; ans = gcd ( M , N ) ; printf ( \"%lld %lld\\n\" , ans , M * N / ans ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 227,
                      "end_byte": 228,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 229,
                      "end_byte": 260,
                      "text": "scanf ( \"%d %d\" , & M , & N ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 229,
                          "end_byte": 258,
                          "text": "scanf ( \"%d %d\" , & M , & N )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 229,
                              "end_byte": 234,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 235,
                              "end_byte": 258,
                              "text": "( \"%d %d\" , & M , & N )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 235,
                                  "end_byte": 236,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 237,
                                  "end_byte": 244,
                                  "text": "\"%d %d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 237,
                                      "end_byte": 238,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 238,
                                      "end_byte": 243,
                                      "text": "%d %d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 243,
                                      "end_byte": 244,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 245,
                                  "end_byte": 246,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 247,
                                  "end_byte": 250,
                                  "text": "& M",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 247,
                                      "end_byte": 248,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 249,
                                      "end_byte": 250,
                                      "text": "M",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 251,
                                  "end_byte": 252,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 253,
                                  "end_byte": 256,
                                  "text": "& N",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 253,
                                      "end_byte": 254,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 255,
                                      "end_byte": 256,
                                      "text": "N",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 257,
                                  "end_byte": 258,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 259,
                          "end_byte": 260,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 261,
                      "end_byte": 282,
                      "text": "ans = gcd ( M , N ) ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 261,
                          "end_byte": 280,
                          "text": "ans = gcd ( M , N )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 261,
                              "end_byte": 264,
                              "text": "ans",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 265,
                              "end_byte": 266,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call_expression",
                              "start_byte": 267,
                              "end_byte": 280,
                              "text": "gcd ( M , N )",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 267,
                                  "end_byte": 270,
                                  "text": "gcd",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "start_byte": 271,
                                  "end_byte": 280,
                                  "text": "( M , N )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 271,
                                      "end_byte": 272,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 273,
                                      "end_byte": 274,
                                      "text": "M",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "start_byte": 275,
                                      "end_byte": 276,
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 277,
                                      "end_byte": 278,
                                      "text": "N",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 279,
                                      "end_byte": 280,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 281,
                          "end_byte": 282,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 283,
                      "end_byte": 329,
                      "text": "printf ( \"%lld %lld\\n\" , ans , M * N / ans ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 283,
                          "end_byte": 327,
                          "text": "printf ( \"%lld %lld\\n\" , ans , M * N / ans )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 283,
                              "end_byte": 289,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 290,
                              "end_byte": 327,
                              "text": "( \"%lld %lld\\n\" , ans , M * N / ans )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 290,
                                  "end_byte": 291,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 292,
                                  "end_byte": 305,
                                  "text": "\"%lld %lld\\n\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 292,
                                      "end_byte": 293,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 293,
                                      "end_byte": 302,
                                      "text": "%lld %lld",
                                      "children": []
                                    },
                                    {
                                      "type": "escape_sequence",
                                      "start_byte": 302,
                                      "end_byte": 304,
                                      "text": "\\n",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 304,
                                      "end_byte": 305,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 306,
                                  "end_byte": 307,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 308,
                                  "end_byte": 311,
                                  "text": "ans",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "start_byte": 312,
                                  "end_byte": 313,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "binary_expression",
                                  "start_byte": 314,
                                  "end_byte": 325,
                                  "text": "M * N / ans",
                                  "children": [
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 314,
                                      "end_byte": 319,
                                      "text": "M * N",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 314,
                                          "end_byte": 315,
                                          "text": "M",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "start_byte": 316,
                                          "end_byte": 317,
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 318,
                                          "end_byte": 319,
                                          "text": "N",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "/",
                                      "start_byte": 320,
                                      "end_byte": 321,
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 322,
                                      "end_byte": 325,
                                      "text": "ans",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 326,
                                  "end_byte": 327,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 328,
                          "end_byte": 329,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 330,
                      "end_byte": 331,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 332,
              "end_byte": 342,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 332,
                  "end_byte": 338,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 339,
                  "end_byte": 340,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 341,
                  "end_byte": 342,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 343,
              "end_byte": 344,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}