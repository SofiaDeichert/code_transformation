short int rows ; short int space [ 100 ] [ 100 ] ; short int sum_cache [ 100 ] [ 100 ] ; short int sumtrian ( short int , short int ) ; short int main ( ) { short int t , i , j ; scanf ( "%hd" , & t ) ; while ( t != 0 ) { scanf ( "%hd" , & rows ) ; for ( i = 0 ; i < rows ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%hd" , & space [ i ] [ j ] ) ; sum_cache [ i ] [ j ] = - 1 ; } printf ( "%hd\n" , sumtrian ( 0 , 0 ) ) ; -- t ; rows = 0 ; } return 1 ; } short int sumtrian ( short int curr_row , short int curr_col ) { if ( curr_row < ( rows - 1 ) ) { if ( sum_cache [ curr_row ] [ curr_col ] == - 1 ) { short int sb , sr ; sb = sumtrian ( curr_row + 1 , curr_col ) ; sr = sumtrian ( curr_row + 1 , curr_col + 1 ) ; sum_cache [ curr_row ] [ curr_col ] = space [ curr_row ] [ curr_col ] + ( ( sb > sr ) ? sb : sr ) ; } return sum_cache [ curr_row ] [ curr_col ] ; } sum_cache [ curr_row ] [ curr_col ] = space [ curr_row ] [ curr_col ] ; return sum_cache [ curr_row ] [ curr_col ] ; }