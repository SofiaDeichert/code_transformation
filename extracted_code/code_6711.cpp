char ibuf [ BUF ] ; int ipt = BUF ; int readInt ( ) { while ( ipt < BUF && ibuf [ ipt ] < '0' ) ipt ++ ; if ( ipt == BUF ) { fread ( ibuf , 1 , BUF , stdin ) ; ipt = 0 ; while ( ipt < BUF && ibuf [ ipt ] < '0' ) ipt ++ ; } int n = 0 ; while ( ipt < BUF && ibuf [ ipt ] >= '0' ) n = ( n * 10 ) + ( ibuf [ ipt ++ ] - '0' ) ; if ( ipt == BUF ) { fread ( ibuf , 1 , BUF , stdin ) ; ipt = 0 ; while ( ipt < BUF && ibuf [ ipt ] >= '0' ) n = ( n * 10 ) + ( ibuf [ ipt ++ ] - '0' ) ; } return n ; } int main ( ) { int i , j , t , n , * * a , * * b , max ; t = readInt ( ) ; while ( t > 0 ) { t -- ; n = readInt ( ) ; a = ( int * * ) malloc ( n * sizeof ( int * ) ) ; b = ( int * * ) malloc ( n * sizeof ( int * ) ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; b [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; } for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = readInt ( ) ; b [ 0 ] [ 0 ] = a [ 0 ] [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j - 1 < 0 ) b [ i ] [ j ] = b [ i - 1 ] [ j ] + a [ i ] [ j ] ; else if ( j == i ) b [ i ] [ j ] = b [ i - 1 ] [ j - 1 ] + a [ i ] [ j ] ; else { b [ i ] [ j ] = b [ i - 1 ] [ j ] > b [ i - 1 ] [ j - 1 ] ? b [ i - 1 ] [ j ] : b [ i - 1 ] [ j - 1 ] ; b [ i ] [ j ] += a [ i ] [ j ] ; } } } max = 0 ; for ( j = 0 ; j < n ; j ++ ) if ( b [ n - 1 ] [ j ] > max ) max = b [ n - 1 ] [ j ] ; printf ( "%d\n" , max ) ; for ( i = 0 ; i < n ; i ++ ) { free ( a [ i ] ) ; free ( b [ i ] ) ; } free ( a ) ; free ( b ) ; } return 0 ; }