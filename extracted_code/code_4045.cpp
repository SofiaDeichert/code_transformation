int num [ 100 ] [ 100 ] ; int r , r1 ; int a [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int ans ( int num [ 100 ] [ 100 ] , int i , int j ) { if ( a [ i ] [ j ] != 0 ) return a [ i ] [ j ] ; if ( i < 0 || j < 0 ) return 0 ; if ( i == 0 && j == 0 ) { a [ i ] [ j ] = num [ i ] [ j ] ; return a [ i ] [ j ] ; } else { a [ i ] [ j ] = ( num [ i ] [ j ] + max ( ans ( num , i - 1 , j ) , ans ( num , i - 1 , j - 1 ) ) ) ; return a [ i ] [ j ] ; } } void fastRead ( ) { int i = 0 , p = 0 , q = 0 ; char s [ 65535 ] ; char * string ; int bytesRead ; int nbytes = 100 ; string = ( char * ) malloc ( nbytes + 1 ) ; int u = 0 ; scanf ( "%d\n" , & r ) ; r1 = r ; while ( r ) { bytesRead = getline ( & string , & nbytes , stdin ) ; while ( string [ i ] != '\n' ) { if ( string [ i ] == ' ' ) { num [ p ] [ q ] = u ; u = 0 ; i ++ ; q ++ ; } else { u = u * 10 + ( string [ i ] - '0' ) ; i ++ ; } } num [ p ] [ q ] = u ; u = 0 ; p ++ ; r -- ; q = 0 ; i = 0 ; } } int main ( int argc , char * * argv ) { int n , i , j , count = 0 , se ; int an [ 100 ] ; scanf ( "%d\n" , & n ) ; while ( n ) { fastRead ( ) ; for ( i = 0 ; i <= 100 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) a [ i ] [ j ] = 0 ; i = 0 ; se = ans ( num , r1 - 1 , i ) ; for ( i = 0 ; i < r1 ; i ++ ) { if ( ans ( num , r1 - 1 , i ) > se ) se = ans ( num , r1 - 1 , i ) ; } an [ count ] = se ; count ++ ; n -- ; } for ( i = 0 ; i < count ; i ++ ) printf ( "%d\n" , an [ i ] ) ; return ( EXIT_SUCCESS ) ; }