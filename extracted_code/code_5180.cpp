int print ( int data [ 100 ] [ 100 ] , int n , char * msg ) { printf ( "\n %s \n" , msg ) ; int i , j ; for ( i = 0 ; i < n ; ++ i ) { for ( j = 0 ; j <= i ; ++ j ) printf ( "%d" , data [ i ] [ j ] ) ; printf ( "\n" ) ; } } int max ( int i , int j ) { if ( i > j ) return i ; else return j ; } int value ( int i , int j , int data [ 100 ] [ 100 ] ) { if ( i < 0 || j < 0 ) return 0 ; return data [ i ] [ j ] ; } int solve ( int data [ 100 ] [ 100 ] , int n ) { int sol [ 100 ] [ 100 ] ; int i , j ; for ( i = 0 ; i < n ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) sol [ i ] [ j ] = data [ i ] [ j ] + max ( value ( i - 1 , j , sol ) , value ( i - 1 , j - 1 , sol ) ) ; int maxpath = 0 ; for ( j = 0 ; j < n ; ++ j ) { maxpath = max ( maxpath , sol [ n - 1 ] [ j ] ) ; } return maxpath ; } int main ( ) { int test_cases , lines , i , j ; int data [ 100 ] [ 100 ] ; scanf ( "%d" , & test_cases ) ; while ( test_cases > 0 ) { scanf ( "%d" , & lines ) ; for ( i = 0 ; i < lines ; ++ i ) for ( j = 0 ; j <= i ; ++ j ) scanf ( "%d" , & data [ i ] [ j ] ) ; printf ( "%d\n" , solve ( data , lines ) ) ; -- test_cases ; } }