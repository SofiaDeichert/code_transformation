void str_reverse ( char * str ) { int i = 0 , j = strlen ( str ) - 1 ; char temp ; while ( i < j ) { temp = str [ i ] ; str [ i ++ ] = str [ j ] ; str [ j -- ] = temp ; } } void int_to_str ( int num , char * str ) { int i = 0 ; while ( num ) { str [ i ++ ] = ( num ) + '0' ; num /= 10 ; } str [ i ] = '\0' ; str_reverse ( str ) ; } char * mul_array ( char * num1 , char * num2 ) { char * result ; int i , j , k = 0 , carry , temp , temp1 , length1 = strlen ( num1 ) , length2 = strlen ( num2 ) ; result = ( char * ) malloc ( ( length1 + length2 + 1 ) * sizeof ( char ) ) ; for ( i = 0 ; i < length1 + length2 + 1 ; i ++ ) result [ i ] = '0' ; for ( i = length1 - 1 ; i >= 0 ; i -- ) { k = length1 - 1 - i ; carry = 0 ; for ( j = length2 - 1 ; j >= 0 ; j -- ) { temp = ( num2 [ j ] - '0' ) * ( num1 [ i ] - '0' ) ; temp += carry ; temp1 = temp ; temp /= 10 ; carry = temp ; temp = result [ k ] - '0' + temp1 ; result [ k ++ ] = ( temp ) + '0' ; temp /= 10 ; carry += temp ; } while ( carry != 0 ) { temp = carry % 10 ; carry /= 10 ; temp1 = result [ k ] - '0' + temp ; result [ k ++ ] = temp1 + '0' ; carry += temp1 / 10 ; } } result [ k ] = '\0' ; str_reverse ( result ) ; return result ; } int main ( void ) { int t , n , i , num , min ; char nStr [ 7 ] , minStr [ 7 ] , * result ; scanf ( "%d" , & t ) ; while ( t -- ) { scanf ( "%d" , & n ) ; min = 100001 ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & num ) ; if ( num < min ) min = num ; } int_to_str ( n - 1 , nStr ) ; int_to_str ( min , minStr ) ; result = mul_array ( nStr , minStr ) ; printf ( "%s\n" , result ) ; free ( result ) ; } return 0 ; }