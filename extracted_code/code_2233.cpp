int optimal ( int a [ ] [ 100 ] , int s [ ] [ 100 ] , int , int , int ) ; int main ( ) { int a [ 100 ] [ 100 ] , s [ 100 ] [ 100 ] , r , sum , i , j , noc ; scanf ( "%d" , & noc ) ; while ( noc ) { scanf ( "%d" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; s [ i ] [ j ] = - 1 ; } sum = optimal ( a , s , 0 , 0 , r ) ; printf ( "%d\n" , sum ) ; noc -- ; } return 0 ; } int optimal ( int a [ ] [ 100 ] , int s [ ] [ 100 ] , int row , int col , int r ) { if ( row == ( r - 1 ) ) return a [ row ] [ col ] ; if ( s [ row ] [ col ] > 0 ) return s [ row ] [ col ] ; if ( ( s [ row + 1 ] [ col ] = optimal ( a , s , row + 1 , col , r ) ) > ( s [ row + 1 ] [ col + 1 ] = optimal ( a , s , row + 1 , col + 1 , r ) ) ) return ( a [ row ] [ col ] + s [ row + 1 ] [ col ] ) ; else return ( a [ row ] [ col ] + s [ row + 1 ] [ col + 1 ] ) ; }