typedef struct triangle_ { int elements [ 10000 ] ; int tam ; } triangle ; void sum_last_triangle ( triangle * t ) { int i , max , tindex , rindex ; tindex = t -> tam * ( t -> tam - 1 ) / 2 ; t -> tam -- ; rindex = t -> tam * ( t -> tam - 1 ) / 2 ; for ( i = 0 ; i < t -> tam ; i ++ ) { max = t -> elements [ i + tindex ] > t -> elements [ i + tindex + 1 ] ? t -> elements [ i + tindex ] : t -> elements [ i + tindex + 1 ] ; t -> elements [ i + rindex ] += max ; } } int max_sum_triangle ( triangle t ) { int result ; while ( t . tam >= 3 ) { sum_last_triangle ( & t ) ; } result = ( t . elements [ 1 ] > t . elements [ 2 ] ) ? t . elements [ 1 ] : t . elements [ 2 ] ; result += t . elements [ 0 ] ; return result ; } void test ( ) { int i , tam ; triangle t ; scanf ( "%d" , & t . tam ) ; tam = t . tam ; for ( i = 0 ; i < tam * ( tam + 1 ) / 2 ; i ++ ) { scanf ( "%d" , & t . elements [ i ] ) ; } printf ( "%d\n" , max_sum_triangle ( t ) ) ; } int main ( ) { int testcases , i ; scanf ( "%d" , & testcases ) ; for ( i = 0 ; i < testcases ; i ++ ) { test ( ) ; } return 0 ; }