typedef struct queue { int f ; int r ; int capacity ; int size ; int * arr ; } q ; q * createqueue ( int c ) { q * Q = ( q * ) malloc ( sizeof ( q ) ) ; Q -> f = - 1 ; Q -> r = - 1 ; Q -> capacity = c ; Q -> size = 0 ; Q -> arr = ( int * ) malloc ( c * sizeof ( int ) ) ; return Q ; } void Enqueue ( q * Q , int data ) { if ( Q -> f == - 1 && Q -> r == - 1 ) { Q -> f = 0 ; Q -> r = 0 ; Q -> arr [ Q -> f ] = data ; } else { Q -> arr [ ++ Q -> r ] = data ; } Q -> size ++ ; } int Dequeue ( q * Q ) { return Q -> arr [ Q -> f ++ ] ; } int main ( ) { int t ; scanf ( "%d" , & t ) ; while ( t -- ) { q * Q = createqueue ( 1000 ) ; int n , i , j , max ; scanf ( "%d" , & n ) ; for ( i = 1 ; i <= n ; i ++ ) { int a [ i ] ; for ( j = 0 ; j < i ; j ++ ) scanf ( "%d" , & a [ j ] ) ; if ( i == 1 ) { Enqueue ( Q , a [ 0 ] ) ; max = a [ 0 ] ; } else { for ( j = 1 ; j <= i - 1 ; j ++ ) { Enqueue ( Q , Q -> arr [ Q -> f ] + a [ j - 1 ] ) ; } Dequeue ( Q ) ; } } for ( i = Q -> f ; i < Q -> r ; i ++ ) { if ( max < Q -> arr [ i ] ) max = Q -> arr [ i ] ; } printf ( "%d\n" , max ) ; } return 0 ; }