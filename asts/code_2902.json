{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 512,
  "text": "int main ( ) { int divident , minmultiple , t , divisor , remainder , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; divident = a ; divisor = b ; remainder = a % b ; while ( remainder != 0 ) { divident = divisor ; divisor = remainder ; remainder = divident % divisor ; } printf ( \"%d \" , divisor ) ; minmultiple = ( a > b ) ? a : b ; while ( 1 ) { if ( minmultiple % a == 0 && minmultiple % b == 0 ) { printf ( \"%d\\n\" , minmultiple ) ; break ; } minmultiple ++ ; } } return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 512,
      "text": "int main ( ) { int divident , minmultiple , t , divisor , remainder , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; divident = a ; divisor = b ; remainder = a % b ; while ( remainder != 0 ) { divident = divisor ; divisor = remainder ; remainder = divident % divisor ; } printf ( \"%d \" , divisor ) ; minmultiple = ( a > b ) ? a : b ; while ( 1 ) { if ( minmultiple % a == 0 && minmultiple % b == 0 ) { printf ( \"%d\\n\" , minmultiple ) ; break ; } minmultiple ++ ; } } return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 512,
          "text": "{ int divident , minmultiple , t , divisor , remainder , a , b ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; divident = a ; divisor = b ; remainder = a % b ; while ( remainder != 0 ) { divident = divisor ; divisor = remainder ; remainder = divident % divisor ; } printf ( \"%d \" , divisor ) ; minmultiple = ( a > b ) ? a : b ; while ( 1 ) { if ( minmultiple % a == 0 && minmultiple % b == 0 ) { printf ( \"%d\\n\" , minmultiple ) ; break ; } minmultiple ++ ; } } return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 77,
              "text": "int divident , minmultiple , t , divisor , remainder , a , b ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 15,
                  "end_byte": 18,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 19,
                  "end_byte": 27,
                  "text": "divident",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 28,
                  "end_byte": 29,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 30,
                  "end_byte": 41,
                  "text": "minmultiple",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 42,
                  "end_byte": 43,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 44,
                  "end_byte": 45,
                  "text": "t",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 46,
                  "end_byte": 47,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 48,
                  "end_byte": 55,
                  "text": "divisor",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 56,
                  "end_byte": 57,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 58,
                  "end_byte": 67,
                  "text": "remainder",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 68,
                  "end_byte": 69,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 70,
                  "end_byte": 71,
                  "text": "a",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 72,
                  "end_byte": 73,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 74,
                  "end_byte": 75,
                  "text": "b",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 76,
                  "end_byte": 77,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 78,
              "end_byte": 100,
              "text": "scanf ( \"%d\" , & t ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 78,
                  "end_byte": 98,
                  "text": "scanf ( \"%d\" , & t )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 78,
                      "end_byte": 83,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 84,
                      "end_byte": 98,
                      "text": "( \"%d\" , & t )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 84,
                          "end_byte": 85,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 86,
                          "end_byte": 90,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 86,
                              "end_byte": 87,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 87,
                              "end_byte": 89,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 89,
                              "end_byte": 90,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 91,
                          "end_byte": 92,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 93,
                          "end_byte": 96,
                          "text": "& t",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 93,
                              "end_byte": 94,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 95,
                              "end_byte": 96,
                              "text": "t",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 97,
                          "end_byte": 98,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 99,
                  "end_byte": 100,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 101,
              "end_byte": 499,
              "text": "while ( t -- ) { scanf ( \"%d %d\" , & a , & b ) ; divident = a ; divisor = b ; remainder = a % b ; while ( remainder != 0 ) { divident = divisor ; divisor = remainder ; remainder = divident % divisor ; } printf ( \"%d \" , divisor ) ; minmultiple = ( a > b ) ? a : b ; while ( 1 ) { if ( minmultiple % a == 0 && minmultiple % b == 0 ) { printf ( \"%d\\n\" , minmultiple ) ; break ; } minmultiple ++ ; } }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 101,
                  "end_byte": 106,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 107,
                  "end_byte": 115,
                  "text": "( t -- )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 107,
                      "end_byte": 108,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "update_expression",
                      "start_byte": 109,
                      "end_byte": 113,
                      "text": "t --",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 109,
                          "end_byte": 110,
                          "text": "t",
                          "children": []
                        },
                        {
                          "type": "--",
                          "start_byte": 111,
                          "end_byte": 113,
                          "text": "--",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 114,
                      "end_byte": 115,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 116,
                  "end_byte": 499,
                  "text": "{ scanf ( \"%d %d\" , & a , & b ) ; divident = a ; divisor = b ; remainder = a % b ; while ( remainder != 0 ) { divident = divisor ; divisor = remainder ; remainder = divident % divisor ; } printf ( \"%d \" , divisor ) ; minmultiple = ( a > b ) ? a : b ; while ( 1 ) { if ( minmultiple % a == 0 && minmultiple % b == 0 ) { printf ( \"%d\\n\" , minmultiple ) ; break ; } minmultiple ++ ; } }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 116,
                      "end_byte": 117,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 118,
                      "end_byte": 149,
                      "text": "scanf ( \"%d %d\" , & a , & b ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 118,
                          "end_byte": 147,
                          "text": "scanf ( \"%d %d\" , & a , & b )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 118,
                              "end_byte": 123,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 124,
                              "end_byte": 147,
                              "text": "( \"%d %d\" , & a , & b )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 124,
                                  "end_byte": 125,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 126,
                                  "end_byte": 133,
                                  "text": "\"%d %d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 126,
                                      "end_byte": 127,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 127,
                                      "end_byte": 132,
                                      "text": "%d %d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 132,
                                      "end_byte": 133,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 134,
                                  "end_byte": 135,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 136,
                                  "end_byte": 139,
                                  "text": "& a",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 136,
                                      "end_byte": 137,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 138,
                                      "end_byte": 139,
                                      "text": "a",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 140,
                                  "end_byte": 141,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 142,
                                  "end_byte": 145,
                                  "text": "& b",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 142,
                                      "end_byte": 143,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 144,
                                      "end_byte": 145,
                                      "text": "b",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 146,
                                  "end_byte": 147,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 148,
                          "end_byte": 149,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 150,
                      "end_byte": 164,
                      "text": "divident = a ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 150,
                          "end_byte": 162,
                          "text": "divident = a",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 150,
                              "end_byte": 158,
                              "text": "divident",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 159,
                              "end_byte": 160,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 161,
                              "end_byte": 162,
                              "text": "a",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 163,
                          "end_byte": 164,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 165,
                      "end_byte": 178,
                      "text": "divisor = b ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 165,
                          "end_byte": 176,
                          "text": "divisor = b",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 165,
                              "end_byte": 172,
                              "text": "divisor",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 173,
                              "end_byte": 174,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 175,
                              "end_byte": 176,
                              "text": "b",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 177,
                          "end_byte": 178,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 179,
                      "end_byte": 198,
                      "text": "remainder = a % b ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 179,
                          "end_byte": 196,
                          "text": "remainder = a % b",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 179,
                              "end_byte": 188,
                              "text": "remainder",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 189,
                              "end_byte": 190,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 191,
                              "end_byte": 196,
                              "text": "a % b",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 191,
                                  "end_byte": 192,
                                  "text": "a",
                                  "children": []
                                },
                                {
                                  "type": "%",
                                  "start_byte": 193,
                                  "end_byte": 194,
                                  "text": "%",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 195,
                                  "end_byte": 196,
                                  "text": "b",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 197,
                          "end_byte": 198,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "while_statement",
                      "start_byte": 199,
                      "end_byte": 303,
                      "text": "while ( remainder != 0 ) { divident = divisor ; divisor = remainder ; remainder = divident % divisor ; }",
                      "children": [
                        {
                          "type": "while",
                          "start_byte": 199,
                          "end_byte": 204,
                          "text": "while",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 205,
                          "end_byte": 223,
                          "text": "( remainder != 0 )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 205,
                              "end_byte": 206,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 207,
                              "end_byte": 221,
                              "text": "remainder != 0",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 207,
                                  "end_byte": 216,
                                  "text": "remainder",
                                  "children": []
                                },
                                {
                                  "type": "!=",
                                  "start_byte": 217,
                                  "end_byte": 219,
                                  "text": "!=",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "start_byte": 220,
                                  "end_byte": 221,
                                  "text": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 222,
                              "end_byte": 223,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 224,
                          "end_byte": 303,
                          "text": "{ divident = divisor ; divisor = remainder ; remainder = divident % divisor ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 224,
                              "end_byte": 225,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 226,
                              "end_byte": 246,
                              "text": "divident = divisor ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 226,
                                  "end_byte": 244,
                                  "text": "divident = divisor",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 226,
                                      "end_byte": 234,
                                      "text": "divident",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 235,
                                      "end_byte": 236,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 237,
                                      "end_byte": 244,
                                      "text": "divisor",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 245,
                                  "end_byte": 246,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 247,
                              "end_byte": 268,
                              "text": "divisor = remainder ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 247,
                                  "end_byte": 266,
                                  "text": "divisor = remainder",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 247,
                                      "end_byte": 254,
                                      "text": "divisor",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 255,
                                      "end_byte": 256,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 257,
                                      "end_byte": 266,
                                      "text": "remainder",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 267,
                                  "end_byte": 268,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 269,
                              "end_byte": 301,
                              "text": "remainder = divident % divisor ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 269,
                                  "end_byte": 299,
                                  "text": "remainder = divident % divisor",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 269,
                                      "end_byte": 278,
                                      "text": "remainder",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 279,
                                      "end_byte": 280,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 281,
                                      "end_byte": 299,
                                      "text": "divident % divisor",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 281,
                                          "end_byte": 289,
                                          "text": "divident",
                                          "children": []
                                        },
                                        {
                                          "type": "%",
                                          "start_byte": 290,
                                          "end_byte": 291,
                                          "text": "%",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 292,
                                          "end_byte": 299,
                                          "text": "divisor",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 300,
                                  "end_byte": 301,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 302,
                              "end_byte": 303,
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 304,
                      "end_byte": 332,
                      "text": "printf ( \"%d \" , divisor ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 304,
                          "end_byte": 330,
                          "text": "printf ( \"%d \" , divisor )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 304,
                              "end_byte": 310,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 311,
                              "end_byte": 330,
                              "text": "( \"%d \" , divisor )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 311,
                                  "end_byte": 312,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 313,
                                  "end_byte": 318,
                                  "text": "\"%d \"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 313,
                                      "end_byte": 314,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 314,
                                      "end_byte": 317,
                                      "text": "%d ",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 317,
                                      "end_byte": 318,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 319,
                                  "end_byte": 320,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 321,
                                  "end_byte": 328,
                                  "text": "divisor",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 329,
                                  "end_byte": 330,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 331,
                          "end_byte": 332,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 333,
                      "end_byte": 366,
                      "text": "minmultiple = ( a > b ) ? a : b ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 333,
                          "end_byte": 364,
                          "text": "minmultiple = ( a > b ) ? a : b",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 333,
                              "end_byte": 344,
                              "text": "minmultiple",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 345,
                              "end_byte": 346,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "conditional_expression",
                              "start_byte": 347,
                              "end_byte": 364,
                              "text": "( a > b ) ? a : b",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "start_byte": 347,
                                  "end_byte": 356,
                                  "text": "( a > b )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 347,
                                      "end_byte": 348,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 349,
                                      "end_byte": 354,
                                      "text": "a > b",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 349,
                                          "end_byte": 350,
                                          "text": "a",
                                          "children": []
                                        },
                                        {
                                          "type": ">",
                                          "start_byte": 351,
                                          "end_byte": 352,
                                          "text": ">",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 353,
                                          "end_byte": 354,
                                          "text": "b",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 355,
                                      "end_byte": 356,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "?",
                                  "start_byte": 357,
                                  "end_byte": 358,
                                  "text": "?",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 359,
                                  "end_byte": 360,
                                  "text": "a",
                                  "children": []
                                },
                                {
                                  "type": ":",
                                  "start_byte": 361,
                                  "end_byte": 362,
                                  "text": ":",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 363,
                                  "end_byte": 364,
                                  "text": "b",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 365,
                          "end_byte": 366,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "while_statement",
                      "start_byte": 367,
                      "end_byte": 497,
                      "text": "while ( 1 ) { if ( minmultiple % a == 0 && minmultiple % b == 0 ) { printf ( \"%d\\n\" , minmultiple ) ; break ; } minmultiple ++ ; }",
                      "children": [
                        {
                          "type": "while",
                          "start_byte": 367,
                          "end_byte": 372,
                          "text": "while",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 373,
                          "end_byte": 378,
                          "text": "( 1 )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 373,
                              "end_byte": 374,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "start_byte": 375,
                              "end_byte": 376,
                              "text": "1",
                              "children": []
                            },
                            {
                              "type": ")",
                              "start_byte": 377,
                              "end_byte": 378,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 379,
                          "end_byte": 497,
                          "text": "{ if ( minmultiple % a == 0 && minmultiple % b == 0 ) { printf ( \"%d\\n\" , minmultiple ) ; break ; } minmultiple ++ ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 379,
                              "end_byte": 380,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "if_statement",
                              "start_byte": 381,
                              "end_byte": 478,
                              "text": "if ( minmultiple % a == 0 && minmultiple % b == 0 ) { printf ( \"%d\\n\" , minmultiple ) ; break ; }",
                              "children": [
                                {
                                  "type": "if",
                                  "start_byte": 381,
                                  "end_byte": 383,
                                  "text": "if",
                                  "children": []
                                },
                                {
                                  "type": "condition_clause",
                                  "start_byte": 384,
                                  "end_byte": 432,
                                  "text": "( minmultiple % a == 0 && minmultiple % b == 0 )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 384,
                                      "end_byte": 385,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 386,
                                      "end_byte": 430,
                                      "text": "minmultiple % a == 0 && minmultiple % b == 0",
                                      "children": [
                                        {
                                          "type": "binary_expression",
                                          "start_byte": 386,
                                          "end_byte": 406,
                                          "text": "minmultiple % a == 0",
                                          "children": [
                                            {
                                              "type": "binary_expression",
                                              "start_byte": 386,
                                              "end_byte": 401,
                                              "text": "minmultiple % a",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 386,
                                                  "end_byte": 397,
                                                  "text": "minmultiple",
                                                  "children": []
                                                },
                                                {
                                                  "type": "%",
                                                  "start_byte": 398,
                                                  "end_byte": 399,
                                                  "text": "%",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 400,
                                                  "end_byte": 401,
                                                  "text": "a",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "==",
                                              "start_byte": 402,
                                              "end_byte": 404,
                                              "text": "==",
                                              "children": []
                                            },
                                            {
                                              "type": "number_literal",
                                              "start_byte": 405,
                                              "end_byte": 406,
                                              "text": "0",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "&&",
                                          "start_byte": 407,
                                          "end_byte": 409,
                                          "text": "&&",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_expression",
                                          "start_byte": 410,
                                          "end_byte": 430,
                                          "text": "minmultiple % b == 0",
                                          "children": [
                                            {
                                              "type": "binary_expression",
                                              "start_byte": 410,
                                              "end_byte": 425,
                                              "text": "minmultiple % b",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 410,
                                                  "end_byte": 421,
                                                  "text": "minmultiple",
                                                  "children": []
                                                },
                                                {
                                                  "type": "%",
                                                  "start_byte": 422,
                                                  "end_byte": 423,
                                                  "text": "%",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 424,
                                                  "end_byte": 425,
                                                  "text": "b",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "==",
                                              "start_byte": 426,
                                              "end_byte": 428,
                                              "text": "==",
                                              "children": []
                                            },
                                            {
                                              "type": "number_literal",
                                              "start_byte": 429,
                                              "end_byte": 430,
                                              "text": "0",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 431,
                                      "end_byte": 432,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "compound_statement",
                                  "start_byte": 433,
                                  "end_byte": 478,
                                  "text": "{ printf ( \"%d\\n\" , minmultiple ) ; break ; }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "start_byte": 433,
                                      "end_byte": 434,
                                      "text": "{",
                                      "children": []
                                    },
                                    {
                                      "type": "expression_statement",
                                      "start_byte": 435,
                                      "end_byte": 468,
                                      "text": "printf ( \"%d\\n\" , minmultiple ) ;",
                                      "children": [
                                        {
                                          "type": "call_expression",
                                          "start_byte": 435,
                                          "end_byte": 466,
                                          "text": "printf ( \"%d\\n\" , minmultiple )",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 435,
                                              "end_byte": 441,
                                              "text": "printf",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "start_byte": 442,
                                              "end_byte": 466,
                                              "text": "( \"%d\\n\" , minmultiple )",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start_byte": 442,
                                                  "end_byte": 443,
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "string_literal",
                                                  "start_byte": 444,
                                                  "end_byte": 450,
                                                  "text": "\"%d\\n\"",
                                                  "children": [
                                                    {
                                                      "type": "\"",
                                                      "start_byte": 444,
                                                      "end_byte": 445,
                                                      "text": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "string_content",
                                                      "start_byte": 445,
                                                      "end_byte": 447,
                                                      "text": "%d",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "escape_sequence",
                                                      "start_byte": 447,
                                                      "end_byte": 449,
                                                      "text": "\\n",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "\"",
                                                      "start_byte": 449,
                                                      "end_byte": 450,
                                                      "text": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "start_byte": 451,
                                                  "end_byte": 452,
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 453,
                                                  "end_byte": 464,
                                                  "text": "minmultiple",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "start_byte": 465,
                                                  "end_byte": 466,
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "start_byte": 467,
                                          "end_byte": 468,
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "break_statement",
                                      "start_byte": 469,
                                      "end_byte": 476,
                                      "text": "break ;",
                                      "children": [
                                        {
                                          "type": "break",
                                          "start_byte": 469,
                                          "end_byte": 474,
                                          "text": "break",
                                          "children": []
                                        },
                                        {
                                          "type": ";",
                                          "start_byte": 475,
                                          "end_byte": 476,
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "start_byte": 477,
                                      "end_byte": 478,
                                      "text": "}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 479,
                              "end_byte": 495,
                              "text": "minmultiple ++ ;",
                              "children": [
                                {
                                  "type": "update_expression",
                                  "start_byte": 479,
                                  "end_byte": 493,
                                  "text": "minmultiple ++",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 479,
                                      "end_byte": 490,
                                      "text": "minmultiple",
                                      "children": []
                                    },
                                    {
                                      "type": "++",
                                      "start_byte": 491,
                                      "end_byte": 493,
                                      "text": "++",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 494,
                                  "end_byte": 495,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 496,
                              "end_byte": 497,
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 498,
                      "end_byte": 499,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 500,
              "end_byte": 510,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 500,
                  "end_byte": 506,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 507,
                  "end_byte": 508,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 509,
                  "end_byte": 510,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 511,
              "end_byte": 512,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}