int find_max ( int * * input , int size ) { int i , j , k ; int * output [ size ] ; for ( i = 0 ; i < size ; i ++ ) { output [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 ) output [ i ] [ j ] = input [ i ] [ j ] ; else { if ( j == 0 ) output [ i ] [ j ] = output [ i - 1 ] [ j ] + input [ i ] [ j ] ; else if ( i == j ) output [ i ] [ j ] = output [ i - 1 ] [ j - 1 ] + input [ i ] [ j ] ; else { if ( output [ i - 1 ] [ j - 1 ] > output [ i - 1 ] [ j ] ) output [ i ] [ j ] = output [ i - 1 ] [ j - 1 ] + input [ i ] [ j ] ; else output [ i ] [ j ] = output [ i - 1 ] [ j ] + input [ i ] [ j ] ; } } } } int max = output [ size - 1 ] [ 0 ] ; for ( i = 1 ; i < size ; i ++ ) { if ( output [ size - 1 ] [ i ] > max ) max = output [ size - 1 ] [ i ] ; } return max ; } int main ( ) { int n ; scanf ( "%d" , & n ) ; int output [ n ] ; int i , j , k , size ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & size ) ; int * input [ size ] ; for ( j = 0 ; j < size ; j ++ ) { input [ j ] = ( int * ) malloc ( ( j + 1 ) * sizeof ( int ) ) ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( "%d" , & input [ j ] [ k ] ) ; } } output [ i ] = find_max ( input , size ) ; } for ( i = 0 ; i < n ; i ++ ) printf ( "%d\n" , output [ i ] ) ; }