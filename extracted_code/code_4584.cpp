void swap ( long * a , long * b ) { long long temp = * a ; * a = * b ; * b = temp ; } long partition ( long arr [ ] , long low , long high ) { long pivot = arr [ high ] ; long i = ( low - 1 ) ; long j = 0 ; for ( j = low ; j <= high - 1 ; j ++ ) { if ( arr [ j ] <= pivot ) { i ++ ; swap ( & arr [ i ] , & arr [ j ] ) ; } } swap ( & arr [ i + 1 ] , & arr [ high ] ) ; return ( i + 1 ) ; } void quicksort ( long arr [ ] , long low , long high ) { if ( low < high ) { long p = partition ( arr , low , high ) ; quicksort ( arr , low , p - 1 ) ; quicksort ( arr , p + 1 , high ) ; } } int check ( long a [ ] , long t ) { int i ; for ( i = 0 ; i < t - 1 ; i ++ ) { if ( a [ i ] > a [ i + 1 ] ) return 0 ; } return 1 ; } int map ( long a [ ] , long t ) { int i ; for ( i = 0 ; i < t - 1 ; i ++ ) { if ( a [ i ] < a [ i + 1 ] ) return 0 ; } return 1 ; } int main ( ) { int n , t , j , i , k ; int x , y ; scanf ( "%d" , & t ) ; long arr [ 100009 ] , b [ 100009 ] ; for ( i = 0 ; i < t ; i ++ ) { b [ i ] = 0 ; scanf ( "%d" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( "%ld" , & arr [ j ] ) ; x = check ( arr , n ) ; y = map ( arr , n ) ; if ( x == 0 && y == 0 ) quicksort ( arr , 0 , n - 1 ) ; else if ( y == 1 ) { for ( k = 0 ; k < n / 2 ; k ++ ) swap ( & arr [ k ] , & arr [ n - k - 1 ] ) ; } else ; b [ i ] = arr [ 0 ] * ( n - 1 ) ; } for ( i = 0 ; i < t ; i ++ ) printf ( "%ld\n" , b [ i ] ) ; return 0 ; }