int sumrecur ( int * a , int row , int pos , int * cache ) ; int n ; int main ( ) { int t , i ; scanf ( "%d" , & t ) ; while ( t -- ) { scanf ( "%d" , & n ) ; int a [ ( n * ( n + 1 ) ) / 2 ] ; int cache [ ( n * ( n + 1 ) ) / 2 ] ; for ( i = 0 ; i < n * ( n + 1 ) / 2 ; i ++ ) cache [ i ] = 0 ; for ( i = 0 ; i < n * ( n + 1 ) / 2 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } printf ( "%d" , sumrecur ( a , 0 , 0 , cache ) ) ; } return 0 ; } int sumrecur ( int * a , int row , int pos , int * cache ) { int one , two ; if ( row == n - 1 ) return ( a [ pos ] ) ; else { if ( cache [ pos ] ) return cache [ pos ] ; else { one = sumrecur ( a , row + 1 , pos + row + 1 , cache ) ; two = sumrecur ( a , row + 1 , pos + row + 2 , cache ) ; cache [ pos ] = a [ pos ] + ( ( one > two ) ? one : two ) ; return cache [ pos ] ; } } }