void createsolution ( long * sol , long curindex , long currow , long * n ) { sol [ 0 ] = curindex ; if ( ( curindex + 1 ) <= currow ) { sol [ 1 ] = curindex + 1 ; * n = 2 ; return ; } * n = 1 ; return ; } void helper ( long * * triangle , long rows , long currow , long curindex , long cursum , long * sum ) { if ( rows == currow ) { if ( cursum > * sum ) * sum = cursum ; return ; } else { long sol [ 70 ] , n , i , s ; createsolution ( sol , curindex , currow , & n ) ; for ( i = 0 ; i < n ; i ++ ) { cursum += triangle [ currow ] [ sol [ i ] ] ; helper ( triangle , rows , currow + 1 , sol [ i ] , cursum , sum ) ; cursum -= triangle [ currow ] [ sol [ i ] ] ; } } } long process ( long * * triangle , long rows ) { long sum = - 999999 ; helper ( triangle , rows , 0 , 0 , 0 , & sum ) ; return sum ; } int main ( ) { long testcases , rows , * * triangle , i , j , k , result ; scanf ( "%ld" , & testcases ) ; for ( k = 0 ; k < testcases ; k ++ ) { scanf ( "%ld" , & rows ) ; triangle = ( long * * ) malloc ( rows * sizeof ( long * ) ) ; for ( i = 0 ; i < rows ; i ++ ) { triangle [ i ] = ( long * ) malloc ( ( i + 1 ) * sizeof ( long ) ) ; for ( j = 0 ; j < ( i + 1 ) ; j ++ ) scanf ( "%ld" , & triangle [ i ] [ j ] ) ; } result = process ( triangle , rows ) ; printf ( "%ld\n" , result ) ; for ( i = 0 ; i < rows ; i ++ ) { free ( triangle [ i ] ) ; triangle [ i ] = NULL ; } free ( triangle ) ; } return 0 ; }