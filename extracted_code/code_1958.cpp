int glob = 0 ; int max1 ( int a , int b ) { return ( a > b ? a : b ) ; } int main ( ) { int num = 0 ; int i = 0 ; char * * str1 ; char buf [ 1024 ] ; char buf1 [ 1024 ] ; int len1 = 0 ; scanf ( "%d" , & num ) ; str1 = ( char * * ) malloc ( num * sizeof ( char * ) ) ; for ( i = 0 ; i < num ; i ++ ) { int row = 0 ; int j = 0 ; int * arr = NULL ; int * max = NULL ; int lum = 0 ; int count = 0 ; char * str = ( char * ) malloc ( 1024 ) ; scanf ( "%d" , & row ) ; j = ( ( row ) * ( row + 1 ) ) / 2 ; arr = ( int * ) malloc ( j * sizeof ( int ) ) ; max = ( int * ) malloc ( j * sizeof ( int ) ) ; getline ( & str , & j , stdin ) ; for ( j = 0 ; j < row ; j ++ ) { int k = 0 ; char * tmp , * tmp1 ; int lum = 0 ; int byte_read = getline ( & str , & k , stdin ) ; int len = strlen ( str ) ; str [ len ] = '\0' ; lum = j + 1 ; tmp = str ; tmp1 = str ; do { tmp = strchr ( tmp1 , ' ' ) ; if ( tmp ) { tmp [ 0 ] = '\0' ; } arr [ count ++ ] = atoi ( tmp1 ) ; tmp1 = tmp + 1 ; lum -- ; } while ( lum ) ; } count = 0 ; glob = 0 ; for ( j = row ; j >= 1 ; j -- ) { int k = 0 ; int fib = ( ( j - 1 ) * j ) / 2 ; int nxt = ( j * ( j + 1 ) ) / 2 ; for ( k = 0 ; k < row ; k ++ ) { if ( j == row ) { max [ fib + k ] = arr [ fib + k ] ; } else { max [ fib + k ] = arr [ fib + k ] + max1 ( max [ nxt + k ] , max [ nxt + k + 1 ] ) ; } } } sprintf ( buf1 , "%d" , max [ 0 ] ) ; len1 = strlen ( buf1 ) + 1 ; str1 [ i ] = ( char * ) malloc ( len1 ) ; strcpy ( str1 [ i ] , buf1 ) ; free ( max ) ; free ( arr ) ; free ( str ) ; } for ( i = 0 ; i < num ; i ++ ) { printf ( "%s\n" , str1 [ i ] ) ; free ( str1 [ i ] ) ; } free ( str1 ) ; return 0 ; }