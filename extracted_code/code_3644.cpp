void quick ( int a [ ] , int start , int end ) { int p , i ; if ( start < end ) { p = partition ( a , start , end ) ; quick ( a , start , p - 1 ) ; quick ( a , p + 1 , end ) ; } } int partition ( int a [ ] , int start , int end ) { int pivot , p , t , k , i ; pivot = a [ end ] ; p = start ; for ( i = start ; i <= end - 1 ; i ++ ) { if ( a [ i ] <= pivot ) { t = a [ i ] ; a [ i ] = a [ p ] ; a [ p ] = t ; p = p + 1 ; } } k = a [ p ] ; a [ p ] = a [ end ] ; a [ end ] = k ; return p ; } int main ( ) { int t ; scanf ( "%d" , & t ) ; while ( t -- ) { int n ; scanf ( "%d" , & n ) ; int a [ n ] , i ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; quick ( a , 0 , n - 1 ) ; for ( i = 1 ; i < n ; i ++ ) { if ( a [ 0 ] != a [ i ] ) break ; } printf ( "%d\n" , a [ 0 ] * ( n - i ) ) ; } return 0 ; }