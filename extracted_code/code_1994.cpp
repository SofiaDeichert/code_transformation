int arr [ 100 ] [ 100 ] ; int tri ( int h , int i , int j ) { if ( h == 2 ) return arr [ i ] [ j ] + ( ( arr [ i + 1 ] [ j ] > arr [ i + 1 ] [ j + 1 ] ) ? arr [ i + 1 ] [ j ] : arr [ i + 1 ] [ j + 1 ] ) ; else { int m , n = 0 , max , k , hori , tria , l , max2 ; m = tri ( h - 1 , i + 1 , j + 1 ) ; for ( k = 1 ; k < h ; k ++ ) n += arr [ i + k ] [ j ] ; max = 0 ; for ( k = 0 ; k < h - 2 ; k ++ ) { hori = 0 ; for ( l = 0 ; l <= k ; l ++ ) hori += arr [ i + l + 1 ] [ j ] ; if ( h - 2 - k == 1 ) tria = arr [ i + 2 + k ] [ j + 1 ] ; else tria = tri ( h - 2 - k , i + 2 + k , j + 1 ) ; if ( max < hori + tria ) max = hori + tria ; } max2 = m ; if ( n > max2 ) max2 = n ; if ( max > max2 ) max2 = max ; return arr [ i ] [ j ] + max2 ; } } int main ( ) { int i , j , k , t , h , res ; scanf ( "%d\n" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( "%d" , & h ) ; for ( j = 0 ; j < h ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) scanf ( "%d" , & arr [ j ] [ k ] ) ; } res = tri ( h , 0 , 0 ) ; printf ( "%d\n" , res ) ; } return 0 ; }