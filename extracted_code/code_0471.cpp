typedef enum { false = 0 , true = 1 } tBOOL ; typedef struct { int * pTheArray ; } tTheArray ; static tBOOL getInput ( tTheArray * * ppTheRow , int numberOfRows ) ; static int calcucateMaxSumChain ( tTheArray * pTheRow , int numberOfRows ) ; int main ( ) { tTheArray * pTheRow = NULL ; tBOOL bValidInput = false ; int numberOfRows = 0 ; int MaxSum = 0 ; scanf ( "%d" , & numberOfRows ) ; bValidInput = getInput ( & pTheRow , numberOfRows ) ; if ( bValidInput ) { MaxSum = calcucateMaxSumChain ( pTheRow , numberOfRows ) ; printf ( "%d" , MaxSum ) ; } return MaxSum ; } static tBOOL getInput ( tTheArray * * ppTheRow , int numberOfRows ) { int i , j ; tBOOL bValid = true ; tTheArray * pTheRow = NULL ; if ( numberOfRows > MAX_SIZE_OF_ARRAY ) { bValid = false ; } else { pTheRow = malloc ( sizeof ( tTheArray ) * numberOfRows ) ; for ( i = 0 ; i < numberOfRows ; i ++ ) { int numOfIntInRow = i + 1 ; pTheRow [ i ] . pTheArray = malloc ( sizeof ( int ) * numOfIntInRow ) ; for ( j = 0 ; j < numOfIntInRow ; j ++ ) { int temp = 0 ; scanf ( "%d" , & temp ) ; if ( temp < 100 ) { pTheRow [ i ] . pTheArray [ j ] = temp ; } else { pTheRow [ i ] . pTheArray [ j ] = 99 ; } } } } if ( bValid ) { * ppTheRow = pTheRow ; } return bValid ; } static int calcucateMaxSumChain ( tTheArray * pTheRow , int numberOfRows ) { int i , chainIdx ; int MaxSum = 0 ; for ( i = 0 ; i < numberOfRows ; i ++ ) { if ( i == 0 ) { chainIdx = 0 ; MaxSum = pTheRow [ i ] . pTheArray [ chainIdx ] ; } else { if ( pTheRow [ i ] . pTheArray [ chainIdx ] < pTheRow [ i ] . pTheArray [ chainIdx + 1 ] ) { chainIdx ++ ; } MaxSum += pTheRow [ i ] . pTheArray [ chainIdx ] ; } } return MaxSum ; }