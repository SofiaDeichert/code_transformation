void merge ( int * a , int p , int q , int r ) { int n1 = q - p + 1 ; int n2 = r - q ; int * lt = ( int * ) malloc ( ( n1 + 1 ) * sizeof ( int ) ) ; int * rt = ( int * ) malloc ( ( n2 + 1 ) * sizeof ( int ) ) ; int i = 0 , j = 0 , k = p ; for ( i = 0 ; i < n1 ; i ++ ) { lt [ i ] = a [ p + i ] ; } for ( i = 0 ; i < n2 ; i ++ ) { rt [ i ] = a [ q + i + 1 ] ; } i = 0 ; lt [ n1 ] = INT_MAX ; rt [ n2 ] = INT_MAX ; while ( k <= r ) { if ( lt [ i ] <= rt [ j ] ) { a [ k ] = lt [ i ] ; i ++ ; } else { a [ k ] = rt [ j ] ; j ++ ; } k ++ ; } free ( lt ) ; free ( rt ) ; } void mergesort ( int * a , int p , int r ) { if ( p < r ) { int q = ( p + r ) / 2 ; mergesort ( a , p , q ) ; mergesort ( a , q + 1 , r ) ; merge ( a , p , q , r ) ; } } int main ( ) { int t = 0 ; scanf ( "%d" , & t ) ; while ( t -- ) { int n = 0 , i = 0 ; scanf ( "%d" , & n ) ; int * arr = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & arr [ i ] ) ; mergesort ( arr , 0 , n - 1 ) ; printf ( "%llu\n" , arr [ 0 ] * ( n - 1 ) ) ; free ( arr ) ; } return 0 ; }