void pathmax ( int * p , int * q , int i ) ; int max ( int a , int b ) ; int main ( ) { int n , r , i , m [ 1000 ] , j , k = 0 ; int * p , * q ; scanf ( "%d" , & n ) ; if ( n > nmax ) return 0 ; while ( k < n ) { scanf ( "%d" , & r ) ; if ( r < 0 && r > rmax ) return 0 ; q = malloc ( r * sizeof ( int ) ) ; for ( i = 0 ; i < r ; i ++ ) { p = malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d " , & p [ j ] ) ; if ( p [ j ] < 0 && p [ j ] > 100 ) return 0 ; } pathmax ( p , q , i ) ; free ( p ) ; } m [ k ] = 0 ; for ( j = 0 ; j < r ; j ++ ) { if ( m [ k ] < q [ j ] ) m [ k ] = q [ j ] ; } free ( q ) ; k ++ ; } for ( k = 0 ; k < n ; k ++ ) printf ( "%d\n" , m [ k ] ) ; return 0 ; } void pathmax ( int * p , int * q , int i ) { int j ; if ( i > 0 ) { p [ 0 ] += q [ 0 ] ; q [ i ] = 0 ; for ( j = 1 ; j <= i ; j ++ ) p [ j ] = max ( q [ j - 1 ] , q [ j ] ) + p [ j ] ; } for ( j = 0 ; j <= i ; j ++ ) q [ j ] = p [ j ] ; } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }