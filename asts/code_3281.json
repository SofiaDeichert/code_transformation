{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 289,
  "text": "int main ( ) { int t , num1 , num2 , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; x = num1 , y = num2 ; while ( num1 != num2 ) { if ( num1 > num2 ) num1 -= num2 ; else num2 -= num1 ; } printf ( \"%d\" , num1 ) ; printf ( \" %d\\n\" , x * y / num1 ) ; } }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 289,
      "text": "int main ( ) { int t , num1 , num2 , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; x = num1 , y = num2 ; while ( num1 != num2 ) { if ( num1 > num2 ) num1 -= num2 ; else num2 -= num1 ; } printf ( \"%d\" , num1 ) ; printf ( \" %d\\n\" , x * y / num1 ) ; } }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 289,
          "text": "{ int t , num1 , num2 , x , y ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; x = num1 , y = num2 ; while ( num1 != num2 ) { if ( num1 > num2 ) num1 -= num2 ; else num2 -= num1 ; } printf ( \"%d\" , num1 ) ; printf ( \" %d\\n\" , x * y / num1 ) ; } }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 44,
              "text": "int t , num1 , num2 , x , y ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 15,
                  "end_byte": 18,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 19,
                  "end_byte": 20,
                  "text": "t",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 21,
                  "end_byte": 22,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 23,
                  "end_byte": 27,
                  "text": "num1",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 28,
                  "end_byte": 29,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 30,
                  "end_byte": 34,
                  "text": "num2",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 35,
                  "end_byte": 36,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 37,
                  "end_byte": 38,
                  "text": "x",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 39,
                  "end_byte": 40,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 41,
                  "end_byte": 42,
                  "text": "y",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 43,
                  "end_byte": 44,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 45,
              "end_byte": 67,
              "text": "scanf ( \"%d\" , & t ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 45,
                  "end_byte": 65,
                  "text": "scanf ( \"%d\" , & t )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 45,
                      "end_byte": 50,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 51,
                      "end_byte": 65,
                      "text": "( \"%d\" , & t )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 51,
                          "end_byte": 52,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 53,
                          "end_byte": 57,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 53,
                              "end_byte": 54,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 54,
                              "end_byte": 56,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 56,
                              "end_byte": 57,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 58,
                          "end_byte": 59,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 60,
                          "end_byte": 63,
                          "text": "& t",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 60,
                              "end_byte": 61,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 62,
                              "end_byte": 63,
                              "text": "t",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 64,
                          "end_byte": 65,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 66,
                  "end_byte": 67,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 68,
              "end_byte": 287,
              "text": "while ( t -- ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; x = num1 , y = num2 ; while ( num1 != num2 ) { if ( num1 > num2 ) num1 -= num2 ; else num2 -= num1 ; } printf ( \"%d\" , num1 ) ; printf ( \" %d\\n\" , x * y / num1 ) ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 68,
                  "end_byte": 73,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 74,
                  "end_byte": 82,
                  "text": "( t -- )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 74,
                      "end_byte": 75,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "update_expression",
                      "start_byte": 76,
                      "end_byte": 80,
                      "text": "t --",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 76,
                          "end_byte": 77,
                          "text": "t",
                          "children": []
                        },
                        {
                          "type": "--",
                          "start_byte": 78,
                          "end_byte": 80,
                          "text": "--",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 81,
                      "end_byte": 82,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 83,
                  "end_byte": 287,
                  "text": "{ scanf ( \"%d%d\" , & num1 , & num2 ) ; x = num1 , y = num2 ; while ( num1 != num2 ) { if ( num1 > num2 ) num1 -= num2 ; else num2 -= num1 ; } printf ( \"%d\" , num1 ) ; printf ( \" %d\\n\" , x * y / num1 ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 83,
                      "end_byte": 84,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 85,
                      "end_byte": 121,
                      "text": "scanf ( \"%d%d\" , & num1 , & num2 ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 85,
                          "end_byte": 119,
                          "text": "scanf ( \"%d%d\" , & num1 , & num2 )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 85,
                              "end_byte": 90,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 91,
                              "end_byte": 119,
                              "text": "( \"%d%d\" , & num1 , & num2 )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 91,
                                  "end_byte": 92,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 93,
                                  "end_byte": 99,
                                  "text": "\"%d%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 93,
                                      "end_byte": 94,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 94,
                                      "end_byte": 98,
                                      "text": "%d%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 98,
                                      "end_byte": 99,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 100,
                                  "end_byte": 101,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 102,
                                  "end_byte": 108,
                                  "text": "& num1",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 102,
                                      "end_byte": 103,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 104,
                                      "end_byte": 108,
                                      "text": "num1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 109,
                                  "end_byte": 110,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 111,
                                  "end_byte": 117,
                                  "text": "& num2",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 111,
                                      "end_byte": 112,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 113,
                                      "end_byte": 117,
                                      "text": "num2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 118,
                                  "end_byte": 119,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 120,
                          "end_byte": 121,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 122,
                      "end_byte": 143,
                      "text": "x = num1 , y = num2 ;",
                      "children": [
                        {
                          "type": "comma_expression",
                          "start_byte": 122,
                          "end_byte": 141,
                          "text": "x = num1 , y = num2",
                          "children": [
                            {
                              "type": "assignment_expression",
                              "start_byte": 122,
                              "end_byte": 130,
                              "text": "x = num1",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 122,
                                  "end_byte": 123,
                                  "text": "x",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "start_byte": 124,
                                  "end_byte": 125,
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 126,
                                  "end_byte": 130,
                                  "text": "num1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ",",
                              "start_byte": 131,
                              "end_byte": 132,
                              "text": ",",
                              "children": []
                            },
                            {
                              "type": "assignment_expression",
                              "start_byte": 133,
                              "end_byte": 141,
                              "text": "y = num2",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 133,
                                  "end_byte": 134,
                                  "text": "y",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "start_byte": 135,
                                  "end_byte": 136,
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 137,
                                  "end_byte": 141,
                                  "text": "num2",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 142,
                          "end_byte": 143,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "while_statement",
                      "start_byte": 144,
                      "end_byte": 224,
                      "text": "while ( num1 != num2 ) { if ( num1 > num2 ) num1 -= num2 ; else num2 -= num1 ; }",
                      "children": [
                        {
                          "type": "while",
                          "start_byte": 144,
                          "end_byte": 149,
                          "text": "while",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 150,
                          "end_byte": 166,
                          "text": "( num1 != num2 )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 150,
                              "end_byte": 151,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 152,
                              "end_byte": 164,
                              "text": "num1 != num2",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 152,
                                  "end_byte": 156,
                                  "text": "num1",
                                  "children": []
                                },
                                {
                                  "type": "!=",
                                  "start_byte": 157,
                                  "end_byte": 159,
                                  "text": "!=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 160,
                                  "end_byte": 164,
                                  "text": "num2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 165,
                              "end_byte": 166,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 167,
                          "end_byte": 224,
                          "text": "{ if ( num1 > num2 ) num1 -= num2 ; else num2 -= num1 ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 167,
                              "end_byte": 168,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "if_statement",
                              "start_byte": 169,
                              "end_byte": 222,
                              "text": "if ( num1 > num2 ) num1 -= num2 ; else num2 -= num1 ;",
                              "children": [
                                {
                                  "type": "if",
                                  "start_byte": 169,
                                  "end_byte": 171,
                                  "text": "if",
                                  "children": []
                                },
                                {
                                  "type": "condition_clause",
                                  "start_byte": 172,
                                  "end_byte": 187,
                                  "text": "( num1 > num2 )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 172,
                                      "end_byte": 173,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 174,
                                      "end_byte": 185,
                                      "text": "num1 > num2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 174,
                                          "end_byte": 178,
                                          "text": "num1",
                                          "children": []
                                        },
                                        {
                                          "type": ">",
                                          "start_byte": 179,
                                          "end_byte": 180,
                                          "text": ">",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 181,
                                          "end_byte": 185,
                                          "text": "num2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 186,
                                      "end_byte": 187,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "start_byte": 188,
                                  "end_byte": 202,
                                  "text": "num1 -= num2 ;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "start_byte": 188,
                                      "end_byte": 200,
                                      "text": "num1 -= num2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 188,
                                          "end_byte": 192,
                                          "text": "num1",
                                          "children": []
                                        },
                                        {
                                          "type": "-=",
                                          "start_byte": 193,
                                          "end_byte": 195,
                                          "text": "-=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 196,
                                          "end_byte": 200,
                                          "text": "num2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "start_byte": 201,
                                      "end_byte": 202,
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "else_clause",
                                  "start_byte": 203,
                                  "end_byte": 222,
                                  "text": "else num2 -= num1 ;",
                                  "children": [
                                    {
                                      "type": "else",
                                      "start_byte": 203,
                                      "end_byte": 207,
                                      "text": "else",
                                      "children": []
                                    },
                                    {
                                      "type": "expression_statement",
                                      "start_byte": 208,
                                      "end_byte": 222,
                                      "text": "num2 -= num1 ;",
                                      "children": [
                                        {
                                          "type": "assignment_expression",
                                          "start_byte": 208,
                                          "end_byte": 220,
                                          "text": "num2 -= num1",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 208,
                                              "end_byte": 212,
                                              "text": "num2",
                                              "children": []
                                            },
                                            {
                                              "type": "-=",
                                              "start_byte": 213,
                                              "end_byte": 215,
                                              "text": "-=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "start_byte": 216,
                                              "end_byte": 220,
                                              "text": "num1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "start_byte": 221,
                                          "end_byte": 222,
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 223,
                              "end_byte": 224,
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 225,
                      "end_byte": 249,
                      "text": "printf ( \"%d\" , num1 ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 225,
                          "end_byte": 247,
                          "text": "printf ( \"%d\" , num1 )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 225,
                              "end_byte": 231,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 232,
                              "end_byte": 247,
                              "text": "( \"%d\" , num1 )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 232,
                                  "end_byte": 233,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 234,
                                  "end_byte": 238,
                                  "text": "\"%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 234,
                                      "end_byte": 235,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 235,
                                      "end_byte": 237,
                                      "text": "%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 237,
                                      "end_byte": 238,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 239,
                                  "end_byte": 240,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 241,
                                  "end_byte": 245,
                                  "text": "num1",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 246,
                                  "end_byte": 247,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 248,
                          "end_byte": 249,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 250,
                      "end_byte": 285,
                      "text": "printf ( \" %d\\n\" , x * y / num1 ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 250,
                          "end_byte": 283,
                          "text": "printf ( \" %d\\n\" , x * y / num1 )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 250,
                              "end_byte": 256,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 257,
                              "end_byte": 283,
                              "text": "( \" %d\\n\" , x * y / num1 )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 257,
                                  "end_byte": 258,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 259,
                                  "end_byte": 266,
                                  "text": "\" %d\\n\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 259,
                                      "end_byte": 260,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 260,
                                      "end_byte": 263,
                                      "text": " %d",
                                      "children": []
                                    },
                                    {
                                      "type": "escape_sequence",
                                      "start_byte": 263,
                                      "end_byte": 265,
                                      "text": "\\n",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 265,
                                      "end_byte": 266,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 267,
                                  "end_byte": 268,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "binary_expression",
                                  "start_byte": 269,
                                  "end_byte": 281,
                                  "text": "x * y / num1",
                                  "children": [
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 269,
                                      "end_byte": 274,
                                      "text": "x * y",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 269,
                                          "end_byte": 270,
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "start_byte": 271,
                                          "end_byte": 272,
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 273,
                                          "end_byte": 274,
                                          "text": "y",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "/",
                                      "start_byte": 275,
                                      "end_byte": 276,
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 277,
                                      "end_byte": 281,
                                      "text": "num1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 282,
                                  "end_byte": 283,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 284,
                          "end_byte": 285,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 286,
                      "end_byte": 287,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 288,
              "end_byte": 289,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}