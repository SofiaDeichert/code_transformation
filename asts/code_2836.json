{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 229,
  "text": "int main ( ) { int a , b , c ; printf ( \"enter the values of a,b and c\\n\" ) ; scanf ( \"%d%d%d\" , & a , & b , & c ) ; if ( a > b && a > c ) { printf ( \"a is maximum %d\" , a ) ; } else { printf ( \"a is minimum\\n\" ) ; } return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 229,
      "text": "int main ( ) { int a , b , c ; printf ( \"enter the values of a,b and c\\n\" ) ; scanf ( \"%d%d%d\" , & a , & b , & c ) ; if ( a > b && a > c ) { printf ( \"a is maximum %d\" , a ) ; } else { printf ( \"a is minimum\\n\" ) ; } return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 229,
          "text": "{ int a , b , c ; printf ( \"enter the values of a,b and c\\n\" ) ; scanf ( \"%d%d%d\" , & a , & b , & c ) ; if ( a > b && a > c ) { printf ( \"a is maximum %d\" , a ) ; } else { printf ( \"a is minimum\\n\" ) ; } return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 30,
              "text": "int a , b , c ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 15,
                  "end_byte": 18,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 19,
                  "end_byte": 20,
                  "text": "a",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 21,
                  "end_byte": 22,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 23,
                  "end_byte": 24,
                  "text": "b",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 25,
                  "end_byte": 26,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 27,
                  "end_byte": 28,
                  "text": "c",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 29,
                  "end_byte": 30,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 31,
              "end_byte": 77,
              "text": "printf ( \"enter the values of a,b and c\\n\" ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 31,
                  "end_byte": 75,
                  "text": "printf ( \"enter the values of a,b and c\\n\" )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 31,
                      "end_byte": 37,
                      "text": "printf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 38,
                      "end_byte": 75,
                      "text": "( \"enter the values of a,b and c\\n\" )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 38,
                          "end_byte": 39,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 40,
                          "end_byte": 73,
                          "text": "\"enter the values of a,b and c\\n\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 40,
                              "end_byte": 41,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 41,
                              "end_byte": 70,
                              "text": "enter the values of a,b and c",
                              "children": []
                            },
                            {
                              "type": "escape_sequence",
                              "start_byte": 70,
                              "end_byte": 72,
                              "text": "\\n",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 72,
                              "end_byte": 73,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 74,
                          "end_byte": 75,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 76,
                  "end_byte": 77,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 78,
              "end_byte": 116,
              "text": "scanf ( \"%d%d%d\" , & a , & b , & c ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 78,
                  "end_byte": 114,
                  "text": "scanf ( \"%d%d%d\" , & a , & b , & c )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 78,
                      "end_byte": 83,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 84,
                      "end_byte": 114,
                      "text": "( \"%d%d%d\" , & a , & b , & c )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 84,
                          "end_byte": 85,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 86,
                          "end_byte": 94,
                          "text": "\"%d%d%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 86,
                              "end_byte": 87,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 87,
                              "end_byte": 93,
                              "text": "%d%d%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 93,
                              "end_byte": 94,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 95,
                          "end_byte": 96,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 97,
                          "end_byte": 100,
                          "text": "& a",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 97,
                              "end_byte": 98,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 99,
                              "end_byte": 100,
                              "text": "a",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 101,
                          "end_byte": 102,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 103,
                          "end_byte": 106,
                          "text": "& b",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 103,
                              "end_byte": 104,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 105,
                              "end_byte": 106,
                              "text": "b",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 107,
                          "end_byte": 108,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 109,
                          "end_byte": 112,
                          "text": "& c",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 109,
                              "end_byte": 110,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 111,
                              "end_byte": 112,
                              "text": "c",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 113,
                          "end_byte": 114,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 115,
                  "end_byte": 116,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "if_statement",
              "start_byte": 117,
              "end_byte": 216,
              "text": "if ( a > b && a > c ) { printf ( \"a is maximum %d\" , a ) ; } else { printf ( \"a is minimum\\n\" ) ; }",
              "children": [
                {
                  "type": "if",
                  "start_byte": 117,
                  "end_byte": 119,
                  "text": "if",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 120,
                  "end_byte": 138,
                  "text": "( a > b && a > c )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 120,
                      "end_byte": 121,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 122,
                      "end_byte": 136,
                      "text": "a > b && a > c",
                      "children": [
                        {
                          "type": "binary_expression",
                          "start_byte": 122,
                          "end_byte": 127,
                          "text": "a > b",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 122,
                              "end_byte": 123,
                              "text": "a",
                              "children": []
                            },
                            {
                              "type": ">",
                              "start_byte": 124,
                              "end_byte": 125,
                              "text": ">",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 126,
                              "end_byte": 127,
                              "text": "b",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "&&",
                          "start_byte": 128,
                          "end_byte": 130,
                          "text": "&&",
                          "children": []
                        },
                        {
                          "type": "binary_expression",
                          "start_byte": 131,
                          "end_byte": 136,
                          "text": "a > c",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 131,
                              "end_byte": 132,
                              "text": "a",
                              "children": []
                            },
                            {
                              "type": ">",
                              "start_byte": 133,
                              "end_byte": 134,
                              "text": ">",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 135,
                              "end_byte": 136,
                              "text": "c",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 137,
                      "end_byte": 138,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 139,
                  "end_byte": 177,
                  "text": "{ printf ( \"a is maximum %d\" , a ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 139,
                      "end_byte": 140,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 141,
                      "end_byte": 175,
                      "text": "printf ( \"a is maximum %d\" , a ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 141,
                          "end_byte": 173,
                          "text": "printf ( \"a is maximum %d\" , a )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 141,
                              "end_byte": 147,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 148,
                              "end_byte": 173,
                              "text": "( \"a is maximum %d\" , a )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 148,
                                  "end_byte": 149,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 150,
                                  "end_byte": 167,
                                  "text": "\"a is maximum %d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 150,
                                      "end_byte": 151,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 151,
                                      "end_byte": 166,
                                      "text": "a is maximum %d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 166,
                                      "end_byte": 167,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 168,
                                  "end_byte": 169,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 170,
                                  "end_byte": 171,
                                  "text": "a",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 172,
                                  "end_byte": 173,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 174,
                          "end_byte": 175,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 176,
                      "end_byte": 177,
                      "text": "}",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start_byte": 178,
                  "end_byte": 216,
                  "text": "else { printf ( \"a is minimum\\n\" ) ; }",
                  "children": [
                    {
                      "type": "else",
                      "start_byte": 178,
                      "end_byte": 182,
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": "compound_statement",
                      "start_byte": 183,
                      "end_byte": 216,
                      "text": "{ printf ( \"a is minimum\\n\" ) ; }",
                      "children": [
                        {
                          "type": "{",
                          "start_byte": 183,
                          "end_byte": 184,
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "expression_statement",
                          "start_byte": 185,
                          "end_byte": 214,
                          "text": "printf ( \"a is minimum\\n\" ) ;",
                          "children": [
                            {
                              "type": "call_expression",
                              "start_byte": 185,
                              "end_byte": 212,
                              "text": "printf ( \"a is minimum\\n\" )",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 185,
                                  "end_byte": 191,
                                  "text": "printf",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "start_byte": 192,
                                  "end_byte": 212,
                                  "text": "( \"a is minimum\\n\" )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 192,
                                      "end_byte": 193,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "string_literal",
                                      "start_byte": 194,
                                      "end_byte": 210,
                                      "text": "\"a is minimum\\n\"",
                                      "children": [
                                        {
                                          "type": "\"",
                                          "start_byte": 194,
                                          "end_byte": 195,
                                          "text": "\"",
                                          "children": []
                                        },
                                        {
                                          "type": "string_content",
                                          "start_byte": 195,
                                          "end_byte": 207,
                                          "text": "a is minimum",
                                          "children": []
                                        },
                                        {
                                          "type": "escape_sequence",
                                          "start_byte": 207,
                                          "end_byte": 209,
                                          "text": "\\n",
                                          "children": []
                                        },
                                        {
                                          "type": "\"",
                                          "start_byte": 209,
                                          "end_byte": 210,
                                          "text": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 211,
                                      "end_byte": 212,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "start_byte": 213,
                              "end_byte": 214,
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "start_byte": 215,
                          "end_byte": 216,
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 217,
              "end_byte": 227,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 217,
                  "end_byte": 223,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 224,
                  "end_byte": 225,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 226,
                  "end_byte": 227,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 228,
              "end_byte": 229,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}