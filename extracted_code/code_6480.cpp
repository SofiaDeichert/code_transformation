char inbuffer [ BS ] ; int incount = 0 ; int bufsize = 0 ; char outBuffer [ BS ] ; int outcount = 0 ; int fastread ( ) { long int r = 0 ; int s = 1 ; while ( 1 ) { if ( incount >= bufsize ) { bufsize = read ( 0 , inbuffer , BS ) ; incount = 0 ; } if ( inbuffer [ incount ] < 48 ) { if ( s ) incount ++ ; else { return r ; } } else { s = 0 ; r = r * 10 + inbuffer [ incount ++ ] - 48 ; } } } void recursiveOutNum ( int num ) { if ( num && num < 10 ) { outBuffer [ outcount ++ ] = '0' + num ; } else { int count = 0 , i ; long int temp ; temp = num ; while ( temp ) { temp = temp / 10 ; count ++ ; } for ( i = outcount + count - 1 ; i >= outcount ; i -- ) { outBuffer [ i ] = '0' + num ; num = num / 10 ; } outcount += count ; } } void flush ( ) { write ( 1 , outBuffer , outcount ) ; outcount = 0 ; } int main ( ) { int n , N ; n = fastread ( ) ; int * array [ 100 ] ; int i = 0 , j , k , l ; int up , left ; while ( i < n ) { N = fastread ( ) ; for ( j = 1 ; j <= N ; j ++ ) { array [ j - 1 ] = ( int * ) malloc ( j * sizeof ( int ) ) ; for ( k = 0 ; k < j ; k ++ ) array [ j - 1 ] [ k ] = fastread ( ) ; } for ( j = 1 ; j < N ; j ++ ) { for ( k = 0 ; k < j ; k ++ ) { if ( k == 0 ) { array [ j ] [ k ] += array [ j - 1 ] [ k ] ; } else if ( k > 0 && k < j - 1 ) { up = array [ j ] [ k ] + array [ j - 1 ] [ k ] ; left = array [ j ] [ k ] + array [ j - 1 ] [ k - 1 ] ; if ( up >= left ) array [ j ] [ k ] = up ; else array [ j ] [ k ] = left ; } else if ( k == j - 1 ) { array [ j ] [ k ] += array [ j - 1 ] [ k - 1 ] ; } } } if ( N > 0 ) { int max = - 1 ; for ( k = 0 ; k < j ; k ++ ) { if ( array [ N - 1 ] [ k ] > max ) max = array [ N - 1 ] [ k ] ; } recursiveOutNum ( max ) ; outBuffer [ outcount ++ ] = '\n' ; } i ++ ; } flush ( ) ; return 0 ; }