int main ( ) { int t , i , max ; int size , rows , cnt , j , k ; int * arr ; char str [ 400 ] ; scanf ( "%d" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( "%d" , & rows ) ; size = ( ( rows * ( rows + 1 ) ) / 2 ) ; arr = ( int * ) malloc ( size * sizeof ( int ) ) ; cnt = 0 ; for ( j = 0 ; j < rows ; j ++ ) { gets ( str ) ; char * split = strtok ( str , " " ) ; while ( split != NULL ) { arr [ cnt ++ ] = atoi ( split ) ; split = strtok ( NULL , " " ) ; } } int index , prv_index ; for ( k = 2 ; k <= rows ; k ++ ) { index = ( k * ( k - 1 ) / 2 ) ; prv_index = index - ( k - 1 ) ; for ( j = 0 ; j < k ; j ++ ) { if ( ( index + j - ( k - 1 ) - 1 ) < prv_index ) arr [ index + j ] += arr [ index + j - ( k - 1 ) ] ; else if ( ( index + j - ( k - 1 ) ) >= index ) arr [ index + j ] += arr [ index + j - ( k - 1 ) - 1 ] ; else { int temp1 = arr [ index + j - ( k - 1 ) ] > arr [ index + j - ( k - 1 ) - 1 ] ? arr [ index + j - ( k - 1 ) ] : arr [ index + j - ( k - 1 ) - 1 ] ; arr [ index + j ] += temp1 ; } } } max = arr [ index ] ; for ( j = index + 1 ; j < cnt ; j ++ ) { max = ( max > arr [ j ] ) ? max : arr [ j ] ; } printf ( "%d\n" , max ) ; free ( arr ) ; } return 0 ; }