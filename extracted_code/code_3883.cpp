int ar [ 50001 ] ; int * * dp ; void print ( int * * arr , int n ) { int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < n ; j ++ ) printf ( "%d, " , arr [ i ] [ j ] ) ; printf ( "\n" ) ; } } int min ( int i , int j ) { int k , ans ; ans = ar [ i ] ; for ( k = i + 1 ; k < j ; k ++ ) ans = find_min ( ans , ar [ k ] ) ; return ans ; } int minmax ( int n ) { int i , j , k , p , cur ; dp = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = 0 ; i < n ; i ++ ) dp [ i ] = ( int * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) dp [ i ] [ i ] = 0 ; for ( k = 1 ; k < n ; k ++ ) { for ( i = 0 ; i < n - k ; i ++ ) { j = i + k ; dp [ i ] [ j ] = max_int ; for ( p = i ; p < j ; p ++ ) { cur = dp [ i ] [ p ] + dp [ p + 1 ] [ j ] + min ( i , j ) ; dp [ i ] [ j ] = find_min ( dp [ i ] [ j ] , cur ) ; } } } return dp [ 0 ] [ n - 1 ] ; } int main ( ) { int t , n , i , j , ans ; scanf ( "%d" , & t ) ; for ( i = 0 ; i < t ; i ++ ) { scanf ( "%d" , & n ) ; for ( j = 0 ; j < n ; j ++ ) scanf ( "%d" , & ar [ j ] ) ; ans = minmax ( n ) ; printf ( "%d\n" , ans ) ; } return 0 ; }