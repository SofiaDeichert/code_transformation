struct input { int num ; struct input * next ; } ; struct cache { int i , j , value ; struct cache * next ; } ; struct input * inputStart , * inputRear , * inputSave , * inputPtr ; struct cache * cacheStart , * cacheRear , * cacheSave , * cachePtr ; int solveTrian ( int , int ) ; int t ; struct input * createInputNode ( int ) ; void insertInput ( struct input * ) ; int valueAt ( int , int ) ; struct cache * createCacheNode ( int , int , int ) ; void insertCache ( struct cache * ) ; int checkIfVisited ( int , int ) ; main ( ) { int row , col , nxt ; scanf ( "%d" , & t ) ; for ( row = 1 ; row <= t ; row ++ ) for ( col = 1 ; col <= row ; col ++ ) { scanf ( "%d" , & nxt ) ; inputSave = createInputNode ( nxt ) ; insertInput ( inputSave ) ; } printf ( "%d\n" , solveTrian ( 1 , 1 ) ) ; } int solveTrian ( int i , int j ) { if ( i > t ) return 0 ; int cacheValue = checkIfVisited ( i , j ) ; if ( cacheValue != - 1 ) return cacheValue ; int temp1 = solveTrian ( i + 1 , j ) ; int temp2 = solveTrian ( i + 1 , j + 1 ) ; int t = ( ( temp1 >= temp2 ) ? temp1 : temp2 ) + valueAt ( i , j ) ; cacheSave = createCacheNode ( i , j , t ) ; insertCache ( cacheSave ) ; return t ; } struct input * createInputNode ( int in ) { inputPtr = ( struct input * ) malloc ( sizeof ( struct input ) ) ; inputPtr -> next = NULL ; inputPtr -> num = in ; return inputPtr ; } void insertInput ( struct input * np ) { if ( inputStart == NULL ) inputStart = inputRear = np ; else { inputRear -> next = np ; inputRear = np ; } } int valueAt ( int rw , int cl ) { int sum = 0 ; while ( rw > 0 ) sum = sum + ( -- rw ) ; inputSave = inputStart ; sum = sum + ( -- cl ) ; while ( sum -- > 0 ) inputSave = inputSave -> next ; return inputSave -> num ; } struct cache * createCacheNode ( int r , int c , int in ) { cachePtr = ( struct cache * ) malloc ( sizeof ( struct cache ) ) ; cachePtr -> next = NULL ; cachePtr -> value = in ; cachePtr -> i = r ; cachePtr -> j = c ; return cachePtr ; } void insertCache ( struct cache * np ) { if ( cacheStart == NULL ) cacheStart = cacheRear = np ; else { cacheRear -> next = np ; cacheRear = np ; } } int checkIfVisited ( int r , int c ) { cacheSave = cacheStart ; while ( cacheSave != NULL ) { if ( ( ( cacheSave -> i ) == r ) && ( ( cacheSave -> j ) == c ) ) return cacheSave -> value ; cacheSave = cacheSave -> next ; } return - 1 ; }