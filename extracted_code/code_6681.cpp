int MaxSumPath ( int path [ ] [ 100 ] , int rows ) { int sum [ 100 ] [ 100 ] , i , j ; for ( i = 0 ; i < 100 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) sum [ i ] [ j ] = 0 ; for ( i = 1 ; i <= rows ; i ++ ) { for ( j = 0 ; j <= rows - i ; j ++ ) { sum [ i ] [ j ] = path [ rows - i ] [ j ] + MAX ( sum [ i - 1 ] [ j ] , sum [ i - 1 ] [ j + 1 ] ) ; } } return sum [ rows ] [ 0 ] ; } int main ( ) { int path [ 100 ] [ 100 ] , rows = 0 , row = 0 , col = 0 , cases = 0 , res [ 100 ] , i = 0 ; scanf ( "%d" , & cases ) ; while ( cases != 0 ) { scanf ( "%d" , & rows ) ; for ( row = 0 ; row < rows ; row ++ ) { for ( col = 0 ; col <= row ; col ++ ) { scanf ( "%d" , & path [ row ] [ col ] ) ; } } res [ i ] = MaxSumPath ( path , rows ) ; i ++ ; cases -- ; } for ( row = 0 ; row < i ; row ++ ) { printf ( "%d\n" , res [ row ] ) ; } return 0 ; }