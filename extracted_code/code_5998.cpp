long pow ( int b , int p ) { long ans = 1 ; while ( p -- ) ans *= b ; return ans ; } int main ( ) { int t , r ; scanf ( "%d" , & t ) ; while ( t -- ) { scanf ( "%d" , & r ) ; int max = r * ( r + 1 ) / 2 ; int j = 1 , i = 0 ; int now [ 100 ] ; int * prev = NULL , * next = NULL ; int maxn = 0 ; while ( j <= r ) { i = 0 ; while ( i < j ) { scanf ( "%d" , & now [ i ] ) ; i ++ ; } next = ( int * ) malloc ( sizeof ( int ) * pow ( 2 , j - 1 ) ) ; int k = 0 ; int l = 0 ; i = 0 ; unsigned long power = pow ( 2 , j - 1 ) ; while ( l < power ) { if ( j != 1 ) next [ l ] = prev [ k ] + now [ i ] ; else next [ l ] = now [ i ] ; if ( maxn < next [ l ] ) maxn = next [ l ] ; l ++ ; i ++ ; if ( l >= power ) break ; next [ l ] = prev [ k ] + now [ i ] ; if ( maxn < next [ l ] ) maxn = next [ l ] ; l ++ ; k ++ ; } j ++ ; i = 0 ; prev = ( int * ) realloc ( prev , 0 ) ; prev = next ; } printf ( "%d\n" , maxn ) ; } return 0 ; }