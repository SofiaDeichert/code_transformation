int sum_n ( int n ) { return ( n * ( n + 1 ) / 2 ) ; } int row_num ( int index ) { int row = 0 ; while ( ( row * ( row + 1 ) / 2 ) <= index ) { row ++ ; } return row ; } void sumtrian ( int * a , int index , int sum , int n , int * answer ) { if ( row_num ( index ) <= n ) { sum = sum + a [ index ] ; if ( row_num ( index ) == n ) { if ( * answer < sum ) { * answer = sum ; } } sumtrian ( a , index + row_num ( index ) , sum , n , answer ) ; sumtrian ( a , index + row_num ( index ) + 1 , sum , n , answer ) ; } } int main ( ) { int m , i , a [ 99 ] , row , sum [ 1000 ] , j , flag = 0 ; scanf ( "%d" , & m ) ; if ( m >= 0 && m <= 1000 ) for ( i = 0 ; i < m ; i ++ ) { sum [ i ] = 0 ; flag = 0 ; scanf ( "%d" , & row ) ; if ( row > 0 && row < 100 ) { for ( j = 0 ; j < sum_n ( row ) ; j ++ ) { scanf ( "%d" , & a [ j ] ) ; if ( a [ j ] <= 0 && a [ j ] > 99 ) { flag = 1 ; break ; } } if ( flag == 0 ) sumtrian ( a , 0 , 0 , row , & sum [ i ] ) ; } } for ( i = 0 ; i < m ; i ++ ) { printf ( "%d\n" , sum [ i ] ) ; } return 0 ; }