int * * triangle , * * memory , totalRows ; void freeSquareArray ( int * * , int ) ; int * * getSquareArray ( int ) ; int getMaxSum ( int , int , int ) ; void initArrayToConst ( int * * , int ) ; int main ( ) { int i , j , k ; int n , result ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & totalRows ) ; triangle = getSquareArray ( totalRows ) ; memory = getSquareArray ( totalRows ) ; initArrayToConst ( memory , - 1 ) ; for ( j = 0 ; j < totalRows ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( "%d" , & triangle [ j ] [ k ] ) ; } } result = getMaxSum ( 0 , 0 , totalRows ) ; printf ( "%d\n" , result ) ; freeSquareArray ( triangle , totalRows ) ; freeSquareArray ( memory , totalRows ) ; } return 0 ; } void initArrayToConst ( int * * array , int x ) { int i , j ; for ( i = 0 ; i < totalRows ; i ++ ) for ( j = 0 ; j < totalRows ; j ++ ) array [ i ] [ j ] = x ; } int * * getSquareArray ( int size ) { int i , * * array ; array = ( int * * ) malloc ( size * sizeof ( int * ) ) ; for ( i = 0 ; i < size ; i ++ ) { array [ i ] = ( int * ) malloc ( size * sizeof ( int ) ) ; } return array ; } void freeSquareArray ( int * * triangle , int size ) { int i ; for ( i = 0 ; i < size ; i ++ ) { free ( triangle [ i ] ) ; } free ( triangle ) ; } int getMaxSum ( int row , int col , int totalRows ) { int val1 , val2 ; if ( memory [ row ] [ col ] >= 0 ) { return memory [ row ] [ col ] ; } if ( ( row + 1 ) >= totalRows ) { memory [ row ] [ col ] = triangle [ row ] [ col ] ; return triangle [ row ] [ col ] ; } val1 = triangle [ row ] [ col ] + getMaxSum ( row + 1 , col , totalRows ) ; val2 = triangle [ row ] [ col ] + getMaxSum ( row + 1 , col + 1 , totalRows ) ; if ( val1 > val2 ) { memory [ row ] [ col ] = val1 ; return val1 ; } else { memory [ row ] [ col ] = val2 ; return val2 ; } }