int sinput ( ) { int no = 0 ; char ch = getchar ( ) ; while ( ch != '\n' ) { no = ( no * 10 ) + ( ch - '0' ) ; ch = getchar ( ) ; } return no ; } void foutput ( long int n ) { if ( n == 0 ) { puts ( "0" ) ; return ; } long int temp = n ; int count = 0 ; while ( temp != 0 ) { temp /= 10 ; ++ count ; } char * no = malloc ( sizeof ( char ) * count + 1 ) ; temp = n ; int temp2 = count ; no [ count ] = '\0' ; while ( temp != 0 ) { no [ temp2 - 1 ] = temp % 10 + '0' ; temp /= 10 ; -- temp2 ; } puts ( no ) ; free ( no ) ; no = NULL ; } void minput ( int * inparr ) { int no = 0 , i = 0 ; char ch = getchar ( ) ; while ( ch != '\n' ) { if ( ch != ' ' ) { no = ( no * 10 ) + ( ch - '0' ) ; } else { inparr [ i ++ ] = no ; no = 0 ; } ch = getchar ( ) ; } inparr [ i ++ ] = no ; } int lpath ( int * * arr , int n ) { if ( n == 1 ) return arr [ 0 ] [ 0 ] ; int i ; for ( i = 0 ; i < n - 1 ; i ++ ) arr [ n - 2 ] [ i ] += ( arr [ n - 1 ] [ i ] > arr [ n - 1 ] [ i + 1 ] ) ? arr [ n - 1 ] [ i ] : arr [ n - 1 ] [ i + 1 ] ; return lpath ( arr , n - 1 ) ; } int main ( ) { int t = sinput ( ) , i ; int * solution = malloc ( t * sizeof ( int ) ) ; for ( i = 0 ; i < t ; i ++ ) { int n = sinput ( ) , j ; int * * arr = malloc ( n * sizeof ( int ) ) ; arr [ 0 ] = malloc ( n * n * sizeof ( int ) ) ; for ( j = 0 ; j < n ; j ++ ) { arr [ j ] = arr [ 0 ] + j * n ; minput ( arr [ j ] ) ; } solution [ i ] = lpath ( arr , n ) ; free ( arr [ 0 ] ) ; free ( arr ) ; } for ( i = 0 ; i < t ; i ++ ) foutput ( solution [ i ] ) ; free ( solution ) ; return 0 ; }