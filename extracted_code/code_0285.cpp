int pop1 ( ) ; int pop2 ( ) ; int pop3 ( ) ; void push ( int , int , int ) ; int stack1 [ MAX ] ; int stack2 [ MAX ] , stack3 [ MAX ] ; int top1 = - 1 , top2 = - 1 , top3 = - 1 ; int main ( ) { int t , r , i , j , m , n , s , a [ 100 ] [ 100 ] , x = 0 , sum [ 6000 ] , max ; scanf ( "%d" , & t ) ; while ( t -- ) { x = 0 ; scanf ( "%d" , & r ) ; for ( i = 0 ; i < r ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } printf ( "\n" ) ; } push ( 0 , 0 , 0 ) ; while ( top1 != - 1 && top2 != - 1 && top3 != - 1 ) { m = pop2 ( ) ; n = pop3 ( ) ; s = pop1 ( ) ; s = s + a [ m ] [ n ] ; for ( i = m ; i < r - 1 ; i ++ ) { push ( s , m + 1 , n + 1 ) ; s = s + a [ m + 1 ] [ n ] ; m = m + 1 ; } sum [ x ++ ] = s ; } max = sum [ 0 ] ; for ( i = 0 ; i < x ; i ++ ) { if ( sum [ i ] > max ) max = sum [ i ] ; } printf ( "%d\n" , max ) ; } return 0 ; } void push ( int sum , int k , int l ) { top1 ++ ; stack1 [ top1 ] = sum ; top2 ++ ; stack2 [ top2 ] = k ; top3 ++ ; stack3 [ top3 ] = l ; } int pop1 ( ) { return ( stack1 [ top1 -- ] ) ; } int pop2 ( ) { return ( stack2 [ top2 -- ] ) ; } int pop3 ( ) { return ( stack3 [ top3 -- ] ) ; }