int best_path ( int l , int tri [ 100 ] [ 100 ] , int r , int c ) { int i , j , k ; if ( r == l ) { return 0 ; } int max = MAX ( best_path ( l , tri , r + 1 , c ) , best_path ( l , tri , r + 1 , c + 1 ) ) ; return tri [ r ] [ c ] + max ; } int main ( ) { int n , i , j , k ; scanf ( "%d" , & n ) ; int m [ n ] ; int tri [ n ] [ 100 ] [ 100 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & m [ i ] ) ; for ( j = 0 ; j < m [ i ] ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( "%d" , & tri [ i ] [ j ] [ k ] ) ; } } } int sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum = best_path ( m [ i ] , tri [ i ] , 0 , 0 ) ; printf ( "\n%d" , sum ) ; } }