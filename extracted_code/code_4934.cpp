typedef struct node { struct node * left ; struct node * right ; int data ; } node ; int ans = 0 ; void createtree ( node * p , int a [ 100 ] [ 100 ] , int l , int i , int j ) { if ( i <= l - 2 && j <= l - 2 ) { p -> data = a [ i ] [ j ] ; node * leftnode = ( node * ) malloc ( sizeof ( node ) ) ; node * rightnode = ( node * ) malloc ( sizeof ( node ) ) ; p -> left = leftnode ; p -> right = rightnode ; createtree ( leftnode , a , l , i + 1 , j ) ; createtree ( rightnode , a , l , i + 1 , j + 1 ) ; } else { p -> data = a [ i ] [ j ] ; p -> left = NULL ; p -> right = NULL ; } } printtree ( node * p ) { if ( p == NULL ) return ; else { printf ( "%d\n" , p -> data ) ; printtree ( p -> left ) ; printtree ( p -> right ) ; } } void compute ( node * p , int max ) { if ( p == NULL ) { if ( max > ans ) ans = max ; } else { max += ( p -> data ) ; compute ( p -> left , max ) ; compute ( p -> right , max ) ; } } int main ( ) { int a [ 100 ] [ 100 ] , n , j , l , i ; scanf ( "%d" , & n ) ; while ( n != 0 ) { scanf ( "%d" , & l ) ; for ( i = 0 ; i < l ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & a [ i ] [ j ] ) ; } } ans = 0 ; node * p = ( node * ) malloc ( sizeof ( node ) ) ; createtree ( p , a , l , 0 , 0 ) ; compute ( p , 0 ) ; printf ( "%d\n" , ans ) ; n -- ; } return 0 ; }