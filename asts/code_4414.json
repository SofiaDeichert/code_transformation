{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 462,
  "text": "int main ( ) { int t ; long num1 , num2 , gcd , lcm , remainder , num , denom ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%ld %ld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { num = num1 ; denom = num2 ; } else { num = num2 ; denom = num1 ; } remainder = num % denom ; while ( remainder != 0 ) { num = denom ; denom = remainder ; remainder = num % denom ; } gcd = denom ; lcm = num1 * num2 / gcd ; printf ( \"%ld %ld\\n\" , gcd , lcm ) ; t -- ; } return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 462,
      "text": "int main ( ) { int t ; long num1 , num2 , gcd , lcm , remainder , num , denom ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%ld %ld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { num = num1 ; denom = num2 ; } else { num = num2 ; denom = num1 ; } remainder = num % denom ; while ( remainder != 0 ) { num = denom ; denom = remainder ; remainder = num % denom ; } gcd = denom ; lcm = num1 * num2 / gcd ; printf ( \"%ld %ld\\n\" , gcd , lcm ) ; t -- ; } return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 462,
          "text": "{ int t ; long num1 , num2 , gcd , lcm , remainder , num , denom ; scanf ( \"%d\" , & t ) ; while ( t > 0 ) { scanf ( \"%ld %ld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { num = num1 ; denom = num2 ; } else { num = num2 ; denom = num1 ; } remainder = num % denom ; while ( remainder != 0 ) { num = denom ; denom = remainder ; remainder = num % denom ; } gcd = denom ; lcm = num1 * num2 / gcd ; printf ( \"%ld %ld\\n\" , gcd , lcm ) ; t -- ; } return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 22,
              "text": "int t ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 15,
                  "end_byte": 18,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 19,
                  "end_byte": 20,
                  "text": "t",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 21,
                  "end_byte": 22,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "declaration",
              "start_byte": 23,
              "end_byte": 79,
              "text": "long num1 , num2 , gcd , lcm , remainder , num , denom ;",
              "children": [
                {
                  "type": "sized_type_specifier",
                  "start_byte": 23,
                  "end_byte": 27,
                  "text": "long",
                  "children": [
                    {
                      "type": "long",
                      "start_byte": 23,
                      "end_byte": 27,
                      "text": "long",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "identifier",
                  "start_byte": 28,
                  "end_byte": 32,
                  "text": "num1",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 33,
                  "end_byte": 34,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 35,
                  "end_byte": 39,
                  "text": "num2",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 40,
                  "end_byte": 41,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 42,
                  "end_byte": 45,
                  "text": "gcd",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 46,
                  "end_byte": 47,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 48,
                  "end_byte": 51,
                  "text": "lcm",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 52,
                  "end_byte": 53,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 54,
                  "end_byte": 63,
                  "text": "remainder",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 64,
                  "end_byte": 65,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 66,
                  "end_byte": 69,
                  "text": "num",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 70,
                  "end_byte": 71,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 72,
                  "end_byte": 77,
                  "text": "denom",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 78,
                  "end_byte": 79,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 80,
              "end_byte": 102,
              "text": "scanf ( \"%d\" , & t ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 80,
                  "end_byte": 100,
                  "text": "scanf ( \"%d\" , & t )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 80,
                      "end_byte": 85,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 86,
                      "end_byte": 100,
                      "text": "( \"%d\" , & t )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 86,
                          "end_byte": 87,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 88,
                          "end_byte": 92,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 88,
                              "end_byte": 89,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 89,
                              "end_byte": 91,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 91,
                              "end_byte": 92,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 93,
                          "end_byte": 94,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 95,
                          "end_byte": 98,
                          "text": "& t",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 95,
                              "end_byte": 96,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 97,
                              "end_byte": 98,
                              "text": "t",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 99,
                          "end_byte": 100,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 101,
                  "end_byte": 102,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 103,
              "end_byte": 449,
              "text": "while ( t > 0 ) { scanf ( \"%ld %ld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { num = num1 ; denom = num2 ; } else { num = num2 ; denom = num1 ; } remainder = num % denom ; while ( remainder != 0 ) { num = denom ; denom = remainder ; remainder = num % denom ; } gcd = denom ; lcm = num1 * num2 / gcd ; printf ( \"%ld %ld\\n\" , gcd , lcm ) ; t -- ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 103,
                  "end_byte": 108,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 109,
                  "end_byte": 118,
                  "text": "( t > 0 )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 109,
                      "end_byte": 110,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 111,
                      "end_byte": 116,
                      "text": "t > 0",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 111,
                          "end_byte": 112,
                          "text": "t",
                          "children": []
                        },
                        {
                          "type": ">",
                          "start_byte": 113,
                          "end_byte": 114,
                          "text": ">",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "start_byte": 115,
                          "end_byte": 116,
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 117,
                      "end_byte": 118,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 119,
                  "end_byte": 449,
                  "text": "{ scanf ( \"%ld %ld\" , & num1 , & num2 ) ; if ( num1 > num2 ) { num = num1 ; denom = num2 ; } else { num = num2 ; denom = num1 ; } remainder = num % denom ; while ( remainder != 0 ) { num = denom ; denom = remainder ; remainder = num % denom ; } gcd = denom ; lcm = num1 * num2 / gcd ; printf ( \"%ld %ld\\n\" , gcd , lcm ) ; t -- ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 119,
                      "end_byte": 120,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 121,
                      "end_byte": 160,
                      "text": "scanf ( \"%ld %ld\" , & num1 , & num2 ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 121,
                          "end_byte": 158,
                          "text": "scanf ( \"%ld %ld\" , & num1 , & num2 )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 121,
                              "end_byte": 126,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 127,
                              "end_byte": 158,
                              "text": "( \"%ld %ld\" , & num1 , & num2 )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 127,
                                  "end_byte": 128,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 129,
                                  "end_byte": 138,
                                  "text": "\"%ld %ld\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 129,
                                      "end_byte": 130,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 130,
                                      "end_byte": 137,
                                      "text": "%ld %ld",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 137,
                                      "end_byte": 138,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 139,
                                  "end_byte": 140,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 141,
                                  "end_byte": 147,
                                  "text": "& num1",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 141,
                                      "end_byte": 142,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 143,
                                      "end_byte": 147,
                                      "text": "num1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 148,
                                  "end_byte": 149,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 150,
                                  "end_byte": 156,
                                  "text": "& num2",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 150,
                                      "end_byte": 151,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 152,
                                      "end_byte": 156,
                                      "text": "num2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 157,
                                  "end_byte": 158,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 159,
                          "end_byte": 160,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "start_byte": 161,
                      "end_byte": 248,
                      "text": "if ( num1 > num2 ) { num = num1 ; denom = num2 ; } else { num = num2 ; denom = num1 ; }",
                      "children": [
                        {
                          "type": "if",
                          "start_byte": 161,
                          "end_byte": 163,
                          "text": "if",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 164,
                          "end_byte": 179,
                          "text": "( num1 > num2 )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 164,
                              "end_byte": 165,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 166,
                              "end_byte": 177,
                              "text": "num1 > num2",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 166,
                                  "end_byte": 170,
                                  "text": "num1",
                                  "children": []
                                },
                                {
                                  "type": ">",
                                  "start_byte": 171,
                                  "end_byte": 172,
                                  "text": ">",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 173,
                                  "end_byte": 177,
                                  "text": "num2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 178,
                              "end_byte": 179,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 180,
                          "end_byte": 211,
                          "text": "{ num = num1 ; denom = num2 ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 180,
                              "end_byte": 181,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 182,
                              "end_byte": 194,
                              "text": "num = num1 ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 182,
                                  "end_byte": 192,
                                  "text": "num = num1",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 182,
                                      "end_byte": 185,
                                      "text": "num",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 186,
                                      "end_byte": 187,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 188,
                                      "end_byte": 192,
                                      "text": "num1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 193,
                                  "end_byte": 194,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 195,
                              "end_byte": 209,
                              "text": "denom = num2 ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 195,
                                  "end_byte": 207,
                                  "text": "denom = num2",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 195,
                                      "end_byte": 200,
                                      "text": "denom",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 201,
                                      "end_byte": 202,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 203,
                                      "end_byte": 207,
                                      "text": "num2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 208,
                                  "end_byte": 209,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 210,
                              "end_byte": 211,
                              "text": "}",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "else_clause",
                          "start_byte": 212,
                          "end_byte": 248,
                          "text": "else { num = num2 ; denom = num1 ; }",
                          "children": [
                            {
                              "type": "else",
                              "start_byte": 212,
                              "end_byte": 216,
                              "text": "else",
                              "children": []
                            },
                            {
                              "type": "compound_statement",
                              "start_byte": 217,
                              "end_byte": 248,
                              "text": "{ num = num2 ; denom = num1 ; }",
                              "children": [
                                {
                                  "type": "{",
                                  "start_byte": 217,
                                  "end_byte": 218,
                                  "text": "{",
                                  "children": []
                                },
                                {
                                  "type": "expression_statement",
                                  "start_byte": 219,
                                  "end_byte": 231,
                                  "text": "num = num2 ;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "start_byte": 219,
                                      "end_byte": 229,
                                      "text": "num = num2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 219,
                                          "end_byte": 222,
                                          "text": "num",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "start_byte": 223,
                                          "end_byte": 224,
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 225,
                                          "end_byte": 229,
                                          "text": "num2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "start_byte": 230,
                                      "end_byte": 231,
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "start_byte": 232,
                                  "end_byte": 246,
                                  "text": "denom = num1 ;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "start_byte": 232,
                                      "end_byte": 244,
                                      "text": "denom = num1",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 232,
                                          "end_byte": 237,
                                          "text": "denom",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "start_byte": 238,
                                          "end_byte": 239,
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 240,
                                          "end_byte": 244,
                                          "text": "num1",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "start_byte": 245,
                                      "end_byte": 246,
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "}",
                                  "start_byte": 247,
                                  "end_byte": 248,
                                  "text": "}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 249,
                      "end_byte": 274,
                      "text": "remainder = num % denom ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 249,
                          "end_byte": 272,
                          "text": "remainder = num % denom",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 249,
                              "end_byte": 258,
                              "text": "remainder",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 259,
                              "end_byte": 260,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 261,
                              "end_byte": 272,
                              "text": "num % denom",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 261,
                                  "end_byte": 264,
                                  "text": "num",
                                  "children": []
                                },
                                {
                                  "type": "%",
                                  "start_byte": 265,
                                  "end_byte": 266,
                                  "text": "%",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 267,
                                  "end_byte": 272,
                                  "text": "denom",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 273,
                          "end_byte": 274,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "while_statement",
                      "start_byte": 275,
                      "end_byte": 363,
                      "text": "while ( remainder != 0 ) { num = denom ; denom = remainder ; remainder = num % denom ; }",
                      "children": [
                        {
                          "type": "while",
                          "start_byte": 275,
                          "end_byte": 280,
                          "text": "while",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 281,
                          "end_byte": 299,
                          "text": "( remainder != 0 )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 281,
                              "end_byte": 282,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 283,
                              "end_byte": 297,
                              "text": "remainder != 0",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 283,
                                  "end_byte": 292,
                                  "text": "remainder",
                                  "children": []
                                },
                                {
                                  "type": "!=",
                                  "start_byte": 293,
                                  "end_byte": 295,
                                  "text": "!=",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "start_byte": 296,
                                  "end_byte": 297,
                                  "text": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 298,
                              "end_byte": 299,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 300,
                          "end_byte": 363,
                          "text": "{ num = denom ; denom = remainder ; remainder = num % denom ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 300,
                              "end_byte": 301,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 302,
                              "end_byte": 315,
                              "text": "num = denom ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 302,
                                  "end_byte": 313,
                                  "text": "num = denom",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 302,
                                      "end_byte": 305,
                                      "text": "num",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 306,
                                      "end_byte": 307,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 308,
                                      "end_byte": 313,
                                      "text": "denom",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 314,
                                  "end_byte": 315,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 316,
                              "end_byte": 335,
                              "text": "denom = remainder ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 316,
                                  "end_byte": 333,
                                  "text": "denom = remainder",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 316,
                                      "end_byte": 321,
                                      "text": "denom",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 322,
                                      "end_byte": 323,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 324,
                                      "end_byte": 333,
                                      "text": "remainder",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 334,
                                  "end_byte": 335,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 336,
                              "end_byte": 361,
                              "text": "remainder = num % denom ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 336,
                                  "end_byte": 359,
                                  "text": "remainder = num % denom",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 336,
                                      "end_byte": 345,
                                      "text": "remainder",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 346,
                                      "end_byte": 347,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 348,
                                      "end_byte": 359,
                                      "text": "num % denom",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 348,
                                          "end_byte": 351,
                                          "text": "num",
                                          "children": []
                                        },
                                        {
                                          "type": "%",
                                          "start_byte": 352,
                                          "end_byte": 353,
                                          "text": "%",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 354,
                                          "end_byte": 359,
                                          "text": "denom",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 360,
                                  "end_byte": 361,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 362,
                              "end_byte": 363,
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 364,
                      "end_byte": 377,
                      "text": "gcd = denom ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 364,
                          "end_byte": 375,
                          "text": "gcd = denom",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 364,
                              "end_byte": 367,
                              "text": "gcd",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 368,
                              "end_byte": 369,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 370,
                              "end_byte": 375,
                              "text": "denom",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 376,
                          "end_byte": 377,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 378,
                      "end_byte": 403,
                      "text": "lcm = num1 * num2 / gcd ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 378,
                          "end_byte": 401,
                          "text": "lcm = num1 * num2 / gcd",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 378,
                              "end_byte": 381,
                              "text": "lcm",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 382,
                              "end_byte": 383,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 384,
                              "end_byte": 401,
                              "text": "num1 * num2 / gcd",
                              "children": [
                                {
                                  "type": "binary_expression",
                                  "start_byte": 384,
                                  "end_byte": 395,
                                  "text": "num1 * num2",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 384,
                                      "end_byte": 388,
                                      "text": "num1",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "start_byte": 389,
                                      "end_byte": 390,
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 391,
                                      "end_byte": 395,
                                      "text": "num2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "/",
                                  "start_byte": 396,
                                  "end_byte": 397,
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 398,
                                  "end_byte": 401,
                                  "text": "gcd",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 402,
                          "end_byte": 403,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 404,
                      "end_byte": 440,
                      "text": "printf ( \"%ld %ld\\n\" , gcd , lcm ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 404,
                          "end_byte": 438,
                          "text": "printf ( \"%ld %ld\\n\" , gcd , lcm )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 404,
                              "end_byte": 410,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 411,
                              "end_byte": 438,
                              "text": "( \"%ld %ld\\n\" , gcd , lcm )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 411,
                                  "end_byte": 412,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 413,
                                  "end_byte": 424,
                                  "text": "\"%ld %ld\\n\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 413,
                                      "end_byte": 414,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 414,
                                      "end_byte": 421,
                                      "text": "%ld %ld",
                                      "children": []
                                    },
                                    {
                                      "type": "escape_sequence",
                                      "start_byte": 421,
                                      "end_byte": 423,
                                      "text": "\\n",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 423,
                                      "end_byte": 424,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 425,
                                  "end_byte": 426,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 427,
                                  "end_byte": 430,
                                  "text": "gcd",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "start_byte": 431,
                                  "end_byte": 432,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 433,
                                  "end_byte": 436,
                                  "text": "lcm",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 437,
                                  "end_byte": 438,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 439,
                          "end_byte": 440,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 441,
                      "end_byte": 447,
                      "text": "t -- ;",
                      "children": [
                        {
                          "type": "update_expression",
                          "start_byte": 441,
                          "end_byte": 445,
                          "text": "t --",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 441,
                              "end_byte": 442,
                              "text": "t",
                              "children": []
                            },
                            {
                              "type": "--",
                              "start_byte": 443,
                              "end_byte": 445,
                              "text": "--",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 446,
                          "end_byte": 447,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 448,
                      "end_byte": 449,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 450,
              "end_byte": 460,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 450,
                  "end_byte": 456,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 457,
                  "end_byte": 458,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 459,
                  "end_byte": 460,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 461,
              "end_byte": 462,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}