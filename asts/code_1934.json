{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 322,
  "text": "int main ( ) { long num1 , num2 , total , tmp , GCD , LCM ; scanf ( \"%ld\" , & total ) ; while ( total -- ) { scanf ( \"%ld%ld\" , & num1 , & num2 ) ; LCM = num1 * num2 * 1.0 ; while ( num2 != 0 ) { tmp = num1 % num2 ; num1 = num2 ; num2 = tmp ; } GCD = num1 ; LCM /= GCD ; printf ( \"%ld %ld\\n\" , GCD , LCM ) ; } return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 322,
      "text": "int main ( ) { long num1 , num2 , total , tmp , GCD , LCM ; scanf ( \"%ld\" , & total ) ; while ( total -- ) { scanf ( \"%ld%ld\" , & num1 , & num2 ) ; LCM = num1 * num2 * 1.0 ; while ( num2 != 0 ) { tmp = num1 % num2 ; num1 = num2 ; num2 = tmp ; } GCD = num1 ; LCM /= GCD ; printf ( \"%ld %ld\\n\" , GCD , LCM ) ; } return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 322,
          "text": "{ long num1 , num2 , total , tmp , GCD , LCM ; scanf ( \"%ld\" , & total ) ; while ( total -- ) { scanf ( \"%ld%ld\" , & num1 , & num2 ) ; LCM = num1 * num2 * 1.0 ; while ( num2 != 0 ) { tmp = num1 % num2 ; num1 = num2 ; num2 = tmp ; } GCD = num1 ; LCM /= GCD ; printf ( \"%ld %ld\\n\" , GCD , LCM ) ; } return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 59,
              "text": "long num1 , num2 , total , tmp , GCD , LCM ;",
              "children": [
                {
                  "type": "sized_type_specifier",
                  "start_byte": 15,
                  "end_byte": 19,
                  "text": "long",
                  "children": [
                    {
                      "type": "long",
                      "start_byte": 15,
                      "end_byte": 19,
                      "text": "long",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "identifier",
                  "start_byte": 20,
                  "end_byte": 24,
                  "text": "num1",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 25,
                  "end_byte": 26,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 27,
                  "end_byte": 31,
                  "text": "num2",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 32,
                  "end_byte": 33,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 34,
                  "end_byte": 39,
                  "text": "total",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 40,
                  "end_byte": 41,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 42,
                  "end_byte": 45,
                  "text": "tmp",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 46,
                  "end_byte": 47,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 48,
                  "end_byte": 51,
                  "text": "GCD",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 52,
                  "end_byte": 53,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 54,
                  "end_byte": 57,
                  "text": "LCM",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 58,
                  "end_byte": 59,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 60,
              "end_byte": 87,
              "text": "scanf ( \"%ld\" , & total ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 60,
                  "end_byte": 85,
                  "text": "scanf ( \"%ld\" , & total )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 60,
                      "end_byte": 65,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 66,
                      "end_byte": 85,
                      "text": "( \"%ld\" , & total )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 66,
                          "end_byte": 67,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 68,
                          "end_byte": 73,
                          "text": "\"%ld\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 68,
                              "end_byte": 69,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 69,
                              "end_byte": 72,
                              "text": "%ld",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 72,
                              "end_byte": 73,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 74,
                          "end_byte": 75,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 76,
                          "end_byte": 83,
                          "text": "& total",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 76,
                              "end_byte": 77,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 78,
                              "end_byte": 83,
                              "text": "total",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 84,
                          "end_byte": 85,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 86,
                  "end_byte": 87,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 88,
              "end_byte": 309,
              "text": "while ( total -- ) { scanf ( \"%ld%ld\" , & num1 , & num2 ) ; LCM = num1 * num2 * 1.0 ; while ( num2 != 0 ) { tmp = num1 % num2 ; num1 = num2 ; num2 = tmp ; } GCD = num1 ; LCM /= GCD ; printf ( \"%ld %ld\\n\" , GCD , LCM ) ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 88,
                  "end_byte": 93,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 94,
                  "end_byte": 106,
                  "text": "( total -- )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 94,
                      "end_byte": 95,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "update_expression",
                      "start_byte": 96,
                      "end_byte": 104,
                      "text": "total --",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 96,
                          "end_byte": 101,
                          "text": "total",
                          "children": []
                        },
                        {
                          "type": "--",
                          "start_byte": 102,
                          "end_byte": 104,
                          "text": "--",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 105,
                      "end_byte": 106,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 107,
                  "end_byte": 309,
                  "text": "{ scanf ( \"%ld%ld\" , & num1 , & num2 ) ; LCM = num1 * num2 * 1.0 ; while ( num2 != 0 ) { tmp = num1 % num2 ; num1 = num2 ; num2 = tmp ; } GCD = num1 ; LCM /= GCD ; printf ( \"%ld %ld\\n\" , GCD , LCM ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 107,
                      "end_byte": 108,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 109,
                      "end_byte": 147,
                      "text": "scanf ( \"%ld%ld\" , & num1 , & num2 ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 109,
                          "end_byte": 145,
                          "text": "scanf ( \"%ld%ld\" , & num1 , & num2 )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 109,
                              "end_byte": 114,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 115,
                              "end_byte": 145,
                              "text": "( \"%ld%ld\" , & num1 , & num2 )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 115,
                                  "end_byte": 116,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 117,
                                  "end_byte": 125,
                                  "text": "\"%ld%ld\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 117,
                                      "end_byte": 118,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 118,
                                      "end_byte": 124,
                                      "text": "%ld%ld",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 124,
                                      "end_byte": 125,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 126,
                                  "end_byte": 127,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 128,
                                  "end_byte": 134,
                                  "text": "& num1",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 128,
                                      "end_byte": 129,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 130,
                                      "end_byte": 134,
                                      "text": "num1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 135,
                                  "end_byte": 136,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 137,
                                  "end_byte": 143,
                                  "text": "& num2",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 137,
                                      "end_byte": 138,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 139,
                                      "end_byte": 143,
                                      "text": "num2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 144,
                                  "end_byte": 145,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 146,
                          "end_byte": 147,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 148,
                      "end_byte": 173,
                      "text": "LCM = num1 * num2 * 1.0 ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 148,
                          "end_byte": 171,
                          "text": "LCM = num1 * num2 * 1.0",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 148,
                              "end_byte": 151,
                              "text": "LCM",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 152,
                              "end_byte": 153,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 154,
                              "end_byte": 171,
                              "text": "num1 * num2 * 1.0",
                              "children": [
                                {
                                  "type": "binary_expression",
                                  "start_byte": 154,
                                  "end_byte": 165,
                                  "text": "num1 * num2",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 154,
                                      "end_byte": 158,
                                      "text": "num1",
                                      "children": []
                                    },
                                    {
                                      "type": "*",
                                      "start_byte": 159,
                                      "end_byte": 160,
                                      "text": "*",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 161,
                                      "end_byte": 165,
                                      "text": "num2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "*",
                                  "start_byte": 166,
                                  "end_byte": 167,
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "start_byte": 168,
                                  "end_byte": 171,
                                  "text": "1.0",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 172,
                          "end_byte": 173,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "while_statement",
                      "start_byte": 174,
                      "end_byte": 244,
                      "text": "while ( num2 != 0 ) { tmp = num1 % num2 ; num1 = num2 ; num2 = tmp ; }",
                      "children": [
                        {
                          "type": "while",
                          "start_byte": 174,
                          "end_byte": 179,
                          "text": "while",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 180,
                          "end_byte": 193,
                          "text": "( num2 != 0 )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 180,
                              "end_byte": 181,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 182,
                              "end_byte": 191,
                              "text": "num2 != 0",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 182,
                                  "end_byte": 186,
                                  "text": "num2",
                                  "children": []
                                },
                                {
                                  "type": "!=",
                                  "start_byte": 187,
                                  "end_byte": 189,
                                  "text": "!=",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "start_byte": 190,
                                  "end_byte": 191,
                                  "text": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 192,
                              "end_byte": 193,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 194,
                          "end_byte": 244,
                          "text": "{ tmp = num1 % num2 ; num1 = num2 ; num2 = tmp ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 194,
                              "end_byte": 195,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 196,
                              "end_byte": 215,
                              "text": "tmp = num1 % num2 ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 196,
                                  "end_byte": 213,
                                  "text": "tmp = num1 % num2",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 196,
                                      "end_byte": 199,
                                      "text": "tmp",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 200,
                                      "end_byte": 201,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 202,
                                      "end_byte": 213,
                                      "text": "num1 % num2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 202,
                                          "end_byte": 206,
                                          "text": "num1",
                                          "children": []
                                        },
                                        {
                                          "type": "%",
                                          "start_byte": 207,
                                          "end_byte": 208,
                                          "text": "%",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 209,
                                          "end_byte": 213,
                                          "text": "num2",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 214,
                                  "end_byte": 215,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 216,
                              "end_byte": 229,
                              "text": "num1 = num2 ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 216,
                                  "end_byte": 227,
                                  "text": "num1 = num2",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 216,
                                      "end_byte": 220,
                                      "text": "num1",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 221,
                                      "end_byte": 222,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 223,
                                      "end_byte": 227,
                                      "text": "num2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 228,
                                  "end_byte": 229,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 230,
                              "end_byte": 242,
                              "text": "num2 = tmp ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 230,
                                  "end_byte": 240,
                                  "text": "num2 = tmp",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 230,
                                      "end_byte": 234,
                                      "text": "num2",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 235,
                                      "end_byte": 236,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 237,
                                      "end_byte": 240,
                                      "text": "tmp",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 241,
                                  "end_byte": 242,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 243,
                              "end_byte": 244,
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 245,
                      "end_byte": 257,
                      "text": "GCD = num1 ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 245,
                          "end_byte": 255,
                          "text": "GCD = num1",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 245,
                              "end_byte": 248,
                              "text": "GCD",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 249,
                              "end_byte": 250,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 251,
                              "end_byte": 255,
                              "text": "num1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 256,
                          "end_byte": 257,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 258,
                      "end_byte": 270,
                      "text": "LCM /= GCD ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 258,
                          "end_byte": 268,
                          "text": "LCM /= GCD",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 258,
                              "end_byte": 261,
                              "text": "LCM",
                              "children": []
                            },
                            {
                              "type": "/=",
                              "start_byte": 262,
                              "end_byte": 264,
                              "text": "/=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 265,
                              "end_byte": 268,
                              "text": "GCD",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 269,
                          "end_byte": 270,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 271,
                      "end_byte": 307,
                      "text": "printf ( \"%ld %ld\\n\" , GCD , LCM ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 271,
                          "end_byte": 305,
                          "text": "printf ( \"%ld %ld\\n\" , GCD , LCM )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 271,
                              "end_byte": 277,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 278,
                              "end_byte": 305,
                              "text": "( \"%ld %ld\\n\" , GCD , LCM )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 278,
                                  "end_byte": 279,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 280,
                                  "end_byte": 291,
                                  "text": "\"%ld %ld\\n\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 280,
                                      "end_byte": 281,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 281,
                                      "end_byte": 288,
                                      "text": "%ld %ld",
                                      "children": []
                                    },
                                    {
                                      "type": "escape_sequence",
                                      "start_byte": 288,
                                      "end_byte": 290,
                                      "text": "\\n",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 290,
                                      "end_byte": 291,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 292,
                                  "end_byte": 293,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 294,
                                  "end_byte": 297,
                                  "text": "GCD",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "start_byte": 298,
                                  "end_byte": 299,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 300,
                                  "end_byte": 303,
                                  "text": "LCM",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 304,
                                  "end_byte": 305,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 306,
                          "end_byte": 307,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 308,
                      "end_byte": 309,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 310,
              "end_byte": 320,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 310,
                  "end_byte": 316,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 317,
                  "end_byte": 318,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 319,
                  "end_byte": 320,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 321,
              "end_byte": 322,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}