{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 365,
  "text": "int main ( ) { int num , prevnum = - 1 , t , n , cursize = 1 , i ; long long count = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; cursize = 0 ; for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & num ) ; count ++ ; if ( num >= prevnum ) { count += cursize ; cursize ++ ; } else { cursize = 1 ; } prevnum = num ; } printf ( \"%lld\\n\" , count ) ; } }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 365,
      "text": "int main ( ) { int num , prevnum = - 1 , t , n , cursize = 1 , i ; long long count = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; cursize = 0 ; for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & num ) ; count ++ ; if ( num >= prevnum ) { count += cursize ; cursize ++ ; } else { cursize = 1 ; } prevnum = num ; } printf ( \"%lld\\n\" , count ) ; } }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 365,
          "text": "{ int num , prevnum = - 1 , t , n , cursize = 1 , i ; long long count = 0 ; scanf ( \"%d\" , & t ) ; while ( t -- ) { scanf ( \"%d\" , & n ) ; cursize = 0 ; for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & num ) ; count ++ ; if ( num >= prevnum ) { count += cursize ; cursize ++ ; } else { cursize = 1 ; } prevnum = num ; } printf ( \"%lld\\n\" , count ) ; } }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 66,
              "text": "int num , prevnum = - 1 , t , n , cursize = 1 , i ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 15,
                  "end_byte": 18,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 19,
                  "end_byte": 22,
                  "text": "num",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 23,
                  "end_byte": 24,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "init_declarator",
                  "start_byte": 25,
                  "end_byte": 38,
                  "text": "prevnum = - 1",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 25,
                      "end_byte": 32,
                      "text": "prevnum",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 33,
                      "end_byte": 34,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "unary_expression",
                      "start_byte": 35,
                      "end_byte": 38,
                      "text": "- 1",
                      "children": [
                        {
                          "type": "-",
                          "start_byte": 35,
                          "end_byte": 36,
                          "text": "-",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "start_byte": 37,
                          "end_byte": 38,
                          "text": "1",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ",",
                  "start_byte": 39,
                  "end_byte": 40,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 41,
                  "end_byte": 42,
                  "text": "t",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 43,
                  "end_byte": 44,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 45,
                  "end_byte": 46,
                  "text": "n",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 47,
                  "end_byte": 48,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "init_declarator",
                  "start_byte": 49,
                  "end_byte": 60,
                  "text": "cursize = 1",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 49,
                      "end_byte": 56,
                      "text": "cursize",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 57,
                      "end_byte": 58,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "number_literal",
                      "start_byte": 59,
                      "end_byte": 60,
                      "text": "1",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "start_byte": 61,
                  "end_byte": 62,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 63,
                  "end_byte": 64,
                  "text": "i",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 65,
                  "end_byte": 66,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "declaration",
              "start_byte": 67,
              "end_byte": 88,
              "text": "long long count = 0 ;",
              "children": [
                {
                  "type": "sized_type_specifier",
                  "start_byte": 67,
                  "end_byte": 76,
                  "text": "long long",
                  "children": [
                    {
                      "type": "long",
                      "start_byte": 67,
                      "end_byte": 71,
                      "text": "long",
                      "children": []
                    },
                    {
                      "type": "long",
                      "start_byte": 72,
                      "end_byte": 76,
                      "text": "long",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "init_declarator",
                  "start_byte": 77,
                  "end_byte": 86,
                  "text": "count = 0",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 77,
                      "end_byte": 82,
                      "text": "count",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 83,
                      "end_byte": 84,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "number_literal",
                      "start_byte": 85,
                      "end_byte": 86,
                      "text": "0",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 87,
                  "end_byte": 88,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 89,
              "end_byte": 111,
              "text": "scanf ( \"%d\" , & t ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 89,
                  "end_byte": 109,
                  "text": "scanf ( \"%d\" , & t )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 89,
                      "end_byte": 94,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 95,
                      "end_byte": 109,
                      "text": "( \"%d\" , & t )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 95,
                          "end_byte": 96,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 97,
                          "end_byte": 101,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 97,
                              "end_byte": 98,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 98,
                              "end_byte": 100,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 100,
                              "end_byte": 101,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 102,
                          "end_byte": 103,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 104,
                          "end_byte": 107,
                          "text": "& t",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 104,
                              "end_byte": 105,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 106,
                              "end_byte": 107,
                              "text": "t",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 108,
                          "end_byte": 109,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 110,
                  "end_byte": 111,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 112,
              "end_byte": 363,
              "text": "while ( t -- ) { scanf ( \"%d\" , & n ) ; cursize = 0 ; for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & num ) ; count ++ ; if ( num >= prevnum ) { count += cursize ; cursize ++ ; } else { cursize = 1 ; } prevnum = num ; } printf ( \"%lld\\n\" , count ) ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 112,
                  "end_byte": 117,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 118,
                  "end_byte": 126,
                  "text": "( t -- )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 118,
                      "end_byte": 119,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "update_expression",
                      "start_byte": 120,
                      "end_byte": 124,
                      "text": "t --",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 120,
                          "end_byte": 121,
                          "text": "t",
                          "children": []
                        },
                        {
                          "type": "--",
                          "start_byte": 122,
                          "end_byte": 124,
                          "text": "--",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 125,
                      "end_byte": 126,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 127,
                  "end_byte": 363,
                  "text": "{ scanf ( \"%d\" , & n ) ; cursize = 0 ; for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & num ) ; count ++ ; if ( num >= prevnum ) { count += cursize ; cursize ++ ; } else { cursize = 1 ; } prevnum = num ; } printf ( \"%lld\\n\" , count ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 127,
                      "end_byte": 128,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 129,
                      "end_byte": 151,
                      "text": "scanf ( \"%d\" , & n ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 129,
                          "end_byte": 149,
                          "text": "scanf ( \"%d\" , & n )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 129,
                              "end_byte": 134,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 135,
                              "end_byte": 149,
                              "text": "( \"%d\" , & n )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 135,
                                  "end_byte": 136,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 137,
                                  "end_byte": 141,
                                  "text": "\"%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 137,
                                      "end_byte": 138,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 138,
                                      "end_byte": 140,
                                      "text": "%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 140,
                                      "end_byte": 141,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 142,
                                  "end_byte": 143,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 144,
                                  "end_byte": 147,
                                  "text": "& n",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 144,
                                      "end_byte": 145,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 146,
                                      "end_byte": 147,
                                      "text": "n",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 148,
                                  "end_byte": 149,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 150,
                          "end_byte": 151,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 152,
                      "end_byte": 165,
                      "text": "cursize = 0 ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 152,
                          "end_byte": 163,
                          "text": "cursize = 0",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 152,
                              "end_byte": 159,
                              "text": "cursize",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 160,
                              "end_byte": 161,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "start_byte": 162,
                              "end_byte": 163,
                              "text": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 164,
                          "end_byte": 165,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "for_statement",
                      "start_byte": 166,
                      "end_byte": 331,
                      "text": "for ( i = 0 ; i < n ; ++ i ) { scanf ( \"%d\" , & num ) ; count ++ ; if ( num >= prevnum ) { count += cursize ; cursize ++ ; } else { cursize = 1 ; } prevnum = num ; }",
                      "children": [
                        {
                          "type": "for",
                          "start_byte": 166,
                          "end_byte": 169,
                          "text": "for",
                          "children": []
                        },
                        {
                          "type": "(",
                          "start_byte": 170,
                          "end_byte": 171,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "assignment_expression",
                          "start_byte": 172,
                          "end_byte": 177,
                          "text": "i = 0",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 172,
                              "end_byte": 173,
                              "text": "i",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 174,
                              "end_byte": 175,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "start_byte": 176,
                              "end_byte": 177,
                              "text": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 178,
                          "end_byte": 179,
                          "text": ";",
                          "children": []
                        },
                        {
                          "type": "binary_expression",
                          "start_byte": 180,
                          "end_byte": 185,
                          "text": "i < n",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 180,
                              "end_byte": 181,
                              "text": "i",
                              "children": []
                            },
                            {
                              "type": "<",
                              "start_byte": 182,
                              "end_byte": 183,
                              "text": "<",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 184,
                              "end_byte": 185,
                              "text": "n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 186,
                          "end_byte": 187,
                          "text": ";",
                          "children": []
                        },
                        {
                          "type": "update_expression",
                          "start_byte": 188,
                          "end_byte": 192,
                          "text": "++ i",
                          "children": [
                            {
                              "type": "++",
                              "start_byte": 188,
                              "end_byte": 190,
                              "text": "++",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 191,
                              "end_byte": 192,
                              "text": "i",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 193,
                          "end_byte": 194,
                          "text": ")",
                          "children": []
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 195,
                          "end_byte": 331,
                          "text": "{ scanf ( \"%d\" , & num ) ; count ++ ; if ( num >= prevnum ) { count += cursize ; cursize ++ ; } else { cursize = 1 ; } prevnum = num ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 195,
                              "end_byte": 196,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 197,
                              "end_byte": 221,
                              "text": "scanf ( \"%d\" , & num ) ;",
                              "children": [
                                {
                                  "type": "call_expression",
                                  "start_byte": 197,
                                  "end_byte": 219,
                                  "text": "scanf ( \"%d\" , & num )",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 197,
                                      "end_byte": 202,
                                      "text": "scanf",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "start_byte": 203,
                                      "end_byte": 219,
                                      "text": "( \"%d\" , & num )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start_byte": 203,
                                          "end_byte": 204,
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "string_literal",
                                          "start_byte": 205,
                                          "end_byte": 209,
                                          "text": "\"%d\"",
                                          "children": [
                                            {
                                              "type": "\"",
                                              "start_byte": 205,
                                              "end_byte": 206,
                                              "text": "\"",
                                              "children": []
                                            },
                                            {
                                              "type": "string_content",
                                              "start_byte": 206,
                                              "end_byte": 208,
                                              "text": "%d",
                                              "children": []
                                            },
                                            {
                                              "type": "\"",
                                              "start_byte": 208,
                                              "end_byte": 209,
                                              "text": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "start_byte": 210,
                                          "end_byte": 211,
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "pointer_expression",
                                          "start_byte": 212,
                                          "end_byte": 217,
                                          "text": "& num",
                                          "children": [
                                            {
                                              "type": "&",
                                              "start_byte": 212,
                                              "end_byte": 213,
                                              "text": "&",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "start_byte": 214,
                                              "end_byte": 217,
                                              "text": "num",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start_byte": 218,
                                          "end_byte": 219,
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 220,
                                  "end_byte": 221,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 222,
                              "end_byte": 232,
                              "text": "count ++ ;",
                              "children": [
                                {
                                  "type": "update_expression",
                                  "start_byte": 222,
                                  "end_byte": 230,
                                  "text": "count ++",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 222,
                                      "end_byte": 227,
                                      "text": "count",
                                      "children": []
                                    },
                                    {
                                      "type": "++",
                                      "start_byte": 228,
                                      "end_byte": 230,
                                      "text": "++",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 231,
                                  "end_byte": 232,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "if_statement",
                              "start_byte": 233,
                              "end_byte": 313,
                              "text": "if ( num >= prevnum ) { count += cursize ; cursize ++ ; } else { cursize = 1 ; }",
                              "children": [
                                {
                                  "type": "if",
                                  "start_byte": 233,
                                  "end_byte": 235,
                                  "text": "if",
                                  "children": []
                                },
                                {
                                  "type": "condition_clause",
                                  "start_byte": 236,
                                  "end_byte": 254,
                                  "text": "( num >= prevnum )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 236,
                                      "end_byte": 237,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 238,
                                      "end_byte": 252,
                                      "text": "num >= prevnum",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 238,
                                          "end_byte": 241,
                                          "text": "num",
                                          "children": []
                                        },
                                        {
                                          "type": ">=",
                                          "start_byte": 242,
                                          "end_byte": 244,
                                          "text": ">=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 245,
                                          "end_byte": 252,
                                          "text": "prevnum",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 253,
                                      "end_byte": 254,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "compound_statement",
                                  "start_byte": 255,
                                  "end_byte": 290,
                                  "text": "{ count += cursize ; cursize ++ ; }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "start_byte": 255,
                                      "end_byte": 256,
                                      "text": "{",
                                      "children": []
                                    },
                                    {
                                      "type": "expression_statement",
                                      "start_byte": 257,
                                      "end_byte": 275,
                                      "text": "count += cursize ;",
                                      "children": [
                                        {
                                          "type": "assignment_expression",
                                          "start_byte": 257,
                                          "end_byte": 273,
                                          "text": "count += cursize",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 257,
                                              "end_byte": 262,
                                              "text": "count",
                                              "children": []
                                            },
                                            {
                                              "type": "+=",
                                              "start_byte": 263,
                                              "end_byte": 265,
                                              "text": "+=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "start_byte": 266,
                                              "end_byte": 273,
                                              "text": "cursize",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "start_byte": 274,
                                          "end_byte": 275,
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "expression_statement",
                                      "start_byte": 276,
                                      "end_byte": 288,
                                      "text": "cursize ++ ;",
                                      "children": [
                                        {
                                          "type": "update_expression",
                                          "start_byte": 276,
                                          "end_byte": 286,
                                          "text": "cursize ++",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 276,
                                              "end_byte": 283,
                                              "text": "cursize",
                                              "children": []
                                            },
                                            {
                                              "type": "++",
                                              "start_byte": 284,
                                              "end_byte": 286,
                                              "text": "++",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "start_byte": 287,
                                          "end_byte": 288,
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "start_byte": 289,
                                      "end_byte": 290,
                                      "text": "}",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "else_clause",
                                  "start_byte": 291,
                                  "end_byte": 313,
                                  "text": "else { cursize = 1 ; }",
                                  "children": [
                                    {
                                      "type": "else",
                                      "start_byte": 291,
                                      "end_byte": 295,
                                      "text": "else",
                                      "children": []
                                    },
                                    {
                                      "type": "compound_statement",
                                      "start_byte": 296,
                                      "end_byte": 313,
                                      "text": "{ cursize = 1 ; }",
                                      "children": [
                                        {
                                          "type": "{",
                                          "start_byte": 296,
                                          "end_byte": 297,
                                          "text": "{",
                                          "children": []
                                        },
                                        {
                                          "type": "expression_statement",
                                          "start_byte": 298,
                                          "end_byte": 311,
                                          "text": "cursize = 1 ;",
                                          "children": [
                                            {
                                              "type": "assignment_expression",
                                              "start_byte": 298,
                                              "end_byte": 309,
                                              "text": "cursize = 1",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 298,
                                                  "end_byte": 305,
                                                  "text": "cursize",
                                                  "children": []
                                                },
                                                {
                                                  "type": "=",
                                                  "start_byte": 306,
                                                  "end_byte": 307,
                                                  "text": "=",
                                                  "children": []
                                                },
                                                {
                                                  "type": "number_literal",
                                                  "start_byte": 308,
                                                  "end_byte": 309,
                                                  "text": "1",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": ";",
                                              "start_byte": 310,
                                              "end_byte": 311,
                                              "text": ";",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "}",
                                          "start_byte": 312,
                                          "end_byte": 313,
                                          "text": "}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 314,
                              "end_byte": 329,
                              "text": "prevnum = num ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 314,
                                  "end_byte": 327,
                                  "text": "prevnum = num",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 314,
                                      "end_byte": 321,
                                      "text": "prevnum",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 322,
                                      "end_byte": 323,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 324,
                                      "end_byte": 327,
                                      "text": "num",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 328,
                                  "end_byte": 329,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 330,
                              "end_byte": 331,
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 332,
                      "end_byte": 361,
                      "text": "printf ( \"%lld\\n\" , count ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 332,
                          "end_byte": 359,
                          "text": "printf ( \"%lld\\n\" , count )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 332,
                              "end_byte": 338,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 339,
                              "end_byte": 359,
                              "text": "( \"%lld\\n\" , count )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 339,
                                  "end_byte": 340,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 341,
                                  "end_byte": 349,
                                  "text": "\"%lld\\n\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 341,
                                      "end_byte": 342,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 342,
                                      "end_byte": 346,
                                      "text": "%lld",
                                      "children": []
                                    },
                                    {
                                      "type": "escape_sequence",
                                      "start_byte": 346,
                                      "end_byte": 348,
                                      "text": "\\n",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 348,
                                      "end_byte": 349,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 350,
                                  "end_byte": 351,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 352,
                                  "end_byte": 357,
                                  "text": "count",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 358,
                                  "end_byte": 359,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 360,
                          "end_byte": 361,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 362,
                      "end_byte": 363,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 364,
              "end_byte": 365,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}