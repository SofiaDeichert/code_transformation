int n ; int max ( int n1 , int n2 ) { if ( n1 > n2 ) return n1 ; return n2 ; } int solve ( int temp [ ] [ n + 1 ] , int a [ ] [ n ] , int i , int j , int n ) { if ( i >= n ) return 0 ; else { int t1 , t2 ; if ( temp [ i + 1 ] [ j ] == - 1 ) { t1 = solve ( temp , a , i + 1 , j , n ) ; temp [ i + 1 ] [ j ] = t1 ; } else { t1 = temp [ i + 1 ] [ j ] ; } if ( temp [ i + 1 ] [ j + 1 ] == - 1 ) { t2 = solve ( temp , a , i + 1 , j + 1 , n ) ; temp [ i + 1 ] [ j + 1 ] = t2 ; } else { t2 = temp [ i + 1 ] [ j + 1 ] ; } return max ( t1 , t2 ) + a [ i ] [ j ] ; } } int main ( ) { int t ; scanf ( "%d" , & t ) ; while ( t -- ) { extern int n ; scanf ( "%d" , & n ) ; int i , j ; int a [ n ] [ n ] ; int temp [ n + 1 ] [ n + 1 ] ; for ( i = 0 ; i < n ; ++ i ) { for ( j = 0 ; j <= i ; ++ j ) { scanf ( "%d" , & a [ i ] [ j ] ) ; temp [ i ] [ j ] = - 1 ; } } for ( j = 0 ; j <= n ; ++ j ) { temp [ n ] [ j ] = 0 ; } printf ( "%d\n" , solve ( temp , a , 0 , 0 , n ) ) ; } return 0 ; }