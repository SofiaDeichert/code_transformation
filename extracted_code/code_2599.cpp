typedef struct { int value ; int maxsum ; } element ; element * * * e ; void findMaxSumElement ( int rowindex , int colindex , int noofrows , int testno ) { int val , maxval1 , maxval2 ; if ( rowindex == ( noofrows - 1 ) ) { e [ testno ] [ rowindex ] [ colindex ] . maxsum = e [ testno ] [ rowindex ] [ colindex ] . value ; } else { val = e [ testno ] [ rowindex ] [ colindex ] . value ; maxval1 = e [ testno ] [ rowindex + 1 ] [ colindex ] . maxsum + val ; maxval2 = e [ testno ] [ rowindex + 1 ] [ colindex + 1 ] . maxsum + val ; e [ testno ] [ rowindex ] [ colindex ] . maxsum = ( maxval1 > maxval2 ) ? maxval1 : maxval2 ; } } void findMaxSum ( int noofrows , int testno ) { int j , k ; for ( j = noofrows - 1 ; j >= 0 ; j -- ) { for ( k = j ; k >= 0 ; k -- ) { findMaxSumElement ( j , k , noofrows , testno ) ; } } } element * * * e ; int main ( ) { int * out , nooftests , i , j , k = 1 , l , noofrows ; scanf ( "%d" , & nooftests ) ; out = ( int * ) malloc ( ( nooftests ) * sizeof ( int ) ) ; e = ( element * * * ) malloc ( ( nooftests ) * sizeof ( element * * ) ) ; for ( i = 0 ; i < nooftests ; i ++ ) { scanf ( "%d" , & noofrows ) ; e [ i ] = ( element * * ) malloc ( ( noofrows ) * sizeof ( element * ) ) ; for ( j = 0 ; j < noofrows ; j ++ ) { e [ i ] [ j ] = ( element * ) malloc ( k * sizeof ( element ) ) ; for ( l = 0 ; l < k ; l ++ ) { scanf ( "%d" , & e [ i ] [ j ] [ l ] . value ) ; e [ i ] [ j ] [ l ] . maxsum = 0 ; } k ++ ; } k = 1 ; findMaxSum ( noofrows , i ) ; out [ i ] = e [ i ] [ 0 ] [ 0 ] . maxsum ; } for ( i = 0 ; i < nooftests ; i ++ ) { printf ( "%d\n" , out [ i ] ) ; } return 0 ; }