int * * j , arr [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a >= b ) return a ; return b ; } int maxpath ( int k , int i , int v ) { int sum = 0 ; if ( i > k - 1 ) return 0 ; else if ( arr [ i ] [ v ] != 0 ) return arr [ i ] [ v ] ; else sum = j [ i ] [ v ] + max ( maxpath ( k , i + 1 , v ) , maxpath ( k , i + 1 , v + 1 ) ) ; arr [ i ] [ v ] = sum ; return sum ; } int main ( ) { int g , h , n , i , k , l , a , * b , c = 0 ; scanf ( "%d" , & n ) ; b = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & k ) ; j = ( int * * ) malloc ( k * sizeof ( int * ) ) ; for ( l = 0 ; l < k ; l ++ ) { j [ l ] = ( int * ) malloc ( ( l + 1 ) * sizeof ( int ) ) ; for ( a = 0 ; a <= l ; a ++ ) scanf ( "%d" , & j [ l ] [ a ] ) ; } for ( g = 0 ; g < 100 ; g ++ ) { for ( h = 0 ; h < 100 ; h ++ ) arr [ g ] [ h ] = 0 ; } b [ c ++ ] = maxpath ( k , 0 , 0 ) ; for ( a = 0 ; a < n ; a ++ ) free ( ( void * ) j [ a ] ) ; free ( ( void * ) j ) ; } printf ( "\n" ) ; for ( i = 0 ; i < n ; i ++ ) printf ( "%d\n" , b [ i ] ) ; free ( ( void * ) b ) ; return 0 ; }