{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 342,
  "text": "int gcd ( int num1 , int num2 ) { if ( num2 = 0 ) { return num1 ; } else { gcd ( num2 , num1 % num2 ) ; } } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int num1 , num2 , hcf , lcm ; scanf ( \"%d%d\" , & num1 , & num2 ) ; hcf = gcd ( num1 , num2 ) ; lcm = ( num1 * num2 ) / hcf ; printf ( \"%d%d\" , gcd , lcm ) ; } return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 107,
      "text": "int gcd ( int num1 , int num2 ) { if ( num2 = 0 ) { return num1 ; } else { gcd ( num2 , num1 % num2 ) ; } }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 31,
          "text": "gcd ( int num1 , int num2 )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 7,
              "text": "gcd",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 8,
              "end_byte": 31,
              "text": "( int num1 , int num2 )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 8,
                  "end_byte": 9,
                  "text": "(",
                  "children": []
                },
                {
                  "type": "parameter_declaration",
                  "start_byte": 10,
                  "end_byte": 18,
                  "text": "int num1",
                  "children": [
                    {
                      "type": "primitive_type",
                      "start_byte": 10,
                      "end_byte": 13,
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 14,
                      "end_byte": 18,
                      "text": "num1",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "start_byte": 19,
                  "end_byte": 20,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "parameter_declaration",
                  "start_byte": 21,
                  "end_byte": 29,
                  "text": "int num2",
                  "children": [
                    {
                      "type": "primitive_type",
                      "start_byte": 21,
                      "end_byte": 24,
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 25,
                      "end_byte": 29,
                      "text": "num2",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "start_byte": 30,
                  "end_byte": 31,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 32,
          "end_byte": 107,
          "text": "{ if ( num2 = 0 ) { return num1 ; } else { gcd ( num2 , num1 % num2 ) ; } }",
          "children": [
            {
              "type": "{",
              "start_byte": 32,
              "end_byte": 33,
              "text": "{",
              "children": []
            },
            {
              "type": "if_statement",
              "start_byte": 34,
              "end_byte": 105,
              "text": "if ( num2 = 0 ) { return num1 ; } else { gcd ( num2 , num1 % num2 ) ; }",
              "children": [
                {
                  "type": "if",
                  "start_byte": 34,
                  "end_byte": 36,
                  "text": "if",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 37,
                  "end_byte": 49,
                  "text": "( num2 = 0 )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 37,
                      "end_byte": 38,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "assignment_expression",
                      "start_byte": 39,
                      "end_byte": 47,
                      "text": "num2 = 0",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 39,
                          "end_byte": 43,
                          "text": "num2",
                          "children": []
                        },
                        {
                          "type": "=",
                          "start_byte": 44,
                          "end_byte": 45,
                          "text": "=",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "start_byte": 46,
                          "end_byte": 47,
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 48,
                      "end_byte": 49,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 50,
                  "end_byte": 67,
                  "text": "{ return num1 ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 50,
                      "end_byte": 51,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "return_statement",
                      "start_byte": 52,
                      "end_byte": 65,
                      "text": "return num1 ;",
                      "children": [
                        {
                          "type": "return",
                          "start_byte": 52,
                          "end_byte": 58,
                          "text": "return",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 59,
                          "end_byte": 63,
                          "text": "num1",
                          "children": []
                        },
                        {
                          "type": ";",
                          "start_byte": 64,
                          "end_byte": 65,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 66,
                      "end_byte": 67,
                      "text": "}",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start_byte": 68,
                  "end_byte": 105,
                  "text": "else { gcd ( num2 , num1 % num2 ) ; }",
                  "children": [
                    {
                      "type": "else",
                      "start_byte": 68,
                      "end_byte": 72,
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": "compound_statement",
                      "start_byte": 73,
                      "end_byte": 105,
                      "text": "{ gcd ( num2 , num1 % num2 ) ; }",
                      "children": [
                        {
                          "type": "{",
                          "start_byte": 73,
                          "end_byte": 74,
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "expression_statement",
                          "start_byte": 75,
                          "end_byte": 103,
                          "text": "gcd ( num2 , num1 % num2 ) ;",
                          "children": [
                            {
                              "type": "call_expression",
                              "start_byte": 75,
                              "end_byte": 101,
                              "text": "gcd ( num2 , num1 % num2 )",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 75,
                                  "end_byte": 78,
                                  "text": "gcd",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "start_byte": 79,
                                  "end_byte": 101,
                                  "text": "( num2 , num1 % num2 )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 79,
                                      "end_byte": 80,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 81,
                                      "end_byte": 85,
                                      "text": "num2",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "start_byte": 86,
                                      "end_byte": 87,
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 88,
                                      "end_byte": 99,
                                      "text": "num1 % num2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 88,
                                          "end_byte": 92,
                                          "text": "num1",
                                          "children": []
                                        },
                                        {
                                          "type": "%",
                                          "start_byte": 93,
                                          "end_byte": 94,
                                          "text": "%",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 95,
                                          "end_byte": 99,
                                          "text": "num2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 100,
                                      "end_byte": 101,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "start_byte": 102,
                              "end_byte": 103,
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "start_byte": 104,
                          "end_byte": 105,
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 106,
              "end_byte": 107,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "start_byte": 108,
      "end_byte": 342,
      "text": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int num1 , num2 , hcf , lcm ; scanf ( \"%d%d\" , & num1 , & num2 ) ; hcf = gcd ( num1 , num2 ) ; lcm = ( num1 * num2 ) / hcf ; printf ( \"%d%d\" , gcd , lcm ) ; } return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 108,
          "end_byte": 111,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 112,
          "end_byte": 120,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 112,
              "end_byte": 116,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 117,
              "end_byte": 120,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 117,
                  "end_byte": 118,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 119,
                  "end_byte": 120,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 121,
          "end_byte": 342,
          "text": "{ int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int num1 , num2 , hcf , lcm ; scanf ( \"%d%d\" , & num1 , & num2 ) ; hcf = gcd ( num1 , num2 ) ; lcm = ( num1 * num2 ) / hcf ; printf ( \"%d%d\" , gcd , lcm ) ; } return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 121,
              "end_byte": 122,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 123,
              "end_byte": 130,
              "text": "int t ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 123,
                  "end_byte": 126,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 127,
                  "end_byte": 128,
                  "text": "t",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 129,
                  "end_byte": 130,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 131,
              "end_byte": 153,
              "text": "scanf ( \"%d\" , & t ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 131,
                  "end_byte": 151,
                  "text": "scanf ( \"%d\" , & t )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 131,
                      "end_byte": 136,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 137,
                      "end_byte": 151,
                      "text": "( \"%d\" , & t )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 137,
                          "end_byte": 138,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 139,
                          "end_byte": 143,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 139,
                              "end_byte": 140,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 140,
                              "end_byte": 142,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 142,
                              "end_byte": 143,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 144,
                          "end_byte": 145,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 146,
                          "end_byte": 149,
                          "text": "& t",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 146,
                              "end_byte": 147,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 148,
                              "end_byte": 149,
                              "text": "t",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 150,
                          "end_byte": 151,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 152,
                  "end_byte": 153,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 154,
              "end_byte": 329,
              "text": "while ( t -- ) { int num1 , num2 , hcf , lcm ; scanf ( \"%d%d\" , & num1 , & num2 ) ; hcf = gcd ( num1 , num2 ) ; lcm = ( num1 * num2 ) / hcf ; printf ( \"%d%d\" , gcd , lcm ) ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 154,
                  "end_byte": 159,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 160,
                  "end_byte": 168,
                  "text": "( t -- )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 160,
                      "end_byte": 161,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "update_expression",
                      "start_byte": 162,
                      "end_byte": 166,
                      "text": "t --",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 162,
                          "end_byte": 163,
                          "text": "t",
                          "children": []
                        },
                        {
                          "type": "--",
                          "start_byte": 164,
                          "end_byte": 166,
                          "text": "--",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 167,
                      "end_byte": 168,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 169,
                  "end_byte": 329,
                  "text": "{ int num1 , num2 , hcf , lcm ; scanf ( \"%d%d\" , & num1 , & num2 ) ; hcf = gcd ( num1 , num2 ) ; lcm = ( num1 * num2 ) / hcf ; printf ( \"%d%d\" , gcd , lcm ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 169,
                      "end_byte": 170,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "declaration",
                      "start_byte": 171,
                      "end_byte": 200,
                      "text": "int num1 , num2 , hcf , lcm ;",
                      "children": [
                        {
                          "type": "primitive_type",
                          "start_byte": 171,
                          "end_byte": 174,
                          "text": "int",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 175,
                          "end_byte": 179,
                          "text": "num1",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 180,
                          "end_byte": 181,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 182,
                          "end_byte": 186,
                          "text": "num2",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 187,
                          "end_byte": 188,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 189,
                          "end_byte": 192,
                          "text": "hcf",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 193,
                          "end_byte": 194,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 195,
                          "end_byte": 198,
                          "text": "lcm",
                          "children": []
                        },
                        {
                          "type": ";",
                          "start_byte": 199,
                          "end_byte": 200,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 201,
                      "end_byte": 237,
                      "text": "scanf ( \"%d%d\" , & num1 , & num2 ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 201,
                          "end_byte": 235,
                          "text": "scanf ( \"%d%d\" , & num1 , & num2 )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 201,
                              "end_byte": 206,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 207,
                              "end_byte": 235,
                              "text": "( \"%d%d\" , & num1 , & num2 )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 207,
                                  "end_byte": 208,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 209,
                                  "end_byte": 215,
                                  "text": "\"%d%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 209,
                                      "end_byte": 210,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 210,
                                      "end_byte": 214,
                                      "text": "%d%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 214,
                                      "end_byte": 215,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 216,
                                  "end_byte": 217,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 218,
                                  "end_byte": 224,
                                  "text": "& num1",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 218,
                                      "end_byte": 219,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 220,
                                      "end_byte": 224,
                                      "text": "num1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 225,
                                  "end_byte": 226,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 227,
                                  "end_byte": 233,
                                  "text": "& num2",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 227,
                                      "end_byte": 228,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 229,
                                      "end_byte": 233,
                                      "text": "num2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 234,
                                  "end_byte": 235,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 236,
                          "end_byte": 237,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 238,
                      "end_byte": 265,
                      "text": "hcf = gcd ( num1 , num2 ) ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 238,
                          "end_byte": 263,
                          "text": "hcf = gcd ( num1 , num2 )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 238,
                              "end_byte": 241,
                              "text": "hcf",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 242,
                              "end_byte": 243,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call_expression",
                              "start_byte": 244,
                              "end_byte": 263,
                              "text": "gcd ( num1 , num2 )",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 244,
                                  "end_byte": 247,
                                  "text": "gcd",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "start_byte": 248,
                                  "end_byte": 263,
                                  "text": "( num1 , num2 )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 248,
                                      "end_byte": 249,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 250,
                                      "end_byte": 254,
                                      "text": "num1",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "start_byte": 255,
                                      "end_byte": 256,
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 257,
                                      "end_byte": 261,
                                      "text": "num2",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 262,
                                      "end_byte": 263,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 264,
                          "end_byte": 265,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 266,
                      "end_byte": 295,
                      "text": "lcm = ( num1 * num2 ) / hcf ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 266,
                          "end_byte": 293,
                          "text": "lcm = ( num1 * num2 ) / hcf",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 266,
                              "end_byte": 269,
                              "text": "lcm",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 270,
                              "end_byte": 271,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 272,
                              "end_byte": 293,
                              "text": "( num1 * num2 ) / hcf",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "start_byte": 272,
                                  "end_byte": 287,
                                  "text": "( num1 * num2 )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 272,
                                      "end_byte": 273,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 274,
                                      "end_byte": 285,
                                      "text": "num1 * num2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 274,
                                          "end_byte": 278,
                                          "text": "num1",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "start_byte": 279,
                                          "end_byte": 280,
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 281,
                                          "end_byte": 285,
                                          "text": "num2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 286,
                                      "end_byte": 287,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "/",
                                  "start_byte": 288,
                                  "end_byte": 289,
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 290,
                                  "end_byte": 293,
                                  "text": "hcf",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 294,
                          "end_byte": 295,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 296,
                      "end_byte": 327,
                      "text": "printf ( \"%d%d\" , gcd , lcm ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 296,
                          "end_byte": 325,
                          "text": "printf ( \"%d%d\" , gcd , lcm )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 296,
                              "end_byte": 302,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 303,
                              "end_byte": 325,
                              "text": "( \"%d%d\" , gcd , lcm )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 303,
                                  "end_byte": 304,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 305,
                                  "end_byte": 311,
                                  "text": "\"%d%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 305,
                                      "end_byte": 306,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 306,
                                      "end_byte": 310,
                                      "text": "%d%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 310,
                                      "end_byte": 311,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 312,
                                  "end_byte": 313,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 314,
                                  "end_byte": 317,
                                  "text": "gcd",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "start_byte": 318,
                                  "end_byte": 319,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 320,
                                  "end_byte": 323,
                                  "text": "lcm",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 324,
                                  "end_byte": 325,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 326,
                          "end_byte": 327,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 328,
                      "end_byte": 329,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 330,
              "end_byte": 340,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 330,
                  "end_byte": 336,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 337,
                  "end_byte": 338,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 339,
                  "end_byte": 340,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 341,
              "end_byte": 342,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}