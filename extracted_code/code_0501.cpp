int maxLen ( int * mem , int t ) { int * cp = ( int * ) malloc ( sizeof ( int ) * t * t ) ; int i , j ; int max ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { cp [ i * t + j ] = mem [ i * t + j ] ; } } for ( i = 1 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { cp [ i * t + j ] += cp [ ( i - 1 ) * t + j ] ; } else if ( j == i ) { cp [ i * t + j ] += cp [ ( i - 1 ) * t + j - 1 ] ; } else { cp [ i * t + j ] += ( cp [ ( i - 1 ) * t + j - 1 ] > cp [ ( i - 1 ) * t + j ] ) ? cp [ ( i - 1 ) * t + j - 1 ] : cp [ ( i - 1 ) * t + j ] ; } } } i = t - 1 ; max = cp [ i * t ] ; for ( j = 1 ; j < t ; j ++ ) { if ( cp [ i * t + j ] > max ) { max = cp [ i * t + j ] ; } } return max ; } int main ( ) { int n , t ; int i , j ; int * mem ; int len = 0 ; scanf ( "%d" , & n ) ; while ( n -- ) { scanf ( "%d" , & t ) ; mem = ( int * ) malloc ( sizeof ( int ) * t * t ) ; for ( i = 0 ; i < t ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , mem + i * t + j ) ; } } printf ( "%d\n" , maxLen ( mem , t ) ) ; free ( mem ) ; } return 0 ; }