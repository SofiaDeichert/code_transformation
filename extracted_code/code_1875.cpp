int max ( int a , int b ) { return ( a < b ) ? b : a ; } int findMaxPath ( int * * array , int i , int j , int n , int * * visited ) { if ( i == n ) { return 0 ; } if ( visited [ i ] [ j ] ) { return visited [ i ] [ j ] ; } int t1 = findMaxPath ( array , i + 1 , j + 1 , n , visited ) ; int t2 = findMaxPath ( array , i + 1 , j , n , visited ) ; int t = array [ i ] [ j ] + max ( t1 , t2 ) ; visited [ i ] [ j ] = t ; return t ; } int main ( ) { int test , n , * * array ; scanf ( "%d" , & test ) ; while ( test -- ) { scanf ( "%d" , & n ) ; int * * visited ; array = ( int * * ) malloc ( sizeof ( int * ) * n ) ; int i , j , k = 1 ; for ( i = 0 ; i < n ; i ++ ) { array [ i ] = ( int * ) malloc ( sizeof ( int ) * k ) ; k ++ ; } k = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { scanf ( "%d" , & array [ i ] [ j ] ) ; } k ++ ; } visited = ( int * * ) malloc ( sizeof ( int * ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { visited [ i ] = ( int * ) malloc ( sizeof ( int ) * k ) ; k ++ ; } k = 0 ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= k ; j ++ ) { visited [ i ] [ j ] = 0 ; } k ++ ; } int m = findMaxPath ( array , 0 , 0 , n , visited ) ; printf ( "%d\n" , m ) ; } return 0 ; }