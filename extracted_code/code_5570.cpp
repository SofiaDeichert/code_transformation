typedef struct triangle { int n_rows ; int * * content ; } Triangle ; int max ( int , int ) ; void inicializar ( Triangle * ) ; Triangle subTriangle ( Triangle , int , int ) ; int max_path ( Triangle ) ; int max ( int a , int b ) { if ( b > a ) return b ; else return a ; } void inicializar ( Triangle * T ) { int i ; int j ; scanf ( "%d" , & ( T -> n_rows ) ) ; T -> content = ( int * * ) malloc ( T -> n_rows * sizeof ( int * ) ) ; for ( i = 0 ; i < T -> n_rows ; i ++ ) { T -> content [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & ( T -> content [ i ] [ j ] ) ) ; } } } Triangle subTriangle ( Triangle T , int x , int y ) { Triangle subT ; subT . n_rows = T . n_rows - 1 ; subT . content = ( int * * ) malloc ( subT . n_rows * sizeof ( int ) ) ; int i ; int j ; for ( i = 0 ; i < subT . n_rows ; i ++ ) { subT . content [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; for ( j = 0 ; j <= i ; j ++ ) { subT . content [ i ] [ j ] = T . content [ x + i ] [ y + j ] ; } } return subT ; } int max_path ( Triangle T ) { if ( T . n_rows == 1 ) { return T . content [ 0 ] [ 0 ] ; } else { Triangle T1 = subTriangle ( T , 1 , 0 ) ; Triangle T2 = subTriangle ( T , 1 , 1 ) ; return T . content [ 0 ] [ 0 ] + max ( max_path ( T1 ) , max_path ( T2 ) ) ; } } int main ( ) { int n ; int i ; scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { Triangle T ; inicializar ( & T ) ; printf ( "%d\n" , max_path ( T ) ) ; } return 0 ; }