int sumCompare = 0 ; void addNodes ( int * arry , int * level , int node , int totalNodes , int sum ) { if ( node >= totalNodes ) { if ( sum > sumCompare ) { sumCompare = sum ; } return ; } sum = sum + arry [ node ] ; addNodes ( arry , level , ( node + level [ node ] ) , totalNodes , sum ) ; addNodes ( arry , level , ( node + level [ node ] + 1 ) , totalNodes , sum ) ; return ; } int main ( ) { int testCase , rowNum , totalNodes , * valueAry , * levelAry ; int i , j , index ; scanf ( "%d" , & testCase ) ; while ( testCase -- ) { scanf ( "%d" , & rowNum ) ; totalNodes = ( rowNum * ( rowNum + 1 ) ) / 2 ; index = 0 ; valueAry = ( int * ) malloc ( totalNodes * sizeof ( int ) ) ; levelAry = ( int * ) malloc ( totalNodes * sizeof ( int ) ) ; for ( i = 1 ; i <= rowNum ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { scanf ( "%d" , & valueAry [ index ] ) ; levelAry [ index ] = i ; index ++ ; } } addNodes ( valueAry , levelAry , 0 , totalNodes , 0 ) ; printf ( "%d\n" , sumCompare ) ; sumCompare = 0 ; free ( valueAry ) ; free ( levelAry ) ; } return 0 ; }