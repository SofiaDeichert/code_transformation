int a [ ROWS ] ; int lowerBound ; int upperBound ; int max ( index , n ) { if ( index >= lowerBound && index <= upperBound ) { return a [ index ] ; } else { int offset = index - ( n - 1 ) * n / 2 ; int downIndex = n * ( n + 1 ) / 2 + offset ; int rightIndex = downIndex + 1 ; int downMaxSum = max ( downIndex , n + 1 ) ; int rightMaxSum = max ( rightIndex , n + 1 ) ; return a [ index ] + ( downMaxSum > rightMaxSum ? downMaxSum : rightMaxSum ) ; } } int main ( ) { int t ; scanf ( "%d\n" , & t ) ; int lines ; int i ; while ( t -- ) { scanf ( "%d" , & lines ) ; for ( i = 0 ; i < lines * ( lines + 1 ) / 2 ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } lowerBound = ( lines - 1 ) * lines / 2 ; upperBound = ( lines + 1 ) * lines / 2 - 1 ; printf ( "%d\n" , max ( 0 , 1 ) ) ; } return 0 ; }