int sum ( int l , int mat [ ] [ l ] ) { int size = ( l * ( l + 1 ) ) / 2 ; int arr [ l ] [ l ] ; int i , j ; for ( i = l - 1 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { arr [ i ] [ j ] = - 1 ; } } for ( i = l - 1 ; i >= 0 ; i -- ) { for ( j = i ; j >= 0 ; j -- ) { auxsum ( l , mat , arr , i , j ) ; } } return arr [ 0 ] [ 0 ] ; } int auxsum ( int l , int mat [ ] [ l ] , int arr [ ] [ l ] , int i , int j ) { if ( arr [ i ] [ j ] != - 1 ) return arr [ i ] [ j ] ; else if ( i == l - 1 ) { arr [ i ] [ j ] = mat [ i ] [ j ] ; return arr [ i ] [ j ] ; } else { arr [ i ] [ j ] = max ( auxsum ( l , mat , arr , i + 1 , j ) , auxsum ( l , mat , arr , i + 1 , j + 1 ) ) + mat [ i ] [ j ] ; return arr [ i ] [ j ] ; } } int main ( ) { int tc ; int l ; int i , j , k ; int d ; scanf ( "%d" , & tc ) ; for ( i = 0 ; i < tc ; i ++ ) { scanf ( "%d" , & l ) ; int mat [ l ] [ l ] ; for ( j = 0 ; j < l ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( "%d" , & d ) ; mat [ j ] [ k ] = d ; } } printf ( "%d" , sum ( l , mat ) ) ; printf ( "\n" ) ; } return 0 ; }