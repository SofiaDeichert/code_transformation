struct node { int triangle [ 100 ] [ 100 ] ; struct node * next ; } ; typedef struct node * NODE ; NODE getnode ( void ) { return ( malloc ( sizeof ( struct node ) ) ) ; } int next ( int mask [ ] , int n ) { int i ; for ( i = 0 ; ( i < n ) && mask [ i ] ; ++ i ) mask [ i ] = 0 ; if ( i < n ) { mask [ i ] = 1 ; return 1 ; } return 0 ; } int main ( void ) { int rows ; int i , j , k , count ; int r , c ; int bin [ 100 ] ; int max [ 1000 ] ; int sum = 0 ; int testcases ; NODE temp , head , cur ; printf ( "Input\n" ) ; scanf ( "%d" , & testcases ) ; for ( count = 0 ; count < testcases ; count ++ ) { temp = getnode ( ) ; scanf ( "%d" , & rows ) ; for ( i = 1 ; i <= rows ; i ++ ) for ( j = 0 ; j < i ; j ++ ) { scanf ( "%d" , & temp -> triangle [ i - 1 ] [ j ] ) ; } if ( count == 0 ) { head = temp ; cur = head ; } else { cur -> next = temp ; cur = cur -> next ; } } cur = head ; for ( count = 0 ; count < testcases ; count ++ ) { max [ count ] = 0 ; for ( j = 0 ; j < rows ; j ++ ) { bin [ j ] = 0 ; max [ count ] += cur -> triangle [ j ] [ 0 ] ; } while ( next ( bin , rows - 1 ) ) { k = 0 ; r = 0 ; c = 0 ; sum = 0 ; for ( j = 0 ; j < rows ; j ++ ) { sum += cur -> triangle [ r ++ ] [ c ] ; c = c + bin [ k ++ ] ; } if ( sum > max [ count ] ) max [ count ] = sum ; } cur = cur -> next ; } printf ( "\nOutput\n" ) ; for ( count = 0 ; count < testcases ; count ++ ) printf ( "%d\n" , max [ count ] ) ; }