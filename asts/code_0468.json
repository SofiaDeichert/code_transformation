{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 240,
  "text": "int main ( void ) { int T , A , B , C , D ; scanf ( \"%d\" , & T ) ; scanf ( \"%d %d\" , & A , & B ) ; if ( A % B == 0 && B % A == 0 ) { C = 1 ; D = A * B ; printf ( \"%d %d\" , C , D ) ; } else printf ( \"sorry for inconvenience\" ) ; return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 240,
      "text": "int main ( void ) { int T , A , B , C , D ; scanf ( \"%d\" , & T ) ; scanf ( \"%d %d\" , & A , & B ) ; if ( A % B == 0 && B % A == 0 ) { C = 1 ; D = A * B ; printf ( \"%d %d\" , C , D ) ; } else printf ( \"sorry for inconvenience\" ) ; return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 17,
          "text": "main ( void )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 17,
              "text": "( void )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": "parameter_declaration",
                  "start_byte": 11,
                  "end_byte": 15,
                  "text": "void",
                  "children": [
                    {
                      "type": "primitive_type",
                      "start_byte": 11,
                      "end_byte": 15,
                      "text": "void",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "start_byte": 16,
                  "end_byte": 17,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 18,
          "end_byte": 240,
          "text": "{ int T , A , B , C , D ; scanf ( \"%d\" , & T ) ; scanf ( \"%d %d\" , & A , & B ) ; if ( A % B == 0 && B % A == 0 ) { C = 1 ; D = A * B ; printf ( \"%d %d\" , C , D ) ; } else printf ( \"sorry for inconvenience\" ) ; return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 18,
              "end_byte": 19,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 20,
              "end_byte": 43,
              "text": "int T , A , B , C , D ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 20,
                  "end_byte": 23,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 24,
                  "end_byte": 25,
                  "text": "T",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 26,
                  "end_byte": 27,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 28,
                  "end_byte": 29,
                  "text": "A",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 30,
                  "end_byte": 31,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 32,
                  "end_byte": 33,
                  "text": "B",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 34,
                  "end_byte": 35,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 36,
                  "end_byte": 37,
                  "text": "C",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 38,
                  "end_byte": 39,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 40,
                  "end_byte": 41,
                  "text": "D",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 42,
                  "end_byte": 43,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 44,
              "end_byte": 66,
              "text": "scanf ( \"%d\" , & T ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 44,
                  "end_byte": 64,
                  "text": "scanf ( \"%d\" , & T )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 44,
                      "end_byte": 49,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 50,
                      "end_byte": 64,
                      "text": "( \"%d\" , & T )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 50,
                          "end_byte": 51,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 52,
                          "end_byte": 56,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 52,
                              "end_byte": 53,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 53,
                              "end_byte": 55,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 55,
                              "end_byte": 56,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 57,
                          "end_byte": 58,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 59,
                          "end_byte": 62,
                          "text": "& T",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 59,
                              "end_byte": 60,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 61,
                              "end_byte": 62,
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 63,
                          "end_byte": 64,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 65,
                  "end_byte": 66,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 67,
              "end_byte": 98,
              "text": "scanf ( \"%d %d\" , & A , & B ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 67,
                  "end_byte": 96,
                  "text": "scanf ( \"%d %d\" , & A , & B )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 67,
                      "end_byte": 72,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 73,
                      "end_byte": 96,
                      "text": "( \"%d %d\" , & A , & B )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 73,
                          "end_byte": 74,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 75,
                          "end_byte": 82,
                          "text": "\"%d %d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 75,
                              "end_byte": 76,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 76,
                              "end_byte": 81,
                              "text": "%d %d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 81,
                              "end_byte": 82,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 83,
                          "end_byte": 84,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 85,
                          "end_byte": 88,
                          "text": "& A",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 85,
                              "end_byte": 86,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 87,
                              "end_byte": 88,
                              "text": "A",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 89,
                          "end_byte": 90,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 91,
                          "end_byte": 94,
                          "text": "& B",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 91,
                              "end_byte": 92,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 93,
                              "end_byte": 94,
                              "text": "B",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 95,
                          "end_byte": 96,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 97,
                  "end_byte": 98,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "if_statement",
              "start_byte": 99,
              "end_byte": 227,
              "text": "if ( A % B == 0 && B % A == 0 ) { C = 1 ; D = A * B ; printf ( \"%d %d\" , C , D ) ; } else printf ( \"sorry for inconvenience\" ) ;",
              "children": [
                {
                  "type": "if",
                  "start_byte": 99,
                  "end_byte": 101,
                  "text": "if",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 102,
                  "end_byte": 130,
                  "text": "( A % B == 0 && B % A == 0 )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 102,
                      "end_byte": 103,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 104,
                      "end_byte": 128,
                      "text": "A % B == 0 && B % A == 0",
                      "children": [
                        {
                          "type": "binary_expression",
                          "start_byte": 104,
                          "end_byte": 114,
                          "text": "A % B == 0",
                          "children": [
                            {
                              "type": "binary_expression",
                              "start_byte": 104,
                              "end_byte": 109,
                              "text": "A % B",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 104,
                                  "end_byte": 105,
                                  "text": "A",
                                  "children": []
                                },
                                {
                                  "type": "%",
                                  "start_byte": 106,
                                  "end_byte": 107,
                                  "text": "%",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 108,
                                  "end_byte": 109,
                                  "text": "B",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "==",
                              "start_byte": 110,
                              "end_byte": 112,
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "start_byte": 113,
                              "end_byte": 114,
                              "text": "0",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "&&",
                          "start_byte": 115,
                          "end_byte": 117,
                          "text": "&&",
                          "children": []
                        },
                        {
                          "type": "binary_expression",
                          "start_byte": 118,
                          "end_byte": 128,
                          "text": "B % A == 0",
                          "children": [
                            {
                              "type": "binary_expression",
                              "start_byte": 118,
                              "end_byte": 123,
                              "text": "B % A",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 118,
                                  "end_byte": 119,
                                  "text": "B",
                                  "children": []
                                },
                                {
                                  "type": "%",
                                  "start_byte": 120,
                                  "end_byte": 121,
                                  "text": "%",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 122,
                                  "end_byte": 123,
                                  "text": "A",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "==",
                              "start_byte": 124,
                              "end_byte": 126,
                              "text": "==",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "start_byte": 127,
                              "end_byte": 128,
                              "text": "0",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 129,
                      "end_byte": 130,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 131,
                  "end_byte": 183,
                  "text": "{ C = 1 ; D = A * B ; printf ( \"%d %d\" , C , D ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 131,
                      "end_byte": 132,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 133,
                      "end_byte": 140,
                      "text": "C = 1 ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 133,
                          "end_byte": 138,
                          "text": "C = 1",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 133,
                              "end_byte": 134,
                              "text": "C",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 135,
                              "end_byte": 136,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "start_byte": 137,
                              "end_byte": 138,
                              "text": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 139,
                          "end_byte": 140,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 141,
                      "end_byte": 152,
                      "text": "D = A * B ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 141,
                          "end_byte": 150,
                          "text": "D = A * B",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 141,
                              "end_byte": 142,
                              "text": "D",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 143,
                              "end_byte": 144,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 145,
                              "end_byte": 150,
                              "text": "A * B",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 145,
                                  "end_byte": 146,
                                  "text": "A",
                                  "children": []
                                },
                                {
                                  "type": "*",
                                  "start_byte": 147,
                                  "end_byte": 148,
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 149,
                                  "end_byte": 150,
                                  "text": "B",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 151,
                          "end_byte": 152,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 153,
                      "end_byte": 181,
                      "text": "printf ( \"%d %d\" , C , D ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 153,
                          "end_byte": 179,
                          "text": "printf ( \"%d %d\" , C , D )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 153,
                              "end_byte": 159,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 160,
                              "end_byte": 179,
                              "text": "( \"%d %d\" , C , D )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 160,
                                  "end_byte": 161,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 162,
                                  "end_byte": 169,
                                  "text": "\"%d %d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 162,
                                      "end_byte": 163,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 163,
                                      "end_byte": 168,
                                      "text": "%d %d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 168,
                                      "end_byte": 169,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 170,
                                  "end_byte": 171,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 172,
                                  "end_byte": 173,
                                  "text": "C",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "start_byte": 174,
                                  "end_byte": 175,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 176,
                                  "end_byte": 177,
                                  "text": "D",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 178,
                                  "end_byte": 179,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 180,
                          "end_byte": 181,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 182,
                      "end_byte": 183,
                      "text": "}",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start_byte": 184,
                  "end_byte": 227,
                  "text": "else printf ( \"sorry for inconvenience\" ) ;",
                  "children": [
                    {
                      "type": "else",
                      "start_byte": 184,
                      "end_byte": 188,
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 189,
                      "end_byte": 227,
                      "text": "printf ( \"sorry for inconvenience\" ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 189,
                          "end_byte": 225,
                          "text": "printf ( \"sorry for inconvenience\" )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 189,
                              "end_byte": 195,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 196,
                              "end_byte": 225,
                              "text": "( \"sorry for inconvenience\" )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 196,
                                  "end_byte": 197,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 198,
                                  "end_byte": 223,
                                  "text": "\"sorry for inconvenience\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 198,
                                      "end_byte": 199,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 199,
                                      "end_byte": 222,
                                      "text": "sorry for inconvenience",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 222,
                                      "end_byte": 223,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 224,
                                  "end_byte": 225,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 226,
                          "end_byte": 227,
                          "text": ";",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 228,
              "end_byte": 238,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 228,
                  "end_byte": 234,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 235,
                  "end_byte": 236,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 237,
                  "end_byte": 238,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 239,
              "end_byte": 240,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}