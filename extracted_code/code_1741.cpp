int getMaximumSumOfTrianglea ( int triangle [ ] [ 100 ] , int size ) { return getMaximumSumOfTriangle ( triangle , 0 , 0 , size ) ; } int getMaximumSumOfTriangle ( int triangle [ ] [ 100 ] , int xPosition , int yPosition , int size ) { if ( size <= 0 ) { return 0 ; } int currentInteger = triangle [ xPosition ] [ yPosition ] ; if ( size == 1 ) { return currentInteger ; } int maximumBottom = getMaximumSumOfTriangle ( triangle , xPosition , yPosition + 1 , size - 1 ) ; int maximumRightBottom = getMaximumSumOfTriangle ( triangle , xPosition + 1 , yPosition + 1 , size - 1 ) ; if ( maximumBottom > maximumRightBottom ) { return currentInteger + maximumBottom ; } else { return currentInteger + maximumRightBottom ; } } int main ( ) { int testCases ; scanf ( "%d" , & testCases ) ; int i , j ; for ( i = 0 ; i < testCases ; ++ i ) { int numberOfRows ; scanf ( "%d" , & numberOfRows ) ; int triangle [ 100 ] [ 100 ] ; for ( i = 0 ; i < numberOfRows ; ++ i ) { for ( j = 0 ; j <= i ; ++ j ) { scanf ( "%d" , & triangle [ j ] [ i ] ) ; } } printf ( "%d\n" , getMaximumSumOfTrianglea ( triangle , numberOfRows ) ) ; } return 0 ; }