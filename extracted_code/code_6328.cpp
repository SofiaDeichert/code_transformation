static char buf [ BUF_SIZE ] ; static int pos = 0 ; static int len = 0 ; int A [ 150 ] [ 150 ] ; int isSpaceChar ( char c ) { return c == ' ' || c == '\r' || c == '\n' || c == '\t' || c == - 1 ; } char readC ( ) { if ( pos >= len ) { len = read ( 0 , buf , BUF_SIZE ) ; if ( len < 1 ) return - 1 ; pos = 0 ; } return buf [ pos ++ ] ; } int readInt ( ) { int c , ve = 1 , i = 0 ; do { c = readC ( ) ; } while ( isSpaceChar ( c ) ) ; if ( c == '-' ) { ve = - 1 ; c = readC ( ) ; } do { i = ( i << 3 + i << 1 ) + c - '0' ; c = readC ( ) ; } while ( ! isSpaceChar ( c ) ) ; return i * ve ; } int main ( ) { int T , n , i , j ; T = readInt ( ) ; while ( T -- ) { n = readInt ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) A [ i ] [ j ] = readInt ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) A [ i ] [ j ] += MAX ( A [ i + 1 ] [ j ] , A [ i + 1 ] [ j + 1 ] ) ; printf ( "%d\n" , A [ 0 ] [ 0 ] ) ; } return 0 ; }