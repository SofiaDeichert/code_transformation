long max ( long a , long b ) { return ( ( a > b ) ? a : b ) ; } long process ( long * * triangle , long rows ) { long * * temp , i , j , k , maxval ; temp = ( long * * ) malloc ( ( rows + 1 ) * sizeof ( long * ) ) ; for ( i = 0 ; i < ( rows + 1 ) ; i ++ ) temp [ i ] = ( long * ) malloc ( ( rows + 1 ) * sizeof ( long ) ) ; for ( i = 0 ; i < ( rows + 1 ) ; i ++ ) { temp [ 0 ] [ i ] = 0 ; temp [ i ] [ 0 ] = 0 ; } for ( i = 1 ; i < ( rows + 1 ) ; i ++ ) { for ( j = 1 ; j <= i ; j ++ ) { temp [ i ] [ j ] = max ( temp [ i - 1 ] [ j - 1 ] , temp [ i - 1 ] [ j ] ) + triangle [ i - 1 ] [ j - 1 ] ; } for ( k = j ; k < rows + 1 ; k ++ ) temp [ i ] [ k ] = 0 ; } maxval = temp [ rows ] [ 0 ] ; for ( i = 1 ; i < ( rows + 1 ) ; i ++ ) { maxval = ( temp [ rows ] [ i ] > maxval ) ? temp [ rows ] [ i ] : maxval ; } return maxval ; } int main ( ) { long testcases , rows , * * triangle , i , j , k , result ; scanf ( "%ld" , & testcases ) ; for ( k = 0 ; k < testcases ; k ++ ) { scanf ( "%ld" , & rows ) ; triangle = ( long * * ) malloc ( rows * sizeof ( long * ) ) ; for ( i = 0 ; i < rows ; i ++ ) { triangle [ i ] = ( long * ) malloc ( ( i + 1 ) * sizeof ( long ) ) ; for ( j = 0 ; j < ( i + 1 ) ; j ++ ) scanf ( "%ld" , & triangle [ i ] [ j ] ) ; } result = process ( triangle , rows ) ; printf ( "%ld\n" , result ) ; for ( i = 0 ; i < rows ; i ++ ) { free ( triangle [ i ] ) ; triangle [ i ] = NULL ; } free ( triangle ) ; } return 0 ; }