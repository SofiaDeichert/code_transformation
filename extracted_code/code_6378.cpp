int maxrows , maxcolumns , * * result1 , * * array1 ; int sumTriangles ( int rowpos , int colpos ) { int value1 , value2 ; if ( rowpos == maxrows || colpos == maxcolumns ) return array1 [ rowpos ] [ colpos ] ; if ( result1 [ rowpos + 1 ] [ colpos ] == - 1 ) { value1 = sumTriangles ( rowpos + 1 , colpos ) ; result1 [ rowpos + 1 ] [ colpos ] = value1 ; } else value1 = result1 [ rowpos + 1 ] [ colpos ] ; if ( result1 [ rowpos + 1 ] [ colpos + 1 ] == - 1 ) { value2 = sumTriangles ( rowpos + 1 , colpos + 1 ) ; result1 [ rowpos + 1 ] [ colpos + 1 ] = value2 ; } else value2 = result1 [ rowpos + 1 ] [ colpos + 1 ] ; if ( value1 > value2 ) return value1 + array1 [ rowpos ] [ colpos ] ; else return value2 + array1 [ rowpos ] [ colpos ] ; } int main ( ) { int noIter , i , j , k , nrows , ncolumns = 1 , * results ; scanf ( "%d" , & noIter ) ; results = ( int * ) malloc ( noIter * sizeof ( int ) ) ; for ( i = 0 ; i < noIter ; i ++ ) { scanf ( "%d" , & nrows ) ; array1 = ( int * * ) malloc ( nrows * sizeof ( int * ) ) ; result1 = ( int * * ) malloc ( nrows * sizeof ( int * ) ) ; ncolumns = 1 ; for ( j = 0 ; j < nrows ; j ++ ) { array1 [ j ] = ( int * ) malloc ( ncolumns * sizeof ( int ) ) ; result1 [ j ] = ( int * ) malloc ( ncolumns * sizeof ( int ) ) ; for ( k = 0 ; k < ncolumns ; k ++ ) { result1 [ j ] [ k ] = - 1 ; scanf ( "%d" , & array1 [ j ] [ k ] ) ; } ncolumns ++ ; } maxrows = nrows - 1 ; maxcolumns = nrows - 1 ; results [ i ] = sumTriangles ( 0 , 0 ) ; for ( j = 0 ; j < nrows ; j ++ ) { free ( array1 [ j ] ) ; } free ( array1 ) ; } for ( i = 0 ; i < noIter ; i ++ ) { printf ( "%d\n" , results [ i ] ) ; } return 0 ; }