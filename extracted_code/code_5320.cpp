void updateArray ( int * numbers , int count ) { if ( count == 1 ) return ; int i ; int updateIndex = ( count * ( count - 1 ) ) / 2 ; int prevBlockLen = count - 1 ; int readIndex = updateIndex - prevBlockLen ; numbers [ updateIndex ] += numbers [ readIndex ] ; numbers [ updateIndex + count - 1 ] += numbers [ readIndex + prevBlockLen - 1 ] ; for ( i = updateIndex + 1 ; i < updateIndex + count - 1 ; i ++ , readIndex ++ ) { int n1 = numbers [ readIndex ] ; int n2 = numbers [ readIndex + 1 ] ; int toAdd = n1 > n2 ? n1 : n2 ; numbers [ i ] += toAdd ; } } int main ( ) { int nCases , i , j , nLines , nNumbers ; scanf ( "%d" , & nCases ) ; for ( i = 0 ; i < nCases ; i ++ ) { scanf ( "%d" , & nLines ) ; nNumbers = ( nLines * ( nLines + 1 ) ) / 2 ; int numbers [ nNumbers ] ; for ( j = 0 ; j < nNumbers ; j ++ ) scanf ( "%d" , & numbers [ j ] ) ; int index = 0 , count = 1 ; while ( index != nNumbers ) { updateArray ( numbers , count ) ; index = index + count ; count ++ ; } int max = numbers [ 0 ] ; for ( j = nNumbers - nLines ; j < nNumbers ; j ++ ) { if ( numbers [ j ] > max ) max = numbers [ j ] ; } printf ( "%d\n" , max ) ; } return 0 ; }