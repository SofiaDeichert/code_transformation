int maximum ( int * * s , int row , int col ) { int i , j , m [ row ] [ col ] ; for ( i = 0 ; i < row ; ++ i ) { for ( j = 0 ; j < row ; ++ j ) { m [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < row ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) m [ i ] [ j ] = s [ i ] [ j ] ; else if ( j == 0 ) m [ i ] [ j ] = m [ i - 1 ] [ j ] + s [ i ] [ j ] ; else if ( m [ i - 1 ] [ j ] > m [ i - 1 ] [ j - 1 ] ) m [ i ] [ j ] = m [ i - 1 ] [ j ] + s [ i ] [ j ] ; else m [ i ] [ j ] = m [ i - 1 ] [ j - 1 ] + s [ i ] [ j ] ; } } for ( i = 0 ; i < row ; ++ i ) { for ( j = 0 ; j < row ; ++ j ) { } } int max = 0 ; for ( i = 0 ; i < row ; ++ i ) { if ( m [ row - 1 ] [ i ] > max ) max = m [ row - 1 ] [ i ] ; } return max ; } int main ( ) { int t ; scanf ( "%d" , & t ) ; while ( t -- ) { int n , i , j , * p [ 10 ] , * * pf ; scanf ( "%d" , & n ) ; int s [ n ] [ n ] ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { s [ i ] [ j ] = 0 ; } } for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & s [ i ] [ j ] ) ; } p [ i ] = s [ i ] ; } pf = p ; int sum = maximum ( ( int * * ) pf , n , n ) ; printf ( "%d\n" , sum ) ; } return 0 ; }