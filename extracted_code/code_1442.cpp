inline void superFastRead ( int * a ) { char c = 0 ; while ( c < 33 ) c = fgetc_unlocked ( stdin ) ; * a = 0 ; while ( c > 33 ) { * a = * a * 10 + c - '0' ; c = fgetc_unlocked ( stdin ) ; } } static void put_i ( int n ) { char buf [ BSIZE ] ; int bn = BSIZE - 1 ; while ( 1 ) { buf [ bn -- ] = '0' + ( n ) ; n = n / 10 ; if ( n == 0 ) break ; } while ( bn < BSIZE - 1 ) putchar ( buf [ ++ bn ] ) ; putchar ( '\n' ) ; } static char _rbuf [ 8192 * 8 ] ; static char * _rend = 0 ; static char * _rpos = 0 ; static int _getchar ( ) { int n = read ( 0 , _rbuf , sizeof _rbuf ) ; if ( n <= 0 ) { printf ( "EOF(%d)\n" , n ) ; exit ( 1 ) ; } _rend = _rbuf + n ; _rpos = _rbuf + 1 ; return * _rbuf ; } static int get_i ( ) { int c ; while ( ( ( c = mygetchar ( ) ) ) < '0' ) { } int n = c - '0' ; while ( ( ( c = mygetchar ( ) ) ) >= '0' ) { n = n * 10 + c - '0' ; } return n ; } int main ( ) { int t , n , i , j , k , temp , max , finalmax ; t = get_i ( ) ; int * * arr = ( int * * ) malloc ( 100 * sizeof ( int * ) ) ; for ( i = 0 ; i < 100 ; i ++ ) arr [ i ] = ( int * ) malloc ( 100 * sizeof ( int ) ) ; for ( i = 0 ; i < t ; i ++ ) { n = get_i ( ) ; finalmax = - 1 ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { max = - 1 ; temp = get_i ( ) ; if ( ( j - 1 ) >= 0 && k < j ) max = arr [ j - 1 ] [ k ] ; if ( ( j - 1 ) >= 0 && ( k - 1 ) >= 0 && arr [ j - 1 ] [ k - 1 ] > max ) max = arr [ j - 1 ] [ k - 1 ] ; if ( max > 0 ) arr [ j ] [ k ] = max + temp ; else arr [ j ] [ k ] = temp ; if ( j == ( n - 1 ) && arr [ j ] [ k ] > finalmax ) finalmax = arr [ j ] [ k ] ; } } put_i ( finalmax ) ; } return 0 ; }