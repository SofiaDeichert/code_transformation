int main ( ) { int * x , * y , i , max = 0 , k , j , input ; int testcases , rows ; scanf ( "%d" , & testcases ) ; y = malloc ( ( 1 ) * sizeof ( int ) ) ; for ( i = 0 ; i < testcases ; i ++ ) { scanf ( "%d" , & rows ) ; for ( j = 0 ; j < rows ; j ++ ) { x = malloc ( ( j + 1 ) * sizeof ( int ) ) ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( "%d" , & input ) ; x [ k ] = input + best ( y , k , j ) ; } free ( y ) ; y = x ; } for ( j = 0 ; j < rows ; j ++ ) { if ( max < y [ j ] ) max = y [ j ] ; } printf ( "%d\n" , max ) ; } } int best ( int * prevRow , int rowIndex , int currentRowSize ) { int best = 0 ; if ( rowIndex > 0 && best < prevRow [ rowIndex - 1 ] ) best = prevRow [ rowIndex - 1 ] ; if ( rowIndex < currentRowSize && best < prevRow [ rowIndex ] ) best = prevRow [ rowIndex ] ; return best ; }