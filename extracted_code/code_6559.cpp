static int pos = 0 ; static int len = 0 ; static char buffer [ BUF_SIZE ] ; static inline int read_more ( void ) { len = read ( 0 , buffer , BUF_SIZE ) ; if ( len ) { pos = 0 ; return buffer [ pos ] ; } return 0 ; } static int readInt ( void ) { int i = 0 ; int c = '0' ; if ( pos + 10 < len ) { do { i = ( i << 3 + i << 1 ) + ( c - '0' ) ; c = buffer [ pos ] ; pos ++ ; } while ( c >= '0' && c <= '9' ) ; do { c = buffer [ pos ] ; pos ++ ; } while ( c < '0' || c > '9' ) ; pos -- ; } else { do { i = ( i << 3 + i << 1 ) + ( c - '0' ) ; c = ( pos < len ) ? buffer [ pos ] : read_more ( ) ; pos ++ ; } while ( c >= '0' && c <= '9' ) ; do { c = ( pos < len ) ? buffer [ pos ] : read_more ( ) ; pos ++ ; } while ( ( c < '0' || c > '9' ) && c ) ; pos -- ; } return i ; } int main ( int argc , char * argv [ ] ) { int T , n , i , j , A [ 150 ] [ 150 ] ; T = readInt ( ) ; while ( T -- ) { n = readInt ( ) ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) A [ i ] [ j ] = readInt ( ) ; for ( i = n - 2 ; i >= 0 ; i -- ) for ( j = 0 ; j <= i ; j ++ ) A [ i ] [ j ] += MAX ( A [ i + 1 ] [ j ] , A [ i + 1 ] [ j + 1 ] ) ; printf ( "%d\n" , A [ 0 ] [ 0 ] ) ; } return 0 ; }