{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 529,
  "text": "int main ( ) { int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( \"enter two numbers:\" ) ; scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) { denominator = A ; numerator = B ; } else { numerator = A ; denominator = B ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( \"gcd of %d and %d= %d\" , gcd ) ; printf ( \"lcm of %d and %d =%d\" , lcm ) ; return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 529,
      "text": "int main ( ) { int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( \"enter two numbers:\" ) ; scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) { denominator = A ; numerator = B ; } else { numerator = A ; denominator = B ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( \"gcd of %d and %d= %d\" , gcd ) ; printf ( \"lcm of %d and %d =%d\" , lcm ) ; return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 529,
          "text": "{ int A , B , gcd , lcm , numerator , denominator , remainder ; printf ( \"enter two numbers:\" ) ; scanf ( \"%d%d\" , & A , & B ) ; if ( A > B ) { denominator = A ; numerator = B ; } else { numerator = A ; denominator = B ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = A * B / gcd ; printf ( \"gcd of %d and %d= %d\" , gcd ) ; printf ( \"lcm of %d and %d =%d\" , lcm ) ; return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 76,
              "text": "int A , B , gcd , lcm , numerator , denominator , remainder ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 15,
                  "end_byte": 18,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 19,
                  "end_byte": 20,
                  "text": "A",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 21,
                  "end_byte": 22,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 23,
                  "end_byte": 24,
                  "text": "B",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 25,
                  "end_byte": 26,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 27,
                  "end_byte": 30,
                  "text": "gcd",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 31,
                  "end_byte": 32,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 33,
                  "end_byte": 36,
                  "text": "lcm",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 37,
                  "end_byte": 38,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 39,
                  "end_byte": 48,
                  "text": "numerator",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 49,
                  "end_byte": 50,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 51,
                  "end_byte": 62,
                  "text": "denominator",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 63,
                  "end_byte": 64,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 65,
                  "end_byte": 74,
                  "text": "remainder",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 75,
                  "end_byte": 76,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 77,
              "end_byte": 110,
              "text": "printf ( \"enter two numbers:\" ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 77,
                  "end_byte": 108,
                  "text": "printf ( \"enter two numbers:\" )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 77,
                      "end_byte": 83,
                      "text": "printf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 84,
                      "end_byte": 108,
                      "text": "( \"enter two numbers:\" )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 84,
                          "end_byte": 85,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 86,
                          "end_byte": 106,
                          "text": "\"enter two numbers:\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 86,
                              "end_byte": 87,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 87,
                              "end_byte": 105,
                              "text": "enter two numbers:",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 105,
                              "end_byte": 106,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 107,
                          "end_byte": 108,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 109,
                  "end_byte": 110,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 111,
              "end_byte": 141,
              "text": "scanf ( \"%d%d\" , & A , & B ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 111,
                  "end_byte": 139,
                  "text": "scanf ( \"%d%d\" , & A , & B )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 111,
                      "end_byte": 116,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 117,
                      "end_byte": 139,
                      "text": "( \"%d%d\" , & A , & B )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 117,
                          "end_byte": 118,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 119,
                          "end_byte": 125,
                          "text": "\"%d%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 119,
                              "end_byte": 120,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 120,
                              "end_byte": 124,
                              "text": "%d%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 124,
                              "end_byte": 125,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 126,
                          "end_byte": 127,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 128,
                          "end_byte": 131,
                          "text": "& A",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 128,
                              "end_byte": 129,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 130,
                              "end_byte": 131,
                              "text": "A",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 132,
                          "end_byte": 133,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 134,
                          "end_byte": 137,
                          "text": "& B",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 134,
                              "end_byte": 135,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 136,
                              "end_byte": 137,
                              "text": "B",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 138,
                          "end_byte": 139,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 140,
                  "end_byte": 141,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "if_statement",
              "start_byte": 142,
              "end_byte": 235,
              "text": "if ( A > B ) { denominator = A ; numerator = B ; } else { numerator = A ; denominator = B ; }",
              "children": [
                {
                  "type": "if",
                  "start_byte": 142,
                  "end_byte": 144,
                  "text": "if",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 145,
                  "end_byte": 154,
                  "text": "( A > B )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 145,
                      "end_byte": 146,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 147,
                      "end_byte": 152,
                      "text": "A > B",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 147,
                          "end_byte": 148,
                          "text": "A",
                          "children": []
                        },
                        {
                          "type": ">",
                          "start_byte": 149,
                          "end_byte": 150,
                          "text": ">",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 151,
                          "end_byte": 152,
                          "text": "B",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 153,
                      "end_byte": 154,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 155,
                  "end_byte": 192,
                  "text": "{ denominator = A ; numerator = B ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 155,
                      "end_byte": 156,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 157,
                      "end_byte": 174,
                      "text": "denominator = A ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 157,
                          "end_byte": 172,
                          "text": "denominator = A",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 157,
                              "end_byte": 168,
                              "text": "denominator",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 169,
                              "end_byte": 170,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 171,
                              "end_byte": 172,
                              "text": "A",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 173,
                          "end_byte": 174,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 175,
                      "end_byte": 190,
                      "text": "numerator = B ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 175,
                          "end_byte": 188,
                          "text": "numerator = B",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 175,
                              "end_byte": 184,
                              "text": "numerator",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 185,
                              "end_byte": 186,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 187,
                              "end_byte": 188,
                              "text": "B",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 189,
                          "end_byte": 190,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 191,
                      "end_byte": 192,
                      "text": "}",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start_byte": 193,
                  "end_byte": 235,
                  "text": "else { numerator = A ; denominator = B ; }",
                  "children": [
                    {
                      "type": "else",
                      "start_byte": 193,
                      "end_byte": 197,
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": "compound_statement",
                      "start_byte": 198,
                      "end_byte": 235,
                      "text": "{ numerator = A ; denominator = B ; }",
                      "children": [
                        {
                          "type": "{",
                          "start_byte": 198,
                          "end_byte": 199,
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "expression_statement",
                          "start_byte": 200,
                          "end_byte": 215,
                          "text": "numerator = A ;",
                          "children": [
                            {
                              "type": "assignment_expression",
                              "start_byte": 200,
                              "end_byte": 213,
                              "text": "numerator = A",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 200,
                                  "end_byte": 209,
                                  "text": "numerator",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "start_byte": 210,
                                  "end_byte": 211,
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 212,
                                  "end_byte": 213,
                                  "text": "A",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "start_byte": 214,
                              "end_byte": 215,
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "start_byte": 216,
                          "end_byte": 233,
                          "text": "denominator = B ;",
                          "children": [
                            {
                              "type": "assignment_expression",
                              "start_byte": 216,
                              "end_byte": 231,
                              "text": "denominator = B",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 216,
                                  "end_byte": 227,
                                  "text": "denominator",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "start_byte": 228,
                                  "end_byte": 229,
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 230,
                                  "end_byte": 231,
                                  "text": "B",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "start_byte": 232,
                              "end_byte": 233,
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "start_byte": 234,
                          "end_byte": 235,
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 236,
              "end_byte": 273,
              "text": "remainder = numerator % denominator ;",
              "children": [
                {
                  "type": "assignment_expression",
                  "start_byte": 236,
                  "end_byte": 271,
                  "text": "remainder = numerator % denominator",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 236,
                      "end_byte": 245,
                      "text": "remainder",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 246,
                      "end_byte": 247,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 248,
                      "end_byte": 271,
                      "text": "numerator % denominator",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 248,
                          "end_byte": 257,
                          "text": "numerator",
                          "children": []
                        },
                        {
                          "type": "%",
                          "start_byte": 258,
                          "end_byte": 259,
                          "text": "%",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 260,
                          "end_byte": 271,
                          "text": "denominator",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 272,
                  "end_byte": 273,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 274,
              "end_byte": 392,
              "text": "while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 274,
                  "end_byte": 279,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 280,
                  "end_byte": 298,
                  "text": "( remainder != 0 )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 280,
                      "end_byte": 281,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 282,
                      "end_byte": 296,
                      "text": "remainder != 0",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 282,
                          "end_byte": 291,
                          "text": "remainder",
                          "children": []
                        },
                        {
                          "type": "!=",
                          "start_byte": 292,
                          "end_byte": 294,
                          "text": "!=",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "start_byte": 295,
                          "end_byte": 296,
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 297,
                      "end_byte": 298,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 299,
                  "end_byte": 392,
                  "text": "{ numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 299,
                      "end_byte": 300,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 301,
                      "end_byte": 326,
                      "text": "numerator = denominator ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 301,
                          "end_byte": 324,
                          "text": "numerator = denominator",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 301,
                              "end_byte": 310,
                              "text": "numerator",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 311,
                              "end_byte": 312,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 313,
                              "end_byte": 324,
                              "text": "denominator",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 325,
                          "end_byte": 326,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 327,
                      "end_byte": 352,
                      "text": "denominator = remainder ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 327,
                          "end_byte": 350,
                          "text": "denominator = remainder",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 327,
                              "end_byte": 338,
                              "text": "denominator",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 339,
                              "end_byte": 340,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 341,
                              "end_byte": 350,
                              "text": "remainder",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 351,
                          "end_byte": 352,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 353,
                      "end_byte": 390,
                      "text": "remainder = numerator % denominator ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 353,
                          "end_byte": 388,
                          "text": "remainder = numerator % denominator",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 353,
                              "end_byte": 362,
                              "text": "remainder",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 363,
                              "end_byte": 364,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 365,
                              "end_byte": 388,
                              "text": "numerator % denominator",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 365,
                                  "end_byte": 374,
                                  "text": "numerator",
                                  "children": []
                                },
                                {
                                  "type": "%",
                                  "start_byte": 375,
                                  "end_byte": 376,
                                  "text": "%",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 377,
                                  "end_byte": 388,
                                  "text": "denominator",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 389,
                          "end_byte": 390,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 391,
                      "end_byte": 392,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 393,
              "end_byte": 412,
              "text": "gcd = denominator ;",
              "children": [
                {
                  "type": "assignment_expression",
                  "start_byte": 393,
                  "end_byte": 410,
                  "text": "gcd = denominator",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 393,
                      "end_byte": 396,
                      "text": "gcd",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 397,
                      "end_byte": 398,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 399,
                      "end_byte": 410,
                      "text": "denominator",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 411,
                  "end_byte": 412,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 413,
              "end_byte": 432,
              "text": "lcm = A * B / gcd ;",
              "children": [
                {
                  "type": "assignment_expression",
                  "start_byte": 413,
                  "end_byte": 430,
                  "text": "lcm = A * B / gcd",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 413,
                      "end_byte": 416,
                      "text": "lcm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 417,
                      "end_byte": 418,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 419,
                      "end_byte": 430,
                      "text": "A * B / gcd",
                      "children": [
                        {
                          "type": "binary_expression",
                          "start_byte": 419,
                          "end_byte": 424,
                          "text": "A * B",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 419,
                              "end_byte": 420,
                              "text": "A",
                              "children": []
                            },
                            {
                              "type": "*",
                              "start_byte": 421,
                              "end_byte": 422,
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 423,
                              "end_byte": 424,
                              "text": "B",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "/",
                          "start_byte": 425,
                          "end_byte": 426,
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 427,
                          "end_byte": 430,
                          "text": "gcd",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 431,
                  "end_byte": 432,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 433,
              "end_byte": 474,
              "text": "printf ( \"gcd of %d and %d= %d\" , gcd ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 433,
                  "end_byte": 472,
                  "text": "printf ( \"gcd of %d and %d= %d\" , gcd )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 433,
                      "end_byte": 439,
                      "text": "printf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 440,
                      "end_byte": 472,
                      "text": "( \"gcd of %d and %d= %d\" , gcd )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 440,
                          "end_byte": 441,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 442,
                          "end_byte": 464,
                          "text": "\"gcd of %d and %d= %d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 442,
                              "end_byte": 443,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 443,
                              "end_byte": 463,
                              "text": "gcd of %d and %d= %d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 463,
                              "end_byte": 464,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 465,
                          "end_byte": 466,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 467,
                          "end_byte": 470,
                          "text": "gcd",
                          "children": []
                        },
                        {
                          "type": ")",
                          "start_byte": 471,
                          "end_byte": 472,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 473,
                  "end_byte": 474,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 475,
              "end_byte": 516,
              "text": "printf ( \"lcm of %d and %d =%d\" , lcm ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 475,
                  "end_byte": 514,
                  "text": "printf ( \"lcm of %d and %d =%d\" , lcm )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 475,
                      "end_byte": 481,
                      "text": "printf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 482,
                      "end_byte": 514,
                      "text": "( \"lcm of %d and %d =%d\" , lcm )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 482,
                          "end_byte": 483,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 484,
                          "end_byte": 506,
                          "text": "\"lcm of %d and %d =%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 484,
                              "end_byte": 485,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 485,
                              "end_byte": 505,
                              "text": "lcm of %d and %d =%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 505,
                              "end_byte": 506,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 507,
                          "end_byte": 508,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 509,
                          "end_byte": 512,
                          "text": "lcm",
                          "children": []
                        },
                        {
                          "type": ")",
                          "start_byte": 513,
                          "end_byte": 514,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 515,
                  "end_byte": 516,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 517,
              "end_byte": 527,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 517,
                  "end_byte": 523,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 524,
                  "end_byte": 525,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 526,
                  "end_byte": 527,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 528,
              "end_byte": 529,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}