{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 399,
  "text": "int main ( ) { int a , b , rem , num , deno , lcm , gcd ; printf ( \"Enter two numbers\" ) ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { num = a ; deno = b ; } else { num = b ; deno = a ; } rem = num % deno ; while ( rem != 0 ) { num = deno ; deno = rem ; rem = num % deno ; } gcd = deno ; lcm = ( a * b ) / gcd ; printf ( \"\\n gcd and lcm of two numbers are %d and %d \" , gcd , lcm ) ; return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 399,
      "text": "int main ( ) { int a , b , rem , num , deno , lcm , gcd ; printf ( \"Enter two numbers\" ) ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { num = a ; deno = b ; } else { num = b ; deno = a ; } rem = num % deno ; while ( rem != 0 ) { num = deno ; deno = rem ; rem = num % deno ; } gcd = deno ; lcm = ( a * b ) / gcd ; printf ( \"\\n gcd and lcm of two numbers are %d and %d \" , gcd , lcm ) ; return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 399,
          "text": "{ int a , b , rem , num , deno , lcm , gcd ; printf ( \"Enter two numbers\" ) ; scanf ( \"%d %d\" , & a , & b ) ; if ( a > b ) { num = a ; deno = b ; } else { num = b ; deno = a ; } rem = num % deno ; while ( rem != 0 ) { num = deno ; deno = rem ; rem = num % deno ; } gcd = deno ; lcm = ( a * b ) / gcd ; printf ( \"\\n gcd and lcm of two numbers are %d and %d \" , gcd , lcm ) ; return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 57,
              "text": "int a , b , rem , num , deno , lcm , gcd ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 15,
                  "end_byte": 18,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 19,
                  "end_byte": 20,
                  "text": "a",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 21,
                  "end_byte": 22,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 23,
                  "end_byte": 24,
                  "text": "b",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 25,
                  "end_byte": 26,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 27,
                  "end_byte": 30,
                  "text": "rem",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 31,
                  "end_byte": 32,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 33,
                  "end_byte": 36,
                  "text": "num",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 37,
                  "end_byte": 38,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 39,
                  "end_byte": 43,
                  "text": "deno",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 44,
                  "end_byte": 45,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 46,
                  "end_byte": 49,
                  "text": "lcm",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 50,
                  "end_byte": 51,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 52,
                  "end_byte": 55,
                  "text": "gcd",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 56,
                  "end_byte": 57,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 58,
              "end_byte": 90,
              "text": "printf ( \"Enter two numbers\" ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 58,
                  "end_byte": 88,
                  "text": "printf ( \"Enter two numbers\" )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 58,
                      "end_byte": 64,
                      "text": "printf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 65,
                      "end_byte": 88,
                      "text": "( \"Enter two numbers\" )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 65,
                          "end_byte": 66,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 67,
                          "end_byte": 86,
                          "text": "\"Enter two numbers\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 67,
                              "end_byte": 68,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 68,
                              "end_byte": 85,
                              "text": "Enter two numbers",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 85,
                              "end_byte": 86,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 87,
                          "end_byte": 88,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 89,
                  "end_byte": 90,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 91,
              "end_byte": 122,
              "text": "scanf ( \"%d %d\" , & a , & b ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 91,
                  "end_byte": 120,
                  "text": "scanf ( \"%d %d\" , & a , & b )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 91,
                      "end_byte": 96,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 97,
                      "end_byte": 120,
                      "text": "( \"%d %d\" , & a , & b )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 97,
                          "end_byte": 98,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 99,
                          "end_byte": 106,
                          "text": "\"%d %d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 99,
                              "end_byte": 100,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 100,
                              "end_byte": 105,
                              "text": "%d %d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 105,
                              "end_byte": 106,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 107,
                          "end_byte": 108,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 109,
                          "end_byte": 112,
                          "text": "& a",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 109,
                              "end_byte": 110,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 111,
                              "end_byte": 112,
                              "text": "a",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 113,
                          "end_byte": 114,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 115,
                          "end_byte": 118,
                          "text": "& b",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 115,
                              "end_byte": 116,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 117,
                              "end_byte": 118,
                              "text": "b",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 119,
                          "end_byte": 120,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 121,
                  "end_byte": 122,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "if_statement",
              "start_byte": 123,
              "end_byte": 190,
              "text": "if ( a > b ) { num = a ; deno = b ; } else { num = b ; deno = a ; }",
              "children": [
                {
                  "type": "if",
                  "start_byte": 123,
                  "end_byte": 125,
                  "text": "if",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 126,
                  "end_byte": 135,
                  "text": "( a > b )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 126,
                      "end_byte": 127,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 128,
                      "end_byte": 133,
                      "text": "a > b",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 128,
                          "end_byte": 129,
                          "text": "a",
                          "children": []
                        },
                        {
                          "type": ">",
                          "start_byte": 130,
                          "end_byte": 131,
                          "text": ">",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 132,
                          "end_byte": 133,
                          "text": "b",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 134,
                      "end_byte": 135,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 136,
                  "end_byte": 160,
                  "text": "{ num = a ; deno = b ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 136,
                      "end_byte": 137,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 138,
                      "end_byte": 147,
                      "text": "num = a ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 138,
                          "end_byte": 145,
                          "text": "num = a",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 138,
                              "end_byte": 141,
                              "text": "num",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 142,
                              "end_byte": 143,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 144,
                              "end_byte": 145,
                              "text": "a",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 146,
                          "end_byte": 147,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 148,
                      "end_byte": 158,
                      "text": "deno = b ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 148,
                          "end_byte": 156,
                          "text": "deno = b",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 148,
                              "end_byte": 152,
                              "text": "deno",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 153,
                              "end_byte": 154,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 155,
                              "end_byte": 156,
                              "text": "b",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 157,
                          "end_byte": 158,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 159,
                      "end_byte": 160,
                      "text": "}",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start_byte": 161,
                  "end_byte": 190,
                  "text": "else { num = b ; deno = a ; }",
                  "children": [
                    {
                      "type": "else",
                      "start_byte": 161,
                      "end_byte": 165,
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": "compound_statement",
                      "start_byte": 166,
                      "end_byte": 190,
                      "text": "{ num = b ; deno = a ; }",
                      "children": [
                        {
                          "type": "{",
                          "start_byte": 166,
                          "end_byte": 167,
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "expression_statement",
                          "start_byte": 168,
                          "end_byte": 177,
                          "text": "num = b ;",
                          "children": [
                            {
                              "type": "assignment_expression",
                              "start_byte": 168,
                              "end_byte": 175,
                              "text": "num = b",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 168,
                                  "end_byte": 171,
                                  "text": "num",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "start_byte": 172,
                                  "end_byte": 173,
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 174,
                                  "end_byte": 175,
                                  "text": "b",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "start_byte": 176,
                              "end_byte": 177,
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "start_byte": 178,
                          "end_byte": 188,
                          "text": "deno = a ;",
                          "children": [
                            {
                              "type": "assignment_expression",
                              "start_byte": 178,
                              "end_byte": 186,
                              "text": "deno = a",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 178,
                                  "end_byte": 182,
                                  "text": "deno",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "start_byte": 183,
                                  "end_byte": 184,
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 185,
                                  "end_byte": 186,
                                  "text": "a",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "start_byte": 187,
                              "end_byte": 188,
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "start_byte": 189,
                          "end_byte": 190,
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 191,
              "end_byte": 209,
              "text": "rem = num % deno ;",
              "children": [
                {
                  "type": "assignment_expression",
                  "start_byte": 191,
                  "end_byte": 207,
                  "text": "rem = num % deno",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 191,
                      "end_byte": 194,
                      "text": "rem",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 195,
                      "end_byte": 196,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 197,
                      "end_byte": 207,
                      "text": "num % deno",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 197,
                          "end_byte": 200,
                          "text": "num",
                          "children": []
                        },
                        {
                          "type": "%",
                          "start_byte": 201,
                          "end_byte": 202,
                          "text": "%",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 203,
                          "end_byte": 207,
                          "text": "deno",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 208,
                  "end_byte": 209,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 210,
              "end_byte": 277,
              "text": "while ( rem != 0 ) { num = deno ; deno = rem ; rem = num % deno ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 210,
                  "end_byte": 215,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 216,
                  "end_byte": 228,
                  "text": "( rem != 0 )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 216,
                      "end_byte": 217,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 218,
                      "end_byte": 226,
                      "text": "rem != 0",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 218,
                          "end_byte": 221,
                          "text": "rem",
                          "children": []
                        },
                        {
                          "type": "!=",
                          "start_byte": 222,
                          "end_byte": 224,
                          "text": "!=",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "start_byte": 225,
                          "end_byte": 226,
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 227,
                      "end_byte": 228,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 229,
                  "end_byte": 277,
                  "text": "{ num = deno ; deno = rem ; rem = num % deno ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 229,
                      "end_byte": 230,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 231,
                      "end_byte": 243,
                      "text": "num = deno ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 231,
                          "end_byte": 241,
                          "text": "num = deno",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 231,
                              "end_byte": 234,
                              "text": "num",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 235,
                              "end_byte": 236,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 237,
                              "end_byte": 241,
                              "text": "deno",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 242,
                          "end_byte": 243,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 244,
                      "end_byte": 256,
                      "text": "deno = rem ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 244,
                          "end_byte": 254,
                          "text": "deno = rem",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 244,
                              "end_byte": 248,
                              "text": "deno",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 249,
                              "end_byte": 250,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 251,
                              "end_byte": 254,
                              "text": "rem",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 255,
                          "end_byte": 256,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 257,
                      "end_byte": 275,
                      "text": "rem = num % deno ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 257,
                          "end_byte": 273,
                          "text": "rem = num % deno",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 257,
                              "end_byte": 260,
                              "text": "rem",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 261,
                              "end_byte": 262,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 263,
                              "end_byte": 273,
                              "text": "num % deno",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 263,
                                  "end_byte": 266,
                                  "text": "num",
                                  "children": []
                                },
                                {
                                  "type": "%",
                                  "start_byte": 267,
                                  "end_byte": 268,
                                  "text": "%",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 269,
                                  "end_byte": 273,
                                  "text": "deno",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 274,
                          "end_byte": 275,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 276,
                      "end_byte": 277,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 278,
              "end_byte": 290,
              "text": "gcd = deno ;",
              "children": [
                {
                  "type": "assignment_expression",
                  "start_byte": 278,
                  "end_byte": 288,
                  "text": "gcd = deno",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 278,
                      "end_byte": 281,
                      "text": "gcd",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 282,
                      "end_byte": 283,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 284,
                      "end_byte": 288,
                      "text": "deno",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 289,
                  "end_byte": 290,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 291,
              "end_byte": 314,
              "text": "lcm = ( a * b ) / gcd ;",
              "children": [
                {
                  "type": "assignment_expression",
                  "start_byte": 291,
                  "end_byte": 312,
                  "text": "lcm = ( a * b ) / gcd",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 291,
                      "end_byte": 294,
                      "text": "lcm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 295,
                      "end_byte": 296,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 297,
                      "end_byte": 312,
                      "text": "( a * b ) / gcd",
                      "children": [
                        {
                          "type": "parenthesized_expression",
                          "start_byte": 297,
                          "end_byte": 306,
                          "text": "( a * b )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 297,
                              "end_byte": 298,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 299,
                              "end_byte": 304,
                              "text": "a * b",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 299,
                                  "end_byte": 300,
                                  "text": "a",
                                  "children": []
                                },
                                {
                                  "type": "*",
                                  "start_byte": 301,
                                  "end_byte": 302,
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 303,
                                  "end_byte": 304,
                                  "text": "b",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 305,
                              "end_byte": 306,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "/",
                          "start_byte": 307,
                          "end_byte": 308,
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 309,
                          "end_byte": 312,
                          "text": "gcd",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 313,
                  "end_byte": 314,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 315,
              "end_byte": 386,
              "text": "printf ( \"\\n gcd and lcm of two numbers are %d and %d \" , gcd , lcm ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 315,
                  "end_byte": 384,
                  "text": "printf ( \"\\n gcd and lcm of two numbers are %d and %d \" , gcd , lcm )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 315,
                      "end_byte": 321,
                      "text": "printf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 322,
                      "end_byte": 384,
                      "text": "( \"\\n gcd and lcm of two numbers are %d and %d \" , gcd , lcm )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 322,
                          "end_byte": 323,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 324,
                          "end_byte": 370,
                          "text": "\"\\n gcd and lcm of two numbers are %d and %d \"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 324,
                              "end_byte": 325,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "escape_sequence",
                              "start_byte": 325,
                              "end_byte": 327,
                              "text": "\\n",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 327,
                              "end_byte": 369,
                              "text": " gcd and lcm of two numbers are %d and %d ",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 369,
                              "end_byte": 370,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 371,
                          "end_byte": 372,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 373,
                          "end_byte": 376,
                          "text": "gcd",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 377,
                          "end_byte": 378,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 379,
                          "end_byte": 382,
                          "text": "lcm",
                          "children": []
                        },
                        {
                          "type": ")",
                          "start_byte": 383,
                          "end_byte": 384,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 385,
                  "end_byte": 386,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 387,
              "end_byte": 397,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 387,
                  "end_byte": 393,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 394,
                  "end_byte": 395,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 396,
                  "end_byte": 397,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 398,
              "end_byte": 399,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}