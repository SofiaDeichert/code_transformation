int memo [ SIZE ] [ SIZE ] ; void initialise ( ) { int i , j ; for ( i = 0 ; i < SIZE ; i ++ ) for ( j = 0 ; j < SIZE ; j ++ ) memo [ i ] [ j ] = 0 ; } int path ( int a [ SIZE ] [ SIZE ] , int r , int i , int j ) { int p1 , p2 ; if ( memo [ i ] [ j ] ) return memo [ i ] [ j ] ; if ( i == r - 1 ) return memo [ i ] [ j ] = a [ i ] [ j ] ; else { return memo [ i ] [ j ] = a [ i ] [ j ] + max ( path ( a , r , i + 1 , j ) , path ( a , r , i + 1 , j + 1 ) ) ; } } int main ( ) { int n , r , i , j , a [ SIZE ] [ SIZE ] ; scanf ( "%d" , & n ) ; while ( n -- ) { scanf ( "%d" , & r ) ; for ( i = 0 ; i < r ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; initialise ( ) ; if ( r == 0 ) printf ( "0\n" ) ; else printf ( "%d\n" , path ( a , r , 0 , 0 ) ) ; } return 0 ; }