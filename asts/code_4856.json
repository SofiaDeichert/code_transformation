{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 696,
  "text": "void main ( ) { int T , i , A , B , j , G , L , p ; printf ( \"enter the number of case :\\n\" ) ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { printf ( \"enter the two number :\\n\" ) ; scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; G = 1 ; L = 1 ; p = A * B ; if ( A > B ) { for ( j = 1 ; j <= B ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else if ( B > A ) { for ( j = 1 ; j <= A ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else { printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B ) ; } } }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 696,
      "text": "void main ( ) { int T , i , A , B , j , G , L , p ; printf ( \"enter the number of case :\\n\" ) ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { printf ( \"enter the two number :\\n\" ) ; scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; G = 1 ; L = 1 ; p = A * B ; if ( A > B ) { for ( j = 1 ; j <= B ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else if ( B > A ) { for ( j = 1 ; j <= A ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else { printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B ) ; } } }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 4,
          "text": "void",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 5,
          "end_byte": 13,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 5,
              "end_byte": 9,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 10,
              "end_byte": 13,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 10,
                  "end_byte": 11,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 12,
                  "end_byte": 13,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 14,
          "end_byte": 696,
          "text": "{ int T , i , A , B , j , G , L , p ; printf ( \"enter the number of case :\\n\" ) ; scanf ( \"%d\" , & T ) ; for ( i = 1 ; i <= T ; i ++ ) { printf ( \"enter the two number :\\n\" ) ; scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; G = 1 ; L = 1 ; p = A * B ; if ( A > B ) { for ( j = 1 ; j <= B ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else if ( B > A ) { for ( j = 1 ; j <= A ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else { printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B ) ; } } }",
          "children": [
            {
              "type": "{",
              "start_byte": 14,
              "end_byte": 15,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 16,
              "end_byte": 51,
              "text": "int T , i , A , B , j , G , L , p ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 16,
                  "end_byte": 19,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 20,
                  "end_byte": 21,
                  "text": "T",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 22,
                  "end_byte": 23,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 24,
                  "end_byte": 25,
                  "text": "i",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 26,
                  "end_byte": 27,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 28,
                  "end_byte": 29,
                  "text": "A",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 30,
                  "end_byte": 31,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 32,
                  "end_byte": 33,
                  "text": "B",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 34,
                  "end_byte": 35,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 36,
                  "end_byte": 37,
                  "text": "j",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 38,
                  "end_byte": 39,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 40,
                  "end_byte": 41,
                  "text": "G",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 42,
                  "end_byte": 43,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 44,
                  "end_byte": 45,
                  "text": "L",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 46,
                  "end_byte": 47,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 48,
                  "end_byte": 49,
                  "text": "p",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 50,
                  "end_byte": 51,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 52,
              "end_byte": 95,
              "text": "printf ( \"enter the number of case :\\n\" ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 52,
                  "end_byte": 93,
                  "text": "printf ( \"enter the number of case :\\n\" )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 52,
                      "end_byte": 58,
                      "text": "printf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 59,
                      "end_byte": 93,
                      "text": "( \"enter the number of case :\\n\" )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 59,
                          "end_byte": 60,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 61,
                          "end_byte": 91,
                          "text": "\"enter the number of case :\\n\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 61,
                              "end_byte": 62,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 62,
                              "end_byte": 88,
                              "text": "enter the number of case :",
                              "children": []
                            },
                            {
                              "type": "escape_sequence",
                              "start_byte": 88,
                              "end_byte": 90,
                              "text": "\\n",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 90,
                              "end_byte": 91,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 92,
                          "end_byte": 93,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 94,
                  "end_byte": 95,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 96,
              "end_byte": 118,
              "text": "scanf ( \"%d\" , & T ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 96,
                  "end_byte": 116,
                  "text": "scanf ( \"%d\" , & T )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 96,
                      "end_byte": 101,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 102,
                      "end_byte": 116,
                      "text": "( \"%d\" , & T )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 102,
                          "end_byte": 103,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 104,
                          "end_byte": 108,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 104,
                              "end_byte": 105,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 105,
                              "end_byte": 107,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 107,
                              "end_byte": 108,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 109,
                          "end_byte": 110,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 111,
                          "end_byte": 114,
                          "text": "& T",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 111,
                              "end_byte": 112,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 113,
                              "end_byte": 114,
                              "text": "T",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 115,
                          "end_byte": 116,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 117,
                  "end_byte": 118,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "for_statement",
              "start_byte": 119,
              "end_byte": 694,
              "text": "for ( i = 1 ; i <= T ; i ++ ) { printf ( \"enter the two number :\\n\" ) ; scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; G = 1 ; L = 1 ; p = A * B ; if ( A > B ) { for ( j = 1 ; j <= B ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else if ( B > A ) { for ( j = 1 ; j <= A ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else { printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B ) ; } }",
              "children": [
                {
                  "type": "for",
                  "start_byte": 119,
                  "end_byte": 122,
                  "text": "for",
                  "children": []
                },
                {
                  "type": "(",
                  "start_byte": 123,
                  "end_byte": 124,
                  "text": "(",
                  "children": []
                },
                {
                  "type": "assignment_expression",
                  "start_byte": 125,
                  "end_byte": 130,
                  "text": "i = 1",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 125,
                      "end_byte": 126,
                      "text": "i",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 127,
                      "end_byte": 128,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "number_literal",
                      "start_byte": 129,
                      "end_byte": 130,
                      "text": "1",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 131,
                  "end_byte": 132,
                  "text": ";",
                  "children": []
                },
                {
                  "type": "binary_expression",
                  "start_byte": 133,
                  "end_byte": 139,
                  "text": "i <= T",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 133,
                      "end_byte": 134,
                      "text": "i",
                      "children": []
                    },
                    {
                      "type": "<=",
                      "start_byte": 135,
                      "end_byte": 137,
                      "text": "<=",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 138,
                      "end_byte": 139,
                      "text": "T",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 140,
                  "end_byte": 141,
                  "text": ";",
                  "children": []
                },
                {
                  "type": "update_expression",
                  "start_byte": 142,
                  "end_byte": 146,
                  "text": "i ++",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 142,
                      "end_byte": 143,
                      "text": "i",
                      "children": []
                    },
                    {
                      "type": "++",
                      "start_byte": 144,
                      "end_byte": 146,
                      "text": "++",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "start_byte": 147,
                  "end_byte": 148,
                  "text": ")",
                  "children": []
                },
                {
                  "type": "compound_statement",
                  "start_byte": 149,
                  "end_byte": 694,
                  "text": "{ printf ( \"enter the two number :\\n\" ) ; scanf ( \"%d\" , & A ) ; scanf ( \"%d\" , & B ) ; G = 1 ; L = 1 ; p = A * B ; if ( A > B ) { for ( j = 1 ; j <= B ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else if ( B > A ) { for ( j = 1 ; j <= A ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else { printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B ) ; } }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 149,
                      "end_byte": 150,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 151,
                      "end_byte": 190,
                      "text": "printf ( \"enter the two number :\\n\" ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 151,
                          "end_byte": 188,
                          "text": "printf ( \"enter the two number :\\n\" )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 151,
                              "end_byte": 157,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 158,
                              "end_byte": 188,
                              "text": "( \"enter the two number :\\n\" )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 158,
                                  "end_byte": 159,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 160,
                                  "end_byte": 186,
                                  "text": "\"enter the two number :\\n\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 160,
                                      "end_byte": 161,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 161,
                                      "end_byte": 183,
                                      "text": "enter the two number :",
                                      "children": []
                                    },
                                    {
                                      "type": "escape_sequence",
                                      "start_byte": 183,
                                      "end_byte": 185,
                                      "text": "\\n",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 185,
                                      "end_byte": 186,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 187,
                                  "end_byte": 188,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 189,
                          "end_byte": 190,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 191,
                      "end_byte": 213,
                      "text": "scanf ( \"%d\" , & A ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 191,
                          "end_byte": 211,
                          "text": "scanf ( \"%d\" , & A )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 191,
                              "end_byte": 196,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 197,
                              "end_byte": 211,
                              "text": "( \"%d\" , & A )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 197,
                                  "end_byte": 198,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 199,
                                  "end_byte": 203,
                                  "text": "\"%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 199,
                                      "end_byte": 200,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 200,
                                      "end_byte": 202,
                                      "text": "%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 202,
                                      "end_byte": 203,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 204,
                                  "end_byte": 205,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 206,
                                  "end_byte": 209,
                                  "text": "& A",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 206,
                                      "end_byte": 207,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 208,
                                      "end_byte": 209,
                                      "text": "A",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 210,
                                  "end_byte": 211,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 212,
                          "end_byte": 213,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 214,
                      "end_byte": 236,
                      "text": "scanf ( \"%d\" , & B ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 214,
                          "end_byte": 234,
                          "text": "scanf ( \"%d\" , & B )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 214,
                              "end_byte": 219,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 220,
                              "end_byte": 234,
                              "text": "( \"%d\" , & B )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 220,
                                  "end_byte": 221,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 222,
                                  "end_byte": 226,
                                  "text": "\"%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 222,
                                      "end_byte": 223,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 223,
                                      "end_byte": 225,
                                      "text": "%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 225,
                                      "end_byte": 226,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 227,
                                  "end_byte": 228,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 229,
                                  "end_byte": 232,
                                  "text": "& B",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 229,
                                      "end_byte": 230,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 231,
                                      "end_byte": 232,
                                      "text": "B",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 233,
                                  "end_byte": 234,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 235,
                          "end_byte": 236,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 237,
                      "end_byte": 244,
                      "text": "G = 1 ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 237,
                          "end_byte": 242,
                          "text": "G = 1",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 237,
                              "end_byte": 238,
                              "text": "G",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 239,
                              "end_byte": 240,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "start_byte": 241,
                              "end_byte": 242,
                              "text": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 243,
                          "end_byte": 244,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 245,
                      "end_byte": 252,
                      "text": "L = 1 ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 245,
                          "end_byte": 250,
                          "text": "L = 1",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 245,
                              "end_byte": 246,
                              "text": "L",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 247,
                              "end_byte": 248,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "number_literal",
                              "start_byte": 249,
                              "end_byte": 250,
                              "text": "1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 251,
                          "end_byte": 252,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 253,
                      "end_byte": 264,
                      "text": "p = A * B ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 253,
                          "end_byte": 262,
                          "text": "p = A * B",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 253,
                              "end_byte": 254,
                              "text": "p",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 255,
                              "end_byte": 256,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 257,
                              "end_byte": 262,
                              "text": "A * B",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 257,
                                  "end_byte": 258,
                                  "text": "A",
                                  "children": []
                                },
                                {
                                  "type": "*",
                                  "start_byte": 259,
                                  "end_byte": 260,
                                  "text": "*",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 261,
                                  "end_byte": 262,
                                  "text": "B",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 263,
                          "end_byte": 264,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "start_byte": 265,
                      "end_byte": 692,
                      "text": "if ( A > B ) { for ( j = 1 ; j <= B ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else if ( B > A ) { for ( j = 1 ; j <= A ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else { printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B ) ; }",
                      "children": [
                        {
                          "type": "if",
                          "start_byte": 265,
                          "end_byte": 267,
                          "text": "if",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 268,
                          "end_byte": 277,
                          "text": "( A > B )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 268,
                              "end_byte": 269,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 270,
                              "end_byte": 275,
                              "text": "A > B",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 270,
                                  "end_byte": 271,
                                  "text": "A",
                                  "children": []
                                },
                                {
                                  "type": ">",
                                  "start_byte": 272,
                                  "end_byte": 273,
                                  "text": ">",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 274,
                                  "end_byte": 275,
                                  "text": "B",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 276,
                              "end_byte": 277,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 278,
                          "end_byte": 450,
                          "text": "{ for ( j = 1 ; j <= B ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 278,
                              "end_byte": 279,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "for_statement",
                              "start_byte": 280,
                              "end_byte": 393,
                              "text": "for ( j = 1 ; j <= B ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } }",
                              "children": [
                                {
                                  "type": "for",
                                  "start_byte": 280,
                                  "end_byte": 283,
                                  "text": "for",
                                  "children": []
                                },
                                {
                                  "type": "(",
                                  "start_byte": 284,
                                  "end_byte": 285,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 286,
                                  "end_byte": 291,
                                  "text": "j = 1",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 286,
                                      "end_byte": 287,
                                      "text": "j",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 288,
                                      "end_byte": 289,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "number_literal",
                                      "start_byte": 290,
                                      "end_byte": 291,
                                      "text": "1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 292,
                                  "end_byte": 293,
                                  "text": ";",
                                  "children": []
                                },
                                {
                                  "type": "binary_expression",
                                  "start_byte": 294,
                                  "end_byte": 300,
                                  "text": "j <= B",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 294,
                                      "end_byte": 295,
                                      "text": "j",
                                      "children": []
                                    },
                                    {
                                      "type": "<=",
                                      "start_byte": 296,
                                      "end_byte": 298,
                                      "text": "<=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 299,
                                      "end_byte": 300,
                                      "text": "B",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 301,
                                  "end_byte": 302,
                                  "text": ";",
                                  "children": []
                                },
                                {
                                  "type": "update_expression",
                                  "start_byte": 303,
                                  "end_byte": 307,
                                  "text": "j ++",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 303,
                                      "end_byte": 304,
                                      "text": "j",
                                      "children": []
                                    },
                                    {
                                      "type": "++",
                                      "start_byte": 305,
                                      "end_byte": 307,
                                      "text": "++",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 308,
                                  "end_byte": 309,
                                  "text": ")",
                                  "children": []
                                },
                                {
                                  "type": "compound_statement",
                                  "start_byte": 310,
                                  "end_byte": 393,
                                  "text": "{ if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "start_byte": 310,
                                      "end_byte": 311,
                                      "text": "{",
                                      "children": []
                                    },
                                    {
                                      "type": "if_statement",
                                      "start_byte": 312,
                                      "end_byte": 391,
                                      "text": "if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; }",
                                      "children": [
                                        {
                                          "type": "if",
                                          "start_byte": 312,
                                          "end_byte": 314,
                                          "text": "if",
                                          "children": []
                                        },
                                        {
                                          "type": "condition_clause",
                                          "start_byte": 315,
                                          "end_byte": 343,
                                          "text": "( B % j == 0 && A % j == 0 )",
                                          "children": [
                                            {
                                              "type": "(",
                                              "start_byte": 315,
                                              "end_byte": 316,
                                              "text": "(",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_expression",
                                              "start_byte": 317,
                                              "end_byte": 341,
                                              "text": "B % j == 0 && A % j == 0",
                                              "children": [
                                                {
                                                  "type": "binary_expression",
                                                  "start_byte": 317,
                                                  "end_byte": 327,
                                                  "text": "B % j == 0",
                                                  "children": [
                                                    {
                                                      "type": "binary_expression",
                                                      "start_byte": 317,
                                                      "end_byte": 322,
                                                      "text": "B % j",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 317,
                                                          "end_byte": 318,
                                                          "text": "B",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "%",
                                                          "start_byte": 319,
                                                          "end_byte": 320,
                                                          "text": "%",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 321,
                                                          "end_byte": 322,
                                                          "text": "j",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "==",
                                                      "start_byte": 323,
                                                      "end_byte": 325,
                                                      "text": "==",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "number_literal",
                                                      "start_byte": 326,
                                                      "end_byte": 327,
                                                      "text": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "&&",
                                                  "start_byte": 328,
                                                  "end_byte": 330,
                                                  "text": "&&",
                                                  "children": []
                                                },
                                                {
                                                  "type": "binary_expression",
                                                  "start_byte": 331,
                                                  "end_byte": 341,
                                                  "text": "A % j == 0",
                                                  "children": [
                                                    {
                                                      "type": "binary_expression",
                                                      "start_byte": 331,
                                                      "end_byte": 336,
                                                      "text": "A % j",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 331,
                                                          "end_byte": 332,
                                                          "text": "A",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "%",
                                                          "start_byte": 333,
                                                          "end_byte": 334,
                                                          "text": "%",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 335,
                                                          "end_byte": 336,
                                                          "text": "j",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "==",
                                                      "start_byte": 337,
                                                      "end_byte": 339,
                                                      "text": "==",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "number_literal",
                                                      "start_byte": 340,
                                                      "end_byte": 341,
                                                      "text": "0",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ")",
                                              "start_byte": 342,
                                              "end_byte": 343,
                                              "text": ")",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "compound_statement",
                                          "start_byte": 344,
                                          "end_byte": 391,
                                          "text": "{ G = G * j ; B = B / j ; A = A / j ; j = 1 ; }",
                                          "children": [
                                            {
                                              "type": "{",
                                              "start_byte": 344,
                                              "end_byte": 345,
                                              "text": "{",
                                              "children": []
                                            },
                                            {
                                              "type": "expression_statement",
                                              "start_byte": 346,
                                              "end_byte": 357,
                                              "text": "G = G * j ;",
                                              "children": [
                                                {
                                                  "type": "assignment_expression",
                                                  "start_byte": 346,
                                                  "end_byte": 355,
                                                  "text": "G = G * j",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start_byte": 346,
                                                      "end_byte": 347,
                                                      "text": "G",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "start_byte": 348,
                                                      "end_byte": 349,
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_expression",
                                                      "start_byte": 350,
                                                      "end_byte": 355,
                                                      "text": "G * j",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 350,
                                                          "end_byte": 351,
                                                          "text": "G",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "*",
                                                          "start_byte": 352,
                                                          "end_byte": 353,
                                                          "text": "*",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 354,
                                                          "end_byte": 355,
                                                          "text": "j",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "start_byte": 356,
                                                  "end_byte": 357,
                                                  "text": ";",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "expression_statement",
                                              "start_byte": 358,
                                              "end_byte": 369,
                                              "text": "B = B / j ;",
                                              "children": [
                                                {
                                                  "type": "assignment_expression",
                                                  "start_byte": 358,
                                                  "end_byte": 367,
                                                  "text": "B = B / j",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start_byte": 358,
                                                      "end_byte": 359,
                                                      "text": "B",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "start_byte": 360,
                                                      "end_byte": 361,
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_expression",
                                                      "start_byte": 362,
                                                      "end_byte": 367,
                                                      "text": "B / j",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 362,
                                                          "end_byte": 363,
                                                          "text": "B",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "/",
                                                          "start_byte": 364,
                                                          "end_byte": 365,
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 366,
                                                          "end_byte": 367,
                                                          "text": "j",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "start_byte": 368,
                                                  "end_byte": 369,
                                                  "text": ";",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "expression_statement",
                                              "start_byte": 370,
                                              "end_byte": 381,
                                              "text": "A = A / j ;",
                                              "children": [
                                                {
                                                  "type": "assignment_expression",
                                                  "start_byte": 370,
                                                  "end_byte": 379,
                                                  "text": "A = A / j",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start_byte": 370,
                                                      "end_byte": 371,
                                                      "text": "A",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "start_byte": 372,
                                                      "end_byte": 373,
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_expression",
                                                      "start_byte": 374,
                                                      "end_byte": 379,
                                                      "text": "A / j",
                                                      "children": [
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 374,
                                                          "end_byte": 375,
                                                          "text": "A",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "/",
                                                          "start_byte": 376,
                                                          "end_byte": 377,
                                                          "text": "/",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "identifier",
                                                          "start_byte": 378,
                                                          "end_byte": 379,
                                                          "text": "j",
                                                          "children": []
                                                        }
                                                      ]
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "start_byte": 380,
                                                  "end_byte": 381,
                                                  "text": ";",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "expression_statement",
                                              "start_byte": 382,
                                              "end_byte": 389,
                                              "text": "j = 1 ;",
                                              "children": [
                                                {
                                                  "type": "assignment_expression",
                                                  "start_byte": 382,
                                                  "end_byte": 387,
                                                  "text": "j = 1",
                                                  "children": [
                                                    {
                                                      "type": "identifier",
                                                      "start_byte": 382,
                                                      "end_byte": 383,
                                                      "text": "j",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "=",
                                                      "start_byte": 384,
                                                      "end_byte": 385,
                                                      "text": "=",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "number_literal",
                                                      "start_byte": 386,
                                                      "end_byte": 387,
                                                      "text": "1",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ";",
                                                  "start_byte": 388,
                                                  "end_byte": 389,
                                                  "text": ";",
                                                  "children": []
                                                }
                                              ]
                                            },
                                            {
                                              "type": "}",
                                              "start_byte": 390,
                                              "end_byte": 391,
                                              "text": "}",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "start_byte": 392,
                                      "end_byte": 393,
                                      "text": "}",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 394,
                              "end_byte": 405,
                              "text": "L = p / G ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 394,
                                  "end_byte": 403,
                                  "text": "L = p / G",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 394,
                                      "end_byte": 395,
                                      "text": "L",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 396,
                                      "end_byte": 397,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 398,
                                      "end_byte": 403,
                                      "text": "p / G",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 398,
                                          "end_byte": 399,
                                          "text": "p",
                                          "children": []
                                        },
                                        {
                                          "type": "/",
                                          "start_byte": 400,
                                          "end_byte": 401,
                                          "text": "/",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 402,
                                          "end_byte": 403,
                                          "text": "G",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 404,
                                  "end_byte": 405,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 406,
                              "end_byte": 448,
                              "text": "printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ;",
                              "children": [
                                {
                                  "type": "call_expression",
                                  "start_byte": 406,
                                  "end_byte": 446,
                                  "text": "printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L )",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 406,
                                      "end_byte": 412,
                                      "text": "printf",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "start_byte": 413,
                                      "end_byte": 446,
                                      "text": "( \"GCD=%d  \\n LCM=%d\\n\" , G , L )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start_byte": 413,
                                          "end_byte": 414,
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "string_literal",
                                          "start_byte": 415,
                                          "end_byte": 436,
                                          "text": "\"GCD=%d  \\n LCM=%d\\n\"",
                                          "children": [
                                            {
                                              "type": "\"",
                                              "start_byte": 415,
                                              "end_byte": 416,
                                              "text": "\"",
                                              "children": []
                                            },
                                            {
                                              "type": "string_content",
                                              "start_byte": 416,
                                              "end_byte": 424,
                                              "text": "GCD=%d  ",
                                              "children": []
                                            },
                                            {
                                              "type": "escape_sequence",
                                              "start_byte": 424,
                                              "end_byte": 426,
                                              "text": "\\n",
                                              "children": []
                                            },
                                            {
                                              "type": "string_content",
                                              "start_byte": 426,
                                              "end_byte": 433,
                                              "text": " LCM=%d",
                                              "children": []
                                            },
                                            {
                                              "type": "escape_sequence",
                                              "start_byte": 433,
                                              "end_byte": 435,
                                              "text": "\\n",
                                              "children": []
                                            },
                                            {
                                              "type": "\"",
                                              "start_byte": 435,
                                              "end_byte": 436,
                                              "text": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ",",
                                          "start_byte": 437,
                                          "end_byte": 438,
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 439,
                                          "end_byte": 440,
                                          "text": "G",
                                          "children": []
                                        },
                                        {
                                          "type": ",",
                                          "start_byte": 441,
                                          "end_byte": 442,
                                          "text": ",",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 443,
                                          "end_byte": 444,
                                          "text": "L",
                                          "children": []
                                        },
                                        {
                                          "type": ")",
                                          "start_byte": 445,
                                          "end_byte": 446,
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 447,
                                  "end_byte": 448,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 449,
                              "end_byte": 450,
                              "text": "}",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "else_clause",
                          "start_byte": 451,
                          "end_byte": 692,
                          "text": "else if ( B > A ) { for ( j = 1 ; j <= A ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else { printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B ) ; }",
                          "children": [
                            {
                              "type": "else",
                              "start_byte": 451,
                              "end_byte": 455,
                              "text": "else",
                              "children": []
                            },
                            {
                              "type": "if_statement",
                              "start_byte": 456,
                              "end_byte": 692,
                              "text": "if ( B > A ) { for ( j = 1 ; j <= A ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; } else { printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B ) ; }",
                              "children": [
                                {
                                  "type": "if",
                                  "start_byte": 456,
                                  "end_byte": 458,
                                  "text": "if",
                                  "children": []
                                },
                                {
                                  "type": "condition_clause",
                                  "start_byte": 459,
                                  "end_byte": 468,
                                  "text": "( B > A )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 459,
                                      "end_byte": 460,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 461,
                                      "end_byte": 466,
                                      "text": "B > A",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 461,
                                          "end_byte": 462,
                                          "text": "B",
                                          "children": []
                                        },
                                        {
                                          "type": ">",
                                          "start_byte": 463,
                                          "end_byte": 464,
                                          "text": ">",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 465,
                                          "end_byte": 466,
                                          "text": "A",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 467,
                                      "end_byte": 468,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "compound_statement",
                                  "start_byte": 469,
                                  "end_byte": 641,
                                  "text": "{ for ( j = 1 ; j <= A ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } } L = p / G ; printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ; }",
                                  "children": [
                                    {
                                      "type": "{",
                                      "start_byte": 469,
                                      "end_byte": 470,
                                      "text": "{",
                                      "children": []
                                    },
                                    {
                                      "type": "for_statement",
                                      "start_byte": 471,
                                      "end_byte": 584,
                                      "text": "for ( j = 1 ; j <= A ; j ++ ) { if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } }",
                                      "children": [
                                        {
                                          "type": "for",
                                          "start_byte": 471,
                                          "end_byte": 474,
                                          "text": "for",
                                          "children": []
                                        },
                                        {
                                          "type": "(",
                                          "start_byte": 475,
                                          "end_byte": 476,
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "assignment_expression",
                                          "start_byte": 477,
                                          "end_byte": 482,
                                          "text": "j = 1",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 477,
                                              "end_byte": 478,
                                              "text": "j",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "start_byte": 479,
                                              "end_byte": 480,
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "number_literal",
                                              "start_byte": 481,
                                              "end_byte": 482,
                                              "text": "1",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "start_byte": 483,
                                          "end_byte": 484,
                                          "text": ";",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_expression",
                                          "start_byte": 485,
                                          "end_byte": 491,
                                          "text": "j <= A",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 485,
                                              "end_byte": 486,
                                              "text": "j",
                                              "children": []
                                            },
                                            {
                                              "type": "<=",
                                              "start_byte": 487,
                                              "end_byte": 489,
                                              "text": "<=",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "start_byte": 490,
                                              "end_byte": 491,
                                              "text": "A",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "start_byte": 492,
                                          "end_byte": 493,
                                          "text": ";",
                                          "children": []
                                        },
                                        {
                                          "type": "update_expression",
                                          "start_byte": 494,
                                          "end_byte": 498,
                                          "text": "j ++",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 494,
                                              "end_byte": 495,
                                              "text": "j",
                                              "children": []
                                            },
                                            {
                                              "type": "++",
                                              "start_byte": 496,
                                              "end_byte": 498,
                                              "text": "++",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start_byte": 499,
                                          "end_byte": 500,
                                          "text": ")",
                                          "children": []
                                        },
                                        {
                                          "type": "compound_statement",
                                          "start_byte": 501,
                                          "end_byte": 584,
                                          "text": "{ if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; } }",
                                          "children": [
                                            {
                                              "type": "{",
                                              "start_byte": 501,
                                              "end_byte": 502,
                                              "text": "{",
                                              "children": []
                                            },
                                            {
                                              "type": "if_statement",
                                              "start_byte": 503,
                                              "end_byte": 582,
                                              "text": "if ( B % j == 0 && A % j == 0 ) { G = G * j ; B = B / j ; A = A / j ; j = 1 ; }",
                                              "children": [
                                                {
                                                  "type": "if",
                                                  "start_byte": 503,
                                                  "end_byte": 505,
                                                  "text": "if",
                                                  "children": []
                                                },
                                                {
                                                  "type": "condition_clause",
                                                  "start_byte": 506,
                                                  "end_byte": 534,
                                                  "text": "( B % j == 0 && A % j == 0 )",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start_byte": 506,
                                                      "end_byte": 507,
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "binary_expression",
                                                      "start_byte": 508,
                                                      "end_byte": 532,
                                                      "text": "B % j == 0 && A % j == 0",
                                                      "children": [
                                                        {
                                                          "type": "binary_expression",
                                                          "start_byte": 508,
                                                          "end_byte": 518,
                                                          "text": "B % j == 0",
                                                          "children": [
                                                            {
                                                              "type": "binary_expression",
                                                              "start_byte": 508,
                                                              "end_byte": 513,
                                                              "text": "B % j",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "start_byte": 508,
                                                                  "end_byte": 509,
                                                                  "text": "B",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "%",
                                                                  "start_byte": 510,
                                                                  "end_byte": 511,
                                                                  "text": "%",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start_byte": 512,
                                                                  "end_byte": 513,
                                                                  "text": "j",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "==",
                                                              "start_byte": 514,
                                                              "end_byte": 516,
                                                              "text": "==",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "number_literal",
                                                              "start_byte": 517,
                                                              "end_byte": 518,
                                                              "text": "0",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": "&&",
                                                          "start_byte": 519,
                                                          "end_byte": 521,
                                                          "text": "&&",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "binary_expression",
                                                          "start_byte": 522,
                                                          "end_byte": 532,
                                                          "text": "A % j == 0",
                                                          "children": [
                                                            {
                                                              "type": "binary_expression",
                                                              "start_byte": 522,
                                                              "end_byte": 527,
                                                              "text": "A % j",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "start_byte": 522,
                                                                  "end_byte": 523,
                                                                  "text": "A",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "%",
                                                                  "start_byte": 524,
                                                                  "end_byte": 525,
                                                                  "text": "%",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start_byte": 526,
                                                                  "end_byte": 527,
                                                                  "text": "j",
                                                                  "children": []
                                                                }
                                                              ]
                                                            },
                                                            {
                                                              "type": "==",
                                                              "start_byte": 528,
                                                              "end_byte": 530,
                                                              "text": "==",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "number_literal",
                                                              "start_byte": 531,
                                                              "end_byte": 532,
                                                              "text": "0",
                                                              "children": []
                                                            }
                                                          ]
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start_byte": 533,
                                                      "end_byte": 534,
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": "compound_statement",
                                                  "start_byte": 535,
                                                  "end_byte": 582,
                                                  "text": "{ G = G * j ; B = B / j ; A = A / j ; j = 1 ; }",
                                                  "children": [
                                                    {
                                                      "type": "{",
                                                      "start_byte": 535,
                                                      "end_byte": 536,
                                                      "text": "{",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "expression_statement",
                                                      "start_byte": 537,
                                                      "end_byte": 548,
                                                      "text": "G = G * j ;",
                                                      "children": [
                                                        {
                                                          "type": "assignment_expression",
                                                          "start_byte": 537,
                                                          "end_byte": 546,
                                                          "text": "G = G * j",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "start_byte": 537,
                                                              "end_byte": 538,
                                                              "text": "G",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "=",
                                                              "start_byte": 539,
                                                              "end_byte": 540,
                                                              "text": "=",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_expression",
                                                              "start_byte": 541,
                                                              "end_byte": 546,
                                                              "text": "G * j",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "start_byte": 541,
                                                                  "end_byte": 542,
                                                                  "text": "G",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "*",
                                                                  "start_byte": 543,
                                                                  "end_byte": 544,
                                                                  "text": "*",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start_byte": 545,
                                                                  "end_byte": 546,
                                                                  "text": "j",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ";",
                                                          "start_byte": 547,
                                                          "end_byte": 548,
                                                          "text": ";",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "expression_statement",
                                                      "start_byte": 549,
                                                      "end_byte": 560,
                                                      "text": "B = B / j ;",
                                                      "children": [
                                                        {
                                                          "type": "assignment_expression",
                                                          "start_byte": 549,
                                                          "end_byte": 558,
                                                          "text": "B = B / j",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "start_byte": 549,
                                                              "end_byte": 550,
                                                              "text": "B",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "=",
                                                              "start_byte": 551,
                                                              "end_byte": 552,
                                                              "text": "=",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_expression",
                                                              "start_byte": 553,
                                                              "end_byte": 558,
                                                              "text": "B / j",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "start_byte": 553,
                                                                  "end_byte": 554,
                                                                  "text": "B",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "/",
                                                                  "start_byte": 555,
                                                                  "end_byte": 556,
                                                                  "text": "/",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start_byte": 557,
                                                                  "end_byte": 558,
                                                                  "text": "j",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ";",
                                                          "start_byte": 559,
                                                          "end_byte": 560,
                                                          "text": ";",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "expression_statement",
                                                      "start_byte": 561,
                                                      "end_byte": 572,
                                                      "text": "A = A / j ;",
                                                      "children": [
                                                        {
                                                          "type": "assignment_expression",
                                                          "start_byte": 561,
                                                          "end_byte": 570,
                                                          "text": "A = A / j",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "start_byte": 561,
                                                              "end_byte": 562,
                                                              "text": "A",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "=",
                                                              "start_byte": 563,
                                                              "end_byte": 564,
                                                              "text": "=",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "binary_expression",
                                                              "start_byte": 565,
                                                              "end_byte": 570,
                                                              "text": "A / j",
                                                              "children": [
                                                                {
                                                                  "type": "identifier",
                                                                  "start_byte": 565,
                                                                  "end_byte": 566,
                                                                  "text": "A",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "/",
                                                                  "start_byte": 567,
                                                                  "end_byte": 568,
                                                                  "text": "/",
                                                                  "children": []
                                                                },
                                                                {
                                                                  "type": "identifier",
                                                                  "start_byte": 569,
                                                                  "end_byte": 570,
                                                                  "text": "j",
                                                                  "children": []
                                                                }
                                                              ]
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ";",
                                                          "start_byte": 571,
                                                          "end_byte": 572,
                                                          "text": ";",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "expression_statement",
                                                      "start_byte": 573,
                                                      "end_byte": 580,
                                                      "text": "j = 1 ;",
                                                      "children": [
                                                        {
                                                          "type": "assignment_expression",
                                                          "start_byte": 573,
                                                          "end_byte": 578,
                                                          "text": "j = 1",
                                                          "children": [
                                                            {
                                                              "type": "identifier",
                                                              "start_byte": 573,
                                                              "end_byte": 574,
                                                              "text": "j",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "=",
                                                              "start_byte": 575,
                                                              "end_byte": 576,
                                                              "text": "=",
                                                              "children": []
                                                            },
                                                            {
                                                              "type": "number_literal",
                                                              "start_byte": 577,
                                                              "end_byte": 578,
                                                              "text": "1",
                                                              "children": []
                                                            }
                                                          ]
                                                        },
                                                        {
                                                          "type": ";",
                                                          "start_byte": 579,
                                                          "end_byte": 580,
                                                          "text": ";",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": "}",
                                                      "start_byte": 581,
                                                      "end_byte": 582,
                                                      "text": "}",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": "}",
                                              "start_byte": 583,
                                              "end_byte": 584,
                                              "text": "}",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": "expression_statement",
                                      "start_byte": 585,
                                      "end_byte": 596,
                                      "text": "L = p / G ;",
                                      "children": [
                                        {
                                          "type": "assignment_expression",
                                          "start_byte": 585,
                                          "end_byte": 594,
                                          "text": "L = p / G",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 585,
                                              "end_byte": 586,
                                              "text": "L",
                                              "children": []
                                            },
                                            {
                                              "type": "=",
                                              "start_byte": 587,
                                              "end_byte": 588,
                                              "text": "=",
                                              "children": []
                                            },
                                            {
                                              "type": "binary_expression",
                                              "start_byte": 589,
                                              "end_byte": 594,
                                              "text": "p / G",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 589,
                                                  "end_byte": 590,
                                                  "text": "p",
                                                  "children": []
                                                },
                                                {
                                                  "type": "/",
                                                  "start_byte": 591,
                                                  "end_byte": 592,
                                                  "text": "/",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 593,
                                                  "end_byte": 594,
                                                  "text": "G",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "start_byte": 595,
                                          "end_byte": 596,
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "expression_statement",
                                      "start_byte": 597,
                                      "end_byte": 639,
                                      "text": "printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L ) ;",
                                      "children": [
                                        {
                                          "type": "call_expression",
                                          "start_byte": 597,
                                          "end_byte": 637,
                                          "text": "printf ( \"GCD=%d  \\n LCM=%d\\n\" , G , L )",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 597,
                                              "end_byte": 603,
                                              "text": "printf",
                                              "children": []
                                            },
                                            {
                                              "type": "argument_list",
                                              "start_byte": 604,
                                              "end_byte": 637,
                                              "text": "( \"GCD=%d  \\n LCM=%d\\n\" , G , L )",
                                              "children": [
                                                {
                                                  "type": "(",
                                                  "start_byte": 604,
                                                  "end_byte": 605,
                                                  "text": "(",
                                                  "children": []
                                                },
                                                {
                                                  "type": "string_literal",
                                                  "start_byte": 606,
                                                  "end_byte": 627,
                                                  "text": "\"GCD=%d  \\n LCM=%d\\n\"",
                                                  "children": [
                                                    {
                                                      "type": "\"",
                                                      "start_byte": 606,
                                                      "end_byte": 607,
                                                      "text": "\"",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "string_content",
                                                      "start_byte": 607,
                                                      "end_byte": 615,
                                                      "text": "GCD=%d  ",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "escape_sequence",
                                                      "start_byte": 615,
                                                      "end_byte": 617,
                                                      "text": "\\n",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "string_content",
                                                      "start_byte": 617,
                                                      "end_byte": 624,
                                                      "text": " LCM=%d",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "escape_sequence",
                                                      "start_byte": 624,
                                                      "end_byte": 626,
                                                      "text": "\\n",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "\"",
                                                      "start_byte": 626,
                                                      "end_byte": 627,
                                                      "text": "\"",
                                                      "children": []
                                                    }
                                                  ]
                                                },
                                                {
                                                  "type": ",",
                                                  "start_byte": 628,
                                                  "end_byte": 629,
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 630,
                                                  "end_byte": 631,
                                                  "text": "G",
                                                  "children": []
                                                },
                                                {
                                                  "type": ",",
                                                  "start_byte": 632,
                                                  "end_byte": 633,
                                                  "text": ",",
                                                  "children": []
                                                },
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 634,
                                                  "end_byte": 635,
                                                  "text": "L",
                                                  "children": []
                                                },
                                                {
                                                  "type": ")",
                                                  "start_byte": 636,
                                                  "end_byte": 637,
                                                  "text": ")",
                                                  "children": []
                                                }
                                              ]
                                            }
                                          ]
                                        },
                                        {
                                          "type": ";",
                                          "start_byte": 638,
                                          "end_byte": 639,
                                          "text": ";",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "}",
                                      "start_byte": 640,
                                      "end_byte": 641,
                                      "text": "}",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "else_clause",
                                  "start_byte": 642,
                                  "end_byte": 692,
                                  "text": "else { printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B ) ; }",
                                  "children": [
                                    {
                                      "type": "else",
                                      "start_byte": 642,
                                      "end_byte": 646,
                                      "text": "else",
                                      "children": []
                                    },
                                    {
                                      "type": "compound_statement",
                                      "start_byte": 647,
                                      "end_byte": 692,
                                      "text": "{ printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B ) ; }",
                                      "children": [
                                        {
                                          "type": "{",
                                          "start_byte": 647,
                                          "end_byte": 648,
                                          "text": "{",
                                          "children": []
                                        },
                                        {
                                          "type": "expression_statement",
                                          "start_byte": 649,
                                          "end_byte": 690,
                                          "text": "printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B ) ;",
                                          "children": [
                                            {
                                              "type": "call_expression",
                                              "start_byte": 649,
                                              "end_byte": 688,
                                              "text": "printf ( \"GCD=%d \\n LCM=%d\\n\" , A , B )",
                                              "children": [
                                                {
                                                  "type": "identifier",
                                                  "start_byte": 649,
                                                  "end_byte": 655,
                                                  "text": "printf",
                                                  "children": []
                                                },
                                                {
                                                  "type": "argument_list",
                                                  "start_byte": 656,
                                                  "end_byte": 688,
                                                  "text": "( \"GCD=%d \\n LCM=%d\\n\" , A , B )",
                                                  "children": [
                                                    {
                                                      "type": "(",
                                                      "start_byte": 656,
                                                      "end_byte": 657,
                                                      "text": "(",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "string_literal",
                                                      "start_byte": 658,
                                                      "end_byte": 678,
                                                      "text": "\"GCD=%d \\n LCM=%d\\n\"",
                                                      "children": [
                                                        {
                                                          "type": "\"",
                                                          "start_byte": 658,
                                                          "end_byte": 659,
                                                          "text": "\"",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "string_content",
                                                          "start_byte": 659,
                                                          "end_byte": 666,
                                                          "text": "GCD=%d ",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "escape_sequence",
                                                          "start_byte": 666,
                                                          "end_byte": 668,
                                                          "text": "\\n",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "string_content",
                                                          "start_byte": 668,
                                                          "end_byte": 675,
                                                          "text": " LCM=%d",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "escape_sequence",
                                                          "start_byte": 675,
                                                          "end_byte": 677,
                                                          "text": "\\n",
                                                          "children": []
                                                        },
                                                        {
                                                          "type": "\"",
                                                          "start_byte": 677,
                                                          "end_byte": 678,
                                                          "text": "\"",
                                                          "children": []
                                                        }
                                                      ]
                                                    },
                                                    {
                                                      "type": ",",
                                                      "start_byte": 679,
                                                      "end_byte": 680,
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start_byte": 681,
                                                      "end_byte": 682,
                                                      "text": "A",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ",",
                                                      "start_byte": 683,
                                                      "end_byte": 684,
                                                      "text": ",",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": "identifier",
                                                      "start_byte": 685,
                                                      "end_byte": 686,
                                                      "text": "B",
                                                      "children": []
                                                    },
                                                    {
                                                      "type": ")",
                                                      "start_byte": 687,
                                                      "end_byte": 688,
                                                      "text": ")",
                                                      "children": []
                                                    }
                                                  ]
                                                }
                                              ]
                                            },
                                            {
                                              "type": ";",
                                              "start_byte": 689,
                                              "end_byte": 690,
                                              "text": ";",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": "}",
                                          "start_byte": 691,
                                          "end_byte": 692,
                                          "text": "}",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 693,
                      "end_byte": 694,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 695,
              "end_byte": 696,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}