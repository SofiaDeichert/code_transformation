int rec ( int n ) { if ( n == 0 ) { return 0 ; } else return ( n + rec ( n - 1 ) ) ; } void sumoftriangle ( int a ) { int arr [ 1000 ] ; int c ; int d [ 1000 ] ; int k ; int i = 0 ; int p = 0 ; int q = 1 ; int r = 2 ; int x , y , z , f , b , v ; int n = a ; int l , j ; int e ; c = a + 1 ; e = rec ( c ) ; for ( k = 0 ; k < e ; k ++ ) { scanf ( "%d" , & arr [ k ] ) ; } for ( i = 0 ; i < a ; i ++ ) { x = arr [ p ] ; y = arr [ q ] ; z = arr [ r ] ; b = x + y + z ; d [ i ] = b ; f = ( q - p ) + 1 ; p = q ; q = p + f ; r = q + 1 ; } for ( l = 0 ; l < n ; l ++ ) { for ( j = l + 1 ; j < n - 1 ; j ++ ) { if ( d [ l ] > d [ j ] ) { int temp = d [ l ] ; d [ l ] = d [ j ] ; d [ j ] = temp ; } } } printf ( "\n\n%d\n" , d [ n - 1 ] ) ; } int main ( ) { int m , e , a , g ; scanf ( "%d" , & m ) ; for ( g = 0 ; g < m ; g ++ ) { scanf ( "%d" , & a ) ; e = a - 1 ; sumoftriangle ( e ) ; } return 0 ; }