int a [ 50005 ] ; void merge ( int a [ ] , int st , int mid , int end ) { int i , j , k ; int n = mid - st + 1 ; int m = end - mid ; int l [ n ] , r [ m ] ; for ( i = 0 ; i < n ; i ++ ) l [ i ] = a [ st + i ] ; for ( j = 0 ; j < m ; j ++ ) r [ j ] = a [ mid + 1 + j ] ; i = 0 ; j = 0 ; k = st ; while ( i < n && j < m ) { if ( l [ i ] < r [ j ] ) { a [ k ] = l [ i ] ; i ++ ; k ++ ; } else { a [ k ] = r [ j ] ; j ++ ; k ++ ; } } while ( i < n ) { a [ k ] = l [ i ] ; k ++ ; i ++ ; } while ( j < m ) { a [ k ] = r [ j ] ; k ++ ; j ++ ; } } void sort ( int a [ ] , int st , int end ) { int mid ; if ( st < end ) { mid = st + ( ( end - st ) / 2 ) ; sort ( a , st , mid ) ; sort ( a , mid + 1 , end ) ; merge ( a , st , mid , end ) ; } } int main ( ) { int t , i , n , min ; long long int cost ; scanf ( "%d" , & t ) ; while ( t -- ) { scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & a [ i ] ) ; } sort ( a , 0 , n - 1 ) ; cost = a [ 0 ] * ( n - 1 ) ; printf ( "%lld\n" , cost ) ; } return 0 ; }