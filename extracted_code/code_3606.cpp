int sum_triangle ( int * * trdata , int r , int c , int n ) { int s1 , s2 ; if ( n == 1 ) return trdata [ r ] [ c ] ; else { s1 = trdata [ r ] [ c ] + sum_triangle ( trdata , r + 1 , c , n - 1 ) ; s2 = trdata [ r ] [ c ] + sum_triangle ( trdata , r + 1 , c + 1 , n - 1 ) ; return ( s1 > s2 ? s1 : s2 ) ; } } int main ( ) { int n , i , j , k , * trn , flag = 1 , * * * trdata , * sum , key ; scanf ( "%d" , & n ) ; sum = ( int * ) malloc ( n * sizeof ( int ) ) ; trn = ( int * ) malloc ( n * sizeof ( int ) ) ; trdata = ( int * * * ) malloc ( n * sizeof ( int * * ) ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & trn [ i ] ) ; trdata [ i ] = ( int * * ) malloc ( trn [ i ] * sizeof ( int * ) ) ; for ( j = 0 ; j < trn [ i ] ; j ++ ) { flag = 1 ; for ( k = 0 ; k <= j ; k ++ ) { if ( flag ) { trdata [ i ] [ j ] = ( int * ) malloc ( ( j + 1 ) * sizeof ( int ) ) ; flag = 0 ; } scanf ( "%d" , & trdata [ i ] [ j ] [ k ] ) ; } } } for ( i = 0 ; i < n ; i ++ ) { printf ( "\n%d" , sum_triangle ( trdata [ i ] , 0 , 0 , trn [ i ] ) ) ; } }