int sit ( int , int , int , int * , int * * ) ; int main ( void ) { int t , n , * triangle , i , * * st ; scanf ( "%d" , & t ) ; while ( t -- ) { scanf ( "%d" , & n ) ; triangle = ( int * ) malloc ( sizeof ( int ) * n * ( n + 1 ) / 2 ) ; st = ( int * * ) malloc ( sizeof ( int ) * n * n * ( n + 1 ) / 2 ) ; for ( i = 0 ; i < n ; i ++ ) memset ( st + i , 0 , n * n * ( n + 1 ) / 2 ) ; for ( i = 0 ; i < ( n * ( n + 1 ) / 2 ) ; i ++ ) scanf ( "%d" , & triangle [ i ] ) ; printf ( "%d\n" , sit ( 1 , 1 , n , triangle , st ) ) ; free ( triangle ) ; free ( st ) ; } return 0 ; } int sit ( int x , int l , int n , int * triangle , int * * st ) { if ( l == n - 1 ) return triangle [ x - 1 ] + MAX ( triangle [ x + l - 1 ] , triangle [ x + l + 1 - 1 ] ) ; else { int a = 0 , b = 0 ; if ( st [ x + 1 ] [ l + 1 ] != 0 ) a = st [ x + 1 ] [ l + 1 ] ; else a = st [ x + l ] [ l + 1 ] = sit ( x + l , l + 1 , n , triangle , st ) ; if ( st [ x + 1 + 1 ] [ l + 1 ] != 0 ) b = st [ x + 1 + 1 ] [ l + 1 ] ; else b = st [ x + l + 1 ] [ l + 1 ] = sit ( x + l + 1 , l + 1 , n , triangle , st ) ; st [ x ] [ l ] = triangle [ x - 1 ] + MAX ( a , b ) ; return st [ x ] [ l ] ; } }