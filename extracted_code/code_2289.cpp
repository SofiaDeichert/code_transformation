int * tree ; int levels = 0 ; int treeSize ( int levels ) { return ( levels * ( levels + 1 ) ) / 2 ; } int findBranch ( int level , int pos ) { return treeSize ( level ) + pos ; } int findBiggestSum ( int level , int pos ) { int c = tree [ findBranch ( level , pos ) ] ; if ( level == levels - 1 ) return c ; if ( level == levels - 2 ) { return c + ( tree [ findBranch ( level + 1 , pos ) ] > tree [ findBranch ( level + 1 , pos + 1 ) ] ? tree [ findBranch ( level + 1 , pos ) ] : tree [ findBranch ( level + 1 , pos + 1 ) ] ) ; } return c + ( findBiggestSum ( level + 1 , pos ) > findBiggestSum ( level + 1 , pos + 1 ) ? findBiggestSum ( level + 1 , pos ) : findBiggestSum ( level + 1 , pos + 1 ) ) ; } int main ( int argc , char * * argv ) { int n ; int prevLevels ; tree = malloc ( sizeof ( int ) ) ; int i ; int size = 0 ; scanf ( "%d" , & n ) ; while ( n -- > 0 ) { prevLevels = levels ; scanf ( "%d" , & levels ) ; size = treeSize ( levels ) ; if ( levels > prevLevels ) { tree = ( int * ) realloc ( tree , size * sizeof ( int ) ) ; } for ( i = 0 ; i < size ; ++ i ) { scanf ( "%d" , & tree [ i ] ) ; } printf ( "%d\n" , findBiggestSum ( 0 , 0 ) ) ; } free ( tree ) ; return 0 ; }