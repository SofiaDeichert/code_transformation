void initial ( int a [ ] [ MAX ] ) ; void print_arr ( int a [ ] [ MAX ] , int n ) ; int maks ( int t1 , int t2 ) ; int solve ( int j , int k , int a [ ] [ MAX ] , int n ) ; int solve2 ( int j , int k , int a [ ] [ MAX ] , int n , int cache [ ] [ MAX ] ) ; int main ( ) { int a [ MAX ] [ MAX ] ; int cache [ MAX ] [ MAX ] ; initial ( a ) ; int t ; scanf ( "%d" , & t ) ; int i = 1 ; int n ; while ( i <= t ) { scanf ( "%d" , & n ) ; initial ( a ) ; initial ( cache ) ; int j , k ; for ( j = 0 ; j < n ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) scanf ( "%d" , & a [ j ] [ k ] ) ; } printf ( "%d\n" , solve2 ( 0 , 0 , a , n , cache ) ) ; i ++ ; } return 0 ; } int solve ( int j , int k , int a [ ] [ MAX ] , int n ) { if ( j > n ) return 0 ; else { int t1 = solve ( j + 1 , k , a , n ) ; int t2 = solve ( j + 1 , k + 1 , a , n ) ; int hasil = maks ( t1 , t2 ) + a [ j ] [ k ] ; return hasil ; } } int solve2 ( int j , int k , int a [ ] [ MAX ] , int n , int cache [ ] [ MAX ] ) { if ( j > n ) return 0 ; else { if ( a [ j ] [ k ] == - 1 ) return cache [ j ] [ k ] ; else { int t1 = solve2 ( j + 1 , k , a , n , cache ) ; int t2 = solve2 ( j + 1 , k + 1 , a , n , cache ) ; int hasil = maks ( t1 , t2 ) + a [ j ] [ k ] ; a [ j ] [ k ] = - 1 ; cache [ j ] [ k ] = hasil ; return hasil ; } } } int maks ( int t1 , int t2 ) { if ( t1 > t2 ) return t1 ; else return t2 ; } void initial ( int a [ ] [ MAX ] ) { int i , j ; for ( i = 0 ; i < MAX ; i ++ ) { for ( j = 0 ; j < MAX ; j ++ ) a [ i ] [ j ] = 0 ; } } void print_arr ( int a [ ] [ MAX ] , int n ) { int l , m ; for ( l = 0 ; l < n ; l ++ ) { for ( m = 0 ; m < n ; m ++ ) printf ( "%d " , a [ l ] [ m ] ) ; printf ( "\n" ) ; } }