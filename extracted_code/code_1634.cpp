int triangle [ 100 ] [ 100 ] ; int lines , level , offset ; int indices [ 128 ] ; int sumtrian ( ) ; int bump ( ) ; int main ( ) { int testcases , i , j , k ; int sum , temp ; scanf ( "%d" , & testcases ) ; for ( i = 0 ; i < testcases ; i ++ ) { scanf ( "%d" , & lines ) ; for ( j = 0 ; j < lines ; j ++ ) { indices [ j ] = 0 ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( "%d" , & triangle [ j ] [ k ] ) ; } } if ( lines == 1 ) { printf ( "%d\n" , triangle [ 0 ] [ 0 ] ) ; continue ; } sum = 0 ; offset = 1 ; level = lines - 1 ; while ( 1 ) { temp = sumtrian ( ) ; if ( temp > sum ) sum = temp ; if ( bump ( ) ) break ; } printf ( "%d\n" , sum ) ; } return 1 ; } int sumtrian ( ) { register int i ; int sum = 0 ; for ( i = 0 ; i < lines ; i ++ ) { sum += triangle [ i ] [ indices [ i ] ] ; } return sum ; } int bump ( ) { if ( level == 0 || offset > level ) { level = lines - 2 ; offset ++ ; indices [ lines - 1 ] = offset ; return offset == lines ; } else { indices [ level -- ] = offset ; return 0 ; } }