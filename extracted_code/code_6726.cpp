static int parseint ( void ) { int c , n ; n = getchar_unlocked ( ) - '0' ; while ( ( c = getchar_unlocked ( ) ) >= '0' ) n = 10 * n + c - '0' ; return n ; } int max ( int a , int b ) { if ( a >= b ) return a ; else return b ; } int main ( ) { int no_of_rows , i , j , max_value = 0 ; int tests ; tests = parseint ( ) ; while ( tests -- ) { scanf ( "%d" , & no_of_rows ) ; int lower_triangle [ no_of_rows ] [ no_of_rows ] ; for ( i = 0 ; i < no_of_rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( "%d" , & lower_triangle [ i ] [ j ] ) ; } for ( i = 1 ; i < no_of_rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { if ( j == 0 ) { lower_triangle [ i ] [ j ] = lower_triangle [ i ] [ j ] + lower_triangle [ i - 1 ] [ j ] ; } else if ( lower_triangle [ ( i - 1 ) ] [ j ] >= lower_triangle [ ( i - 1 ) ] [ ( j - 1 ) ] && j == i && ! ( j == 0 ) ) { lower_triangle [ i ] [ j ] = lower_triangle [ i - 1 ] [ j - 1 ] + lower_triangle [ i ] [ j ] ; } else { lower_triangle [ i ] [ j ] = lower_triangle [ i ] [ j ] + max ( lower_triangle [ i - 1 ] [ j ] , lower_triangle [ i - 1 ] [ j - 1 ] ) ; } } } max_value = 0 ; for ( j = 0 ; j < no_of_rows ; j ++ ) { if ( lower_triangle [ no_of_rows - 1 ] [ j ] > max_value ) max_value = lower_triangle [ no_of_rows - 1 ] [ j ] ; } printf ( "%d\n" , max_value ) ; } return 0 ; }