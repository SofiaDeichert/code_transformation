int getStartIndexOfRow ( int row ) { return ( 1 + row ) / 2.0 * row ; } int getLargestSum ( int * numbers ) { return getLargestSumRec ( numbers , 0 , 0 ) ; } int getLargestSumRec ( int * numbers , int currentRow , int positionInRow ) { int sum1 ; int sum2 ; int erg ; if ( numbers [ getStartIndexOfRow ( currentRow ) ] == - 1 ) { return 0 ; } sum1 = getLargestSumRec ( numbers , currentRow + 1 , positionInRow ) ; sum2 = getLargestSumRec ( numbers , currentRow + 1 , positionInRow + 1 ) ; erg = sum1 > sum2 ? sum1 : sum2 ; erg += numbers [ getStartIndexOfRow ( currentRow ) + positionInRow ] ; return erg ; } int main ( ) { int numOfTestCases ; int numOfRows ; int largestSum ; int i , j , k ; int arrayCounter = 0 ; int numbers [ ARRAY_LEN ] ; scanf ( "%d\n" , & numOfTestCases ) ; for ( i = 0 ; i < numOfTestCases ; i ++ ) { scanf ( "%d\n" , & numOfRows ) ; arrayCounter = 0 ; for ( j = 0 ; j < numOfRows ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( "%d " , & numbers [ arrayCounter ++ ] ) ; } } numbers [ getStartIndexOfRow ( numOfRows ) ] = - 1 ; printf ( "%d\n" , getLargestSum ( numbers ) ) ; } return 0 ; }