struct arr { int a [ 40 ] ; } b [ 10 ] , c [ 10 ] ; int n , i , n1 , j , k , max , m ; void job ( ) ; int main ( ) { scanf ( "%d" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & n1 ) ; for ( j = 0 ; j < n1 ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( "%d" , & b [ j ] . a [ k ] ) ; } } job ( ) ; } } void job ( ) { c [ 0 ] . a [ 0 ] = b [ 0 ] . a [ 0 ] ; for ( j = 1 ; j < n1 ; j ++ ) { for ( k = 0 , m = 0 ; k < ( 2 * j ) ; k += 2 , m ++ ) { if ( j == 1 ) { c [ j ] . a [ k ] = b [ j ] . a [ k ] + b [ j - 1 ] . a [ k ] ; c [ j ] . a [ k + 1 ] = b [ j - 1 ] . a [ k ] + b [ j ] . a [ k + 1 ] ; } else { c [ j ] . a [ k ] = b [ j ] . a [ m ] + c [ j - 1 ] . a [ m ] ; c [ j ] . a [ k + 1 ] = b [ j ] . a [ m + 1 ] + c [ j - 1 ] . a [ m ] ; } } } max = c [ n1 - 1 ] . a [ 0 ] ; for ( k = 0 ; k < 2 * ( n1 - 1 ) ; k ++ ) { if ( c [ n1 - 1 ] . a [ k ] > max ) { max = c [ n1 - 1 ] . a [ k ] ; } } printf ( "%d  " , max ) ; }