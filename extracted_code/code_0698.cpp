int n ; int matrix [ 105 ] [ 105 ] ; int dpmatx [ 105 ] [ 105 ] ; int max_cost ( int , int ) ; int giv_max_cost ( int , int ) ; int max2 ( int , int ) ; int main ( ) { int t_cases ; scanf ( "%d\n" , & t_cases ) ; while ( t_cases -- ) { int i , j ; for ( i = 0 ; i < 105 ; i ++ ) { for ( j = 0 ; j < 105 ; j ++ ) { dpmatx [ i ] [ j ] = - 1 ; } } scanf ( "%d\n" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & matrix [ i ] [ j ] ) ; } } int max_val ; max_val = max_cost ( 0 , 0 ) ; printf ( "%d\n" , max_val ) ; } return 0 ; } int max_cost ( int i , int j ) { if ( ( i < n ) && ( j < n ) ) { return matrix [ i ] [ j ] + max2 ( giv_max_cost ( i + 1 , j ) , giv_max_cost ( i + 1 , j + 1 ) ) ; } else { return 0 ; } } int giv_max_cost ( int i , int j ) { if ( dpmatx [ i ] [ j ] == - 1 ) { dpmatx [ i ] [ j ] = max_cost ( i , j ) ; } return dpmatx [ i ] [ j ] ; } int max2 ( int a , int b ) { if ( a > b ) return a ; else return b ; }