long long dope ( int tri [ ] [ 200 ] , int x , int y , int weed [ ] [ 200 ] ) { if ( weed [ x ] [ y ] != 0 ) return weed [ x ] [ y ] ; if ( x == 0 ) return weed [ x ] [ y ] = tri [ x ] [ y ] ; if ( y == 0 ) return weed [ x ] [ y ] = tri [ x ] [ y ] + dope ( tri , x - 1 , y , weed ) ; int p , q , r ; r = ( tri [ x - 1 ] [ y ] > tri [ x - 1 ] [ y - 1 ] ) ? 1 : 2 ; if ( r == 1 ) { p = x - 1 ; q = y ; } if ( r == 2 ) { p = x - 1 ; q = y - 1 ; } return weed [ x ] [ y ] = tri [ x ] [ y ] + dope ( tri , p , q , weed ) ; } long long maxsum ( int n , int tri [ ] [ 200 ] ) { int i ; int weed [ 200 ] [ 200 ] = { 0 } ; long long max = 0 , sum = 0 ; for ( i = 0 ; i < n ; i ++ ) { sum = dope ( tri , n - 1 , i , weed ) ; if ( sum > max ) max = sum ; } return max ; } int main ( void ) { int t ; scanf ( "%d" , & t ) ; while ( t -- ) { int n , i , j ; scanf ( "%d" , & n ) ; int tri [ 200 ] [ 200 ] ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j < n ; j ++ ) tri [ i ] [ j ] = - 1 ; for ( i = 0 ; i < n ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( "%d" , & tri [ i ] [ j ] ) ; printf ( "%lld\n" , maxsum ( n , tri ) ) ; } }