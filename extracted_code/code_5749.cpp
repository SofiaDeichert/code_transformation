long long int ar [ 500001 ] ; void quick ( long long int arr [ ] , long long int low , long long int up ) ; long long int partition ( long long int arr [ ] , long long int low , long long int up ) ; int main ( ) { int t , i ; long long int n ; long long int sum ; scanf ( "%d" , & t ) ; while ( t -- ) { sum = 0 ; scanf ( "%lld" , & n ) ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%lld" , & ar [ i ] ) ; } quick ( ar , 0 , n - 1 ) ; sum = ar [ 0 ] * ( n - 1 ) ; printf ( "%lld\n" , sum ) ; } return 0 ; } void quick ( long long int arr [ ] , long long int low , long long int up ) { long long int pivloc ; if ( low >= up ) return ; pivloc = partition ( arr , low , up ) ; quick ( arr , low , pivloc - 1 ) ; quick ( arr , pivloc + 1 , up ) ; } long long int partition ( long long int arr [ ] , long long int low , long long int up ) { long long int temp , i , j , pivot ; i = low + 1 ; j = up ; pivot = arr [ low ] ; while ( i <= j ) { while ( arr [ i ] < pivot && i < up ) i ++ ; while ( arr [ j ] > pivot ) j -- ; if ( i < j ) { temp = arr [ i ] ; arr [ i ] = arr [ j ] ; arr [ j ] = temp ; i ++ ; j -- ; } else i ++ ; } arr [ low ] = arr [ j ] ; arr [ j ] = pivot ; return j ; }