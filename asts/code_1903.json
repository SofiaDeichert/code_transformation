{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 200,
  "text": "int main ( ) { int n , num ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & num ) ; if ( num < 10 ) printf ( \"What an obedient servant you are!\\n\" ) ; else printf ( \"-1\\n\" ) ; } return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 200,
      "text": "int main ( ) { int n , num ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & num ) ; if ( num < 10 ) printf ( \"What an obedient servant you are!\\n\" ) ; else printf ( \"-1\\n\" ) ; } return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 200,
          "text": "{ int n , num ; scanf ( \"%d\" , & n ) ; while ( n -- ) { scanf ( \"%d\" , & num ) ; if ( num < 10 ) printf ( \"What an obedient servant you are!\\n\" ) ; else printf ( \"-1\\n\" ) ; } return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 28,
              "text": "int n , num ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 15,
                  "end_byte": 18,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 19,
                  "end_byte": 20,
                  "text": "n",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 21,
                  "end_byte": 22,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 23,
                  "end_byte": 26,
                  "text": "num",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 27,
                  "end_byte": 28,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 29,
              "end_byte": 51,
              "text": "scanf ( \"%d\" , & n ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 29,
                  "end_byte": 49,
                  "text": "scanf ( \"%d\" , & n )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 29,
                      "end_byte": 34,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 35,
                      "end_byte": 49,
                      "text": "( \"%d\" , & n )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 35,
                          "end_byte": 36,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 37,
                          "end_byte": 41,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 37,
                              "end_byte": 38,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 38,
                              "end_byte": 40,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 40,
                              "end_byte": 41,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 42,
                          "end_byte": 43,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 44,
                          "end_byte": 47,
                          "text": "& n",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 44,
                              "end_byte": 45,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 46,
                              "end_byte": 47,
                              "text": "n",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 48,
                          "end_byte": 49,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 50,
                  "end_byte": 51,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 52,
              "end_byte": 187,
              "text": "while ( n -- ) { scanf ( \"%d\" , & num ) ; if ( num < 10 ) printf ( \"What an obedient servant you are!\\n\" ) ; else printf ( \"-1\\n\" ) ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 52,
                  "end_byte": 57,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 58,
                  "end_byte": 66,
                  "text": "( n -- )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 58,
                      "end_byte": 59,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "update_expression",
                      "start_byte": 60,
                      "end_byte": 64,
                      "text": "n --",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 60,
                          "end_byte": 61,
                          "text": "n",
                          "children": []
                        },
                        {
                          "type": "--",
                          "start_byte": 62,
                          "end_byte": 64,
                          "text": "--",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 65,
                      "end_byte": 66,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 67,
                  "end_byte": 187,
                  "text": "{ scanf ( \"%d\" , & num ) ; if ( num < 10 ) printf ( \"What an obedient servant you are!\\n\" ) ; else printf ( \"-1\\n\" ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 67,
                      "end_byte": 68,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 69,
                      "end_byte": 93,
                      "text": "scanf ( \"%d\" , & num ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 69,
                          "end_byte": 91,
                          "text": "scanf ( \"%d\" , & num )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 69,
                              "end_byte": 74,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 75,
                              "end_byte": 91,
                              "text": "( \"%d\" , & num )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 75,
                                  "end_byte": 76,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 77,
                                  "end_byte": 81,
                                  "text": "\"%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 77,
                                      "end_byte": 78,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 78,
                                      "end_byte": 80,
                                      "text": "%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 80,
                                      "end_byte": 81,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 82,
                                  "end_byte": 83,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 84,
                                  "end_byte": 89,
                                  "text": "& num",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 84,
                                      "end_byte": 85,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 86,
                                      "end_byte": 89,
                                      "text": "num",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 90,
                                  "end_byte": 91,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 92,
                          "end_byte": 93,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "start_byte": 94,
                      "end_byte": 185,
                      "text": "if ( num < 10 ) printf ( \"What an obedient servant you are!\\n\" ) ; else printf ( \"-1\\n\" ) ;",
                      "children": [
                        {
                          "type": "if",
                          "start_byte": 94,
                          "end_byte": 96,
                          "text": "if",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 97,
                          "end_byte": 109,
                          "text": "( num < 10 )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 97,
                              "end_byte": 98,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 99,
                              "end_byte": 107,
                              "text": "num < 10",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 99,
                                  "end_byte": 102,
                                  "text": "num",
                                  "children": []
                                },
                                {
                                  "type": "<",
                                  "start_byte": 103,
                                  "end_byte": 104,
                                  "text": "<",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "start_byte": 105,
                                  "end_byte": 107,
                                  "text": "10",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 108,
                              "end_byte": 109,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "start_byte": 110,
                          "end_byte": 160,
                          "text": "printf ( \"What an obedient servant you are!\\n\" ) ;",
                          "children": [
                            {
                              "type": "call_expression",
                              "start_byte": 110,
                              "end_byte": 158,
                              "text": "printf ( \"What an obedient servant you are!\\n\" )",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 110,
                                  "end_byte": 116,
                                  "text": "printf",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "start_byte": 117,
                                  "end_byte": 158,
                                  "text": "( \"What an obedient servant you are!\\n\" )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 117,
                                      "end_byte": 118,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "string_literal",
                                      "start_byte": 119,
                                      "end_byte": 156,
                                      "text": "\"What an obedient servant you are!\\n\"",
                                      "children": [
                                        {
                                          "type": "\"",
                                          "start_byte": 119,
                                          "end_byte": 120,
                                          "text": "\"",
                                          "children": []
                                        },
                                        {
                                          "type": "string_content",
                                          "start_byte": 120,
                                          "end_byte": 153,
                                          "text": "What an obedient servant you are!",
                                          "children": []
                                        },
                                        {
                                          "type": "escape_sequence",
                                          "start_byte": 153,
                                          "end_byte": 155,
                                          "text": "\\n",
                                          "children": []
                                        },
                                        {
                                          "type": "\"",
                                          "start_byte": 155,
                                          "end_byte": 156,
                                          "text": "\"",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 157,
                                      "end_byte": 158,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "start_byte": 159,
                              "end_byte": 160,
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "else_clause",
                          "start_byte": 161,
                          "end_byte": 185,
                          "text": "else printf ( \"-1\\n\" ) ;",
                          "children": [
                            {
                              "type": "else",
                              "start_byte": 161,
                              "end_byte": 165,
                              "text": "else",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 166,
                              "end_byte": 185,
                              "text": "printf ( \"-1\\n\" ) ;",
                              "children": [
                                {
                                  "type": "call_expression",
                                  "start_byte": 166,
                                  "end_byte": 183,
                                  "text": "printf ( \"-1\\n\" )",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 166,
                                      "end_byte": 172,
                                      "text": "printf",
                                      "children": []
                                    },
                                    {
                                      "type": "argument_list",
                                      "start_byte": 173,
                                      "end_byte": 183,
                                      "text": "( \"-1\\n\" )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start_byte": 173,
                                          "end_byte": 174,
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "string_literal",
                                          "start_byte": 175,
                                          "end_byte": 181,
                                          "text": "\"-1\\n\"",
                                          "children": [
                                            {
                                              "type": "\"",
                                              "start_byte": 175,
                                              "end_byte": 176,
                                              "text": "\"",
                                              "children": []
                                            },
                                            {
                                              "type": "string_content",
                                              "start_byte": 176,
                                              "end_byte": 178,
                                              "text": "-1",
                                              "children": []
                                            },
                                            {
                                              "type": "escape_sequence",
                                              "start_byte": 178,
                                              "end_byte": 180,
                                              "text": "\\n",
                                              "children": []
                                            },
                                            {
                                              "type": "\"",
                                              "start_byte": 180,
                                              "end_byte": 181,
                                              "text": "\"",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start_byte": 182,
                                          "end_byte": 183,
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 184,
                                  "end_byte": 185,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 186,
                      "end_byte": 187,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 188,
              "end_byte": 198,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 188,
                  "end_byte": 194,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 195,
                  "end_byte": 196,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 197,
                  "end_byte": 198,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 199,
              "end_byte": 200,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}