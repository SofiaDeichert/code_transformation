int max_sum ; void calc_sum ( int * * arr , int * * sum , int i , int j , int running_sum , int size ) ; int main ( ) { int num_tests ; int n ; scanf ( "%d" , & num_tests ) ; int * test_results = ( int * ) calloc ( num_tests , sizeof ( int ) ) ; int k = 0 ; while ( k != num_tests ) { int size ; scanf ( "%d" , & size ) ; int * * tri_arr = ( int * * ) calloc ( size , sizeof ( int * ) ) ; int * * sum_arr = ( int * * ) calloc ( size , sizeof ( int * ) ) ; int i , j ; for ( i = 0 ; i != size ; ++ i ) { tri_arr [ i ] = ( int * ) calloc ( size , sizeof ( int ) ) ; sum_arr [ i ] = ( int * ) calloc ( size , sizeof ( int ) ) ; } int val ; int row , col ; for ( row = 0 ; row != size ; ++ row ) { for ( col = 0 ; col <= row ; ++ col ) { scanf ( "%d" , & val ) ; tri_arr [ row ] [ col ] = val ; } } max_sum = 0 ; calc_sum ( tri_arr , sum_arr , 0 , 0 , 0 , size ) ; test_results [ k ] = max_sum ; for ( i = 0 ; i != size ; ++ i ) { free ( tri_arr [ i ] ) ; free ( sum_arr [ i ] ) ; } free ( tri_arr ) ; ++ k ; } for ( k = 0 ; k != num_tests ; ++ k ) { printf ( "%d\n" , test_results [ k ] ) ; } free ( test_results ) ; return 0 ; } void calc_sum ( int * * arr , int * * sum , int i , int j , int running_sum , int size ) { if ( i == size ) return ; if ( j == size ) return ; int _sum_ = running_sum + arr [ i ] [ j ] ; if ( _sum_ > sum [ i ] [ j ] ) sum [ i ] [ j ] = _sum_ ; if ( _sum_ > max_sum ) max_sum = _sum_ ; calc_sum ( arr , sum , i + 1 , j , sum [ i ] [ j ] , size ) ; calc_sum ( arr , sum , i + 1 , j + 1 , sum [ i ] [ j ] , size ) ; }