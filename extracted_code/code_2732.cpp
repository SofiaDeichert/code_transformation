int best_path ( int l , int tri [ 102 ] [ 102 ] , int r , int c ) { int i , j , k ; if ( r == l ) { return 0 ; } int max = MAX ( best_path ( l , tri , r + 1 , c ) , best_path ( l , tri , r + 1 , c + 1 ) ) ; return tri [ r ] [ c ] + max ; } int main ( ) { int n , i , j , k , l , sum = 0 ; scanf ( "%d" , & n ) ; int tri [ 102 ] [ 102 ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & l ) ; for ( j = 0 ; j < l ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) { scanf ( "%d" , & tri [ j ] [ k ] ) ; } } sum = best_path ( l , tri , 0 , 0 ) ; printf ( "%d\n" , sum ) ; } }