int getpathmax ( int * * a , int n , int val , int i , int j ) { static int p ; if ( i == n - 1 ) { if ( val > p ) { p = val ; } return ; } else { int s1 = getpathmax ( a , n , val + a [ i + 1 ] [ j ] , i + 1 , j ) ; int s2 = getpathmax ( a , n , val + a [ i + 1 ] [ j + 1 ] , i + 1 , j + 1 ) ; } return p ; } int main ( ) { int t , n , * * a , i , j , max = 0 , k ; scanf ( "%d" , & t ) ; for ( k = 0 ; k < t ; k ++ ) { scanf ( "%d" , & n ) ; if ( n == 1 ) { scanf ( "%d" , & max ) ; printf ( "%d\n" , max ) ; } else { a = ( int * * ) malloc ( sizeof ( int ) * n ) ; for ( i = 0 ; i < n ; i ++ ) { a [ i ] = ( int * ) malloc ( sizeof ( int ) * ( i + 1 ) ) ; for ( j = 0 ; j < i + 1 ; j ++ ) scanf ( "%d" , & a [ i ] [ j ] ) ; } max = getpathmax ( a , n , a [ 0 ] [ 0 ] , 0 , 0 ) ; printf ( "%d\n" , max ) ; free ( a ) ; } } return 0 ; }