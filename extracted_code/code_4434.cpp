void findmax ( int * a , int n , int * p ) { int temp = 0 , i , flag = 0 ; for ( i = 0 ; i < n ; i ++ ) { if ( temp == a [ i ] ) { if ( a [ * p - 1 ] > a [ i - 1 ] && a [ * p + 1 ] > a [ i - 1 ] && i + 1 < n ) { * p = i ; } else if ( a [ * p - 1 ] > a [ i + 1 ] && a [ * p + 1 ] > a [ i + 1 ] && i + 1 < n ) { * p = i ; } } else if ( temp < a [ i ] ) { temp = a [ i ] ; * p = i ; } } return ; } int main ( ) { int t , * a , n , i , * cost , p = 0 , x = 0 , ad = 0 , f , g , temp ; scanf ( "%d" , & t ) ; cost = ( int * ) malloc ( t * sizeof ( int ) ) ; while ( t -- ) { cost [ p ] = 0 ; scanf ( "%d" , & n ) ; x = n ; a = ( int * ) malloc ( n * sizeof ( int ) ) ; for ( i = 0 ; i < n ; i ++ ) scanf ( "%d" , & a [ i ] ) ; temp = a [ 0 ] ; for ( i = 1 ; i < n ; i ++ ) { if ( temp != a [ i ] ) { break ; } } if ( i == n ) { cost [ p ] += a [ 0 ] * ( n - 1 ) ; p ++ ; continue ; } for ( i = 0 ; x != 1 ; i ++ ) { findmax ( a , n , & ad ) ; if ( ( ad + 1 ) < n && ( ad - 1 ) >= 0 ) { for ( i = ad + 1 ; i < n ; i ++ ) { if ( a [ i ] != - 1 ) { f = i ; break ; } } for ( i = ad - 1 ; i >= 0 ; i -- ) { if ( a [ i ] != - 1 ) { g = i ; break ; } } if ( a [ g ] > a [ f ] ) { a [ ad ] = - 1 ; x -- ; cost [ p ] += a [ f ] ; } else { a [ ad ] = - 1 ; x -- ; cost [ p ] += a [ g ] ; } } else if ( ad + 1 < n ) { for ( i = ad + 1 ; i < n ; i ++ ) { if ( a [ i ] != - 1 ) { f = i ; break ; } } a [ ad ] = - 1 ; x -- ; cost [ p ] += a [ f ] ; } else { for ( i = ad - 1 ; i >= 0 ; i -- ) { if ( a [ i ] != - 1 ) { g = i ; break ; } } a [ ad ] = - 1 ; x -- ; cost [ p ] += a [ g ] ; } } p ++ ; } for ( i = 0 ; i < p ; i ++ ) printf ( "%d\n" , cost [ i ] ) ; return 0 ; }