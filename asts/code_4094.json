{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 360,
  "text": "int main ( ) { int testCases ; scanf ( \"%d\" , & testCases ) ; while ( testCases -- ) { int num1 , num2 ; scanf ( \"%d%d\" , & num1 , & num2 ) ; int gcd = GCD ( num1 , num2 ) ; printf ( \"%d\" , gcd ) ; printf ( \" %d\\n\" , ( num1 * num2 ) / gcd ) ; } return 0 ; } int GCD ( int num1 , int num2 ) { if ( num2 == 0 ) return num1 ; return GCD ( num2 , num1 % num2 ) ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 257,
      "text": "int main ( ) { int testCases ; scanf ( \"%d\" , & testCases ) ; while ( testCases -- ) { int num1 , num2 ; scanf ( \"%d%d\" , & num1 , & num2 ) ; int gcd = GCD ( num1 , num2 ) ; printf ( \"%d\" , gcd ) ; printf ( \" %d\\n\" , ( num1 * num2 ) / gcd ) ; } return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 257,
          "text": "{ int testCases ; scanf ( \"%d\" , & testCases ) ; while ( testCases -- ) { int num1 , num2 ; scanf ( \"%d%d\" , & num1 , & num2 ) ; int gcd = GCD ( num1 , num2 ) ; printf ( \"%d\" , gcd ) ; printf ( \" %d\\n\" , ( num1 * num2 ) / gcd ) ; } return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 30,
              "text": "int testCases ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 15,
                  "end_byte": 18,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 19,
                  "end_byte": 28,
                  "text": "testCases",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 29,
                  "end_byte": 30,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 31,
              "end_byte": 61,
              "text": "scanf ( \"%d\" , & testCases ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 31,
                  "end_byte": 59,
                  "text": "scanf ( \"%d\" , & testCases )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 31,
                      "end_byte": 36,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 37,
                      "end_byte": 59,
                      "text": "( \"%d\" , & testCases )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 37,
                          "end_byte": 38,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 39,
                          "end_byte": 43,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 39,
                              "end_byte": 40,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 40,
                              "end_byte": 42,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 42,
                              "end_byte": 43,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 44,
                          "end_byte": 45,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 46,
                          "end_byte": 57,
                          "text": "& testCases",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 46,
                              "end_byte": 47,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 48,
                              "end_byte": 57,
                              "text": "testCases",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 58,
                          "end_byte": 59,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 60,
                  "end_byte": 61,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 62,
              "end_byte": 244,
              "text": "while ( testCases -- ) { int num1 , num2 ; scanf ( \"%d%d\" , & num1 , & num2 ) ; int gcd = GCD ( num1 , num2 ) ; printf ( \"%d\" , gcd ) ; printf ( \" %d\\n\" , ( num1 * num2 ) / gcd ) ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 62,
                  "end_byte": 67,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 68,
                  "end_byte": 84,
                  "text": "( testCases -- )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 68,
                      "end_byte": 69,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "update_expression",
                      "start_byte": 70,
                      "end_byte": 82,
                      "text": "testCases --",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 70,
                          "end_byte": 79,
                          "text": "testCases",
                          "children": []
                        },
                        {
                          "type": "--",
                          "start_byte": 80,
                          "end_byte": 82,
                          "text": "--",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 83,
                      "end_byte": 84,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 85,
                  "end_byte": 244,
                  "text": "{ int num1 , num2 ; scanf ( \"%d%d\" , & num1 , & num2 ) ; int gcd = GCD ( num1 , num2 ) ; printf ( \"%d\" , gcd ) ; printf ( \" %d\\n\" , ( num1 * num2 ) / gcd ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 85,
                      "end_byte": 86,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "declaration",
                      "start_byte": 87,
                      "end_byte": 104,
                      "text": "int num1 , num2 ;",
                      "children": [
                        {
                          "type": "primitive_type",
                          "start_byte": 87,
                          "end_byte": 90,
                          "text": "int",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 91,
                          "end_byte": 95,
                          "text": "num1",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 96,
                          "end_byte": 97,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 98,
                          "end_byte": 102,
                          "text": "num2",
                          "children": []
                        },
                        {
                          "type": ";",
                          "start_byte": 103,
                          "end_byte": 104,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 105,
                      "end_byte": 141,
                      "text": "scanf ( \"%d%d\" , & num1 , & num2 ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 105,
                          "end_byte": 139,
                          "text": "scanf ( \"%d%d\" , & num1 , & num2 )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 105,
                              "end_byte": 110,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 111,
                              "end_byte": 139,
                              "text": "( \"%d%d\" , & num1 , & num2 )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 111,
                                  "end_byte": 112,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 113,
                                  "end_byte": 119,
                                  "text": "\"%d%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 113,
                                      "end_byte": 114,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 114,
                                      "end_byte": 118,
                                      "text": "%d%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 118,
                                      "end_byte": 119,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 120,
                                  "end_byte": 121,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 122,
                                  "end_byte": 128,
                                  "text": "& num1",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 122,
                                      "end_byte": 123,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 124,
                                      "end_byte": 128,
                                      "text": "num1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 129,
                                  "end_byte": 130,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 131,
                                  "end_byte": 137,
                                  "text": "& num2",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 131,
                                      "end_byte": 132,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 133,
                                      "end_byte": 137,
                                      "text": "num2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 138,
                                  "end_byte": 139,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 140,
                          "end_byte": 141,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "declaration",
                      "start_byte": 142,
                      "end_byte": 173,
                      "text": "int gcd = GCD ( num1 , num2 ) ;",
                      "children": [
                        {
                          "type": "primitive_type",
                          "start_byte": 142,
                          "end_byte": 145,
                          "text": "int",
                          "children": []
                        },
                        {
                          "type": "init_declarator",
                          "start_byte": 146,
                          "end_byte": 171,
                          "text": "gcd = GCD ( num1 , num2 )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 146,
                              "end_byte": 149,
                              "text": "gcd",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 150,
                              "end_byte": 151,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call_expression",
                              "start_byte": 152,
                              "end_byte": 171,
                              "text": "GCD ( num1 , num2 )",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 152,
                                  "end_byte": 155,
                                  "text": "GCD",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "start_byte": 156,
                                  "end_byte": 171,
                                  "text": "( num1 , num2 )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 156,
                                      "end_byte": 157,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 158,
                                      "end_byte": 162,
                                      "text": "num1",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "start_byte": 163,
                                      "end_byte": 164,
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 165,
                                      "end_byte": 169,
                                      "text": "num2",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 170,
                                      "end_byte": 171,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 172,
                          "end_byte": 173,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 174,
                      "end_byte": 197,
                      "text": "printf ( \"%d\" , gcd ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 174,
                          "end_byte": 195,
                          "text": "printf ( \"%d\" , gcd )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 174,
                              "end_byte": 180,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 181,
                              "end_byte": 195,
                              "text": "( \"%d\" , gcd )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 181,
                                  "end_byte": 182,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 183,
                                  "end_byte": 187,
                                  "text": "\"%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 183,
                                      "end_byte": 184,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 184,
                                      "end_byte": 186,
                                      "text": "%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 186,
                                      "end_byte": 187,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 188,
                                  "end_byte": 189,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 190,
                                  "end_byte": 193,
                                  "text": "gcd",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 194,
                                  "end_byte": 195,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 196,
                          "end_byte": 197,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 198,
                      "end_byte": 242,
                      "text": "printf ( \" %d\\n\" , ( num1 * num2 ) / gcd ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 198,
                          "end_byte": 240,
                          "text": "printf ( \" %d\\n\" , ( num1 * num2 ) / gcd )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 198,
                              "end_byte": 204,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 205,
                              "end_byte": 240,
                              "text": "( \" %d\\n\" , ( num1 * num2 ) / gcd )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 205,
                                  "end_byte": 206,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 207,
                                  "end_byte": 214,
                                  "text": "\" %d\\n\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 207,
                                      "end_byte": 208,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 208,
                                      "end_byte": 211,
                                      "text": " %d",
                                      "children": []
                                    },
                                    {
                                      "type": "escape_sequence",
                                      "start_byte": 211,
                                      "end_byte": 213,
                                      "text": "\\n",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 213,
                                      "end_byte": 214,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 215,
                                  "end_byte": 216,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "binary_expression",
                                  "start_byte": 217,
                                  "end_byte": 238,
                                  "text": "( num1 * num2 ) / gcd",
                                  "children": [
                                    {
                                      "type": "parenthesized_expression",
                                      "start_byte": 217,
                                      "end_byte": 232,
                                      "text": "( num1 * num2 )",
                                      "children": [
                                        {
                                          "type": "(",
                                          "start_byte": 217,
                                          "end_byte": 218,
                                          "text": "(",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_expression",
                                          "start_byte": 219,
                                          "end_byte": 230,
                                          "text": "num1 * num2",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 219,
                                              "end_byte": 223,
                                              "text": "num1",
                                              "children": []
                                            },
                                            {
                                              "type": "*",
                                              "start_byte": 224,
                                              "end_byte": 225,
                                              "text": "*",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "start_byte": 226,
                                              "end_byte": 230,
                                              "text": "num2",
                                              "children": []
                                            }
                                          ]
                                        },
                                        {
                                          "type": ")",
                                          "start_byte": 231,
                                          "end_byte": 232,
                                          "text": ")",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": "/",
                                      "start_byte": 233,
                                      "end_byte": 234,
                                      "text": "/",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 235,
                                      "end_byte": 238,
                                      "text": "gcd",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 239,
                                  "end_byte": 240,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 241,
                          "end_byte": 242,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 243,
                      "end_byte": 244,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 245,
              "end_byte": 255,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 245,
                  "end_byte": 251,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 252,
                  "end_byte": 253,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 254,
                  "end_byte": 255,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 256,
              "end_byte": 257,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "start_byte": 258,
      "end_byte": 360,
      "text": "int GCD ( int num1 , int num2 ) { if ( num2 == 0 ) return num1 ; return GCD ( num2 , num1 % num2 ) ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 258,
          "end_byte": 261,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 262,
          "end_byte": 289,
          "text": "GCD ( int num1 , int num2 )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 262,
              "end_byte": 265,
              "text": "GCD",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 266,
              "end_byte": 289,
              "text": "( int num1 , int num2 )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 266,
                  "end_byte": 267,
                  "text": "(",
                  "children": []
                },
                {
                  "type": "parameter_declaration",
                  "start_byte": 268,
                  "end_byte": 276,
                  "text": "int num1",
                  "children": [
                    {
                      "type": "primitive_type",
                      "start_byte": 268,
                      "end_byte": 271,
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 272,
                      "end_byte": 276,
                      "text": "num1",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "start_byte": 277,
                  "end_byte": 278,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "parameter_declaration",
                  "start_byte": 279,
                  "end_byte": 287,
                  "text": "int num2",
                  "children": [
                    {
                      "type": "primitive_type",
                      "start_byte": 279,
                      "end_byte": 282,
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 283,
                      "end_byte": 287,
                      "text": "num2",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "start_byte": 288,
                  "end_byte": 289,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 290,
          "end_byte": 360,
          "text": "{ if ( num2 == 0 ) return num1 ; return GCD ( num2 , num1 % num2 ) ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 290,
              "end_byte": 291,
              "text": "{",
              "children": []
            },
            {
              "type": "if_statement",
              "start_byte": 292,
              "end_byte": 322,
              "text": "if ( num2 == 0 ) return num1 ;",
              "children": [
                {
                  "type": "if",
                  "start_byte": 292,
                  "end_byte": 294,
                  "text": "if",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 295,
                  "end_byte": 308,
                  "text": "( num2 == 0 )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 295,
                      "end_byte": 296,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 297,
                      "end_byte": 306,
                      "text": "num2 == 0",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 297,
                          "end_byte": 301,
                          "text": "num2",
                          "children": []
                        },
                        {
                          "type": "==",
                          "start_byte": 302,
                          "end_byte": 304,
                          "text": "==",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "start_byte": 305,
                          "end_byte": 306,
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 307,
                      "end_byte": 308,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "return_statement",
                  "start_byte": 309,
                  "end_byte": 322,
                  "text": "return num1 ;",
                  "children": [
                    {
                      "type": "return",
                      "start_byte": 309,
                      "end_byte": 315,
                      "text": "return",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 316,
                      "end_byte": 320,
                      "text": "num1",
                      "children": []
                    },
                    {
                      "type": ";",
                      "start_byte": 321,
                      "end_byte": 322,
                      "text": ";",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 323,
              "end_byte": 358,
              "text": "return GCD ( num2 , num1 % num2 ) ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 323,
                  "end_byte": 329,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "call_expression",
                  "start_byte": 330,
                  "end_byte": 356,
                  "text": "GCD ( num2 , num1 % num2 )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 330,
                      "end_byte": 333,
                      "text": "GCD",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 334,
                      "end_byte": 356,
                      "text": "( num2 , num1 % num2 )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 334,
                          "end_byte": 335,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 336,
                          "end_byte": 340,
                          "text": "num2",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 341,
                          "end_byte": 342,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "binary_expression",
                          "start_byte": 343,
                          "end_byte": 354,
                          "text": "num1 % num2",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 343,
                              "end_byte": 347,
                              "text": "num1",
                              "children": []
                            },
                            {
                              "type": "%",
                              "start_byte": 348,
                              "end_byte": 349,
                              "text": "%",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 350,
                              "end_byte": 354,
                              "text": "num2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 355,
                          "end_byte": 356,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 357,
                  "end_byte": 358,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 359,
              "end_byte": 360,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}