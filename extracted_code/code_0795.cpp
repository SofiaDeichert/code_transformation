int arr [ 100 ] [ 100 ] ; int max ( int a , int b ) { if ( a > b ) return a ; else return b ; } int maxPath ( int n ) { int maxlen = 0 ; if ( n < 0 ) return - 1 ; if ( n == 1 ) return 1 ; if ( n == 0 ) return 0 ; int i , j ; for ( i = 0 ; i < n ; i ++ ) { for ( j = 0 ; j < i + 1 ; j ++ ) { if ( i == 0 && j == 0 ) continue ; if ( j == 0 ) arr [ i ] [ j ] = arr [ i ] [ j ] + arr [ i - 1 ] [ j ] ; else arr [ i ] [ j ] = arr [ i ] [ j ] + max ( arr [ i - 1 ] [ j ] , arr [ i - 1 , j - 1 ] ) ; } } for ( i = 0 ; i < n ; i ++ ) { if ( arr [ n - 1 ] [ i ] > maxlen ) maxlen = arr [ n - 1 ] [ i ] ; } return maxlen ; } int main ( ) { int T ; int ans [ 100 ] ; scanf ( "%d" , & T ) ; int rows ; int i , j , k ; for ( i = 0 ; i < T ; i ++ ) { scanf ( "%d" , & rows ) ; for ( j = 0 ; j < rows ; j ++ ) { for ( k = 0 ; k < j + 1 ; k ++ ) scanf ( "%d" , & arr [ j ] [ k ] ) ; } int max_length = maxPath ( rows ) ; ans [ i ] = max_length ; } for ( i = 0 ; i < T ; i ++ ) { printf ( "%d\n" , ans [ i ] ) ; } return 0 ; }