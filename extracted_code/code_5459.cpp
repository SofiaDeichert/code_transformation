int maxRow ; typedef struct Node { int sum ; int row ; int column ; struct Node * left ; struct Node * right ; struct Node * parent ; } node ; typedef struct BinaryTree { struct Node * root ; } binaryTree ; node * createNode ( int sum , int row , int column ) { node * x = malloc ( sizeof ( node ) ) ; x -> sum = sum ; x -> row = row ; x -> column = column ; x -> left = NULL ; x -> right = NULL ; x -> parent = NULL ; return x ; } int findMaxSum ( int * a , int row , int column , int sum ) { int nodeSum = a [ ( ( row - 1 ) * row / 2 ) + column ] + sum ; if ( row + 1 <= maxRow ) { int sumLeft = findMaxSum ( a , row + 1 , column , nodeSum ) ; int sumRight = findMaxSum ( a , row + 1 , column + 1 , nodeSum ) ; if ( sumLeft > sumRight ) return sumLeft ; else return sumRight ; } else { return nodeSum ; } } int main ( ) { int n , i , j , k , m ; scanf ( "%d" , & n ) ; int output [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%d" , & m ) ; maxRow = m ; int * input = malloc ( sizeof ( int ) * ( ( m * ( m + 1 ) / 2 ) + 1 ) ) ; for ( j = 1 ; j <= m * ( m + 1 ) / 2 ; j ++ ) { scanf ( "%d" , & input [ j ] ) ; } output [ i ] = findMaxSum ( input , 1 , 1 , 0 ) ; free ( input ) ; } for ( i = 0 ; i < n ; i ++ ) { printf ( "%d\n" , output [ i ] ) ; } }