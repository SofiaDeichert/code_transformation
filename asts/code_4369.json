{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 438,
  "text": "int gcd ( int x , int y ) { int divisor , dividend , rem ; divisor = x <= y ? x : y ; dividend = x >= y ? x : y ; while ( divisor != 0 ) { rem = dividend % divisor ; dividend = divisor ; divisor = rem ; } return dividend ; } int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y , hcf , lcm ; scanf ( \"%d%d\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d %d\\n\" , hcf , lcm ) ; } return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 224,
      "text": "int gcd ( int x , int y ) { int divisor , dividend , rem ; divisor = x <= y ? x : y ; dividend = x >= y ? x : y ; while ( divisor != 0 ) { rem = dividend % divisor ; dividend = divisor ; divisor = rem ; } return dividend ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 25,
          "text": "gcd ( int x , int y )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 7,
              "text": "gcd",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 8,
              "end_byte": 25,
              "text": "( int x , int y )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 8,
                  "end_byte": 9,
                  "text": "(",
                  "children": []
                },
                {
                  "type": "parameter_declaration",
                  "start_byte": 10,
                  "end_byte": 15,
                  "text": "int x",
                  "children": [
                    {
                      "type": "primitive_type",
                      "start_byte": 10,
                      "end_byte": 13,
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 14,
                      "end_byte": 15,
                      "text": "x",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ",",
                  "start_byte": 16,
                  "end_byte": 17,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "parameter_declaration",
                  "start_byte": 18,
                  "end_byte": 23,
                  "text": "int y",
                  "children": [
                    {
                      "type": "primitive_type",
                      "start_byte": 18,
                      "end_byte": 21,
                      "text": "int",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 22,
                      "end_byte": 23,
                      "text": "y",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "start_byte": 24,
                  "end_byte": 25,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 26,
          "end_byte": 224,
          "text": "{ int divisor , dividend , rem ; divisor = x <= y ? x : y ; dividend = x >= y ? x : y ; while ( divisor != 0 ) { rem = dividend % divisor ; dividend = divisor ; divisor = rem ; } return dividend ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 26,
              "end_byte": 27,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 28,
              "end_byte": 58,
              "text": "int divisor , dividend , rem ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 28,
                  "end_byte": 31,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 32,
                  "end_byte": 39,
                  "text": "divisor",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 40,
                  "end_byte": 41,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 42,
                  "end_byte": 50,
                  "text": "dividend",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 51,
                  "end_byte": 52,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 53,
                  "end_byte": 56,
                  "text": "rem",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 57,
                  "end_byte": 58,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 59,
              "end_byte": 85,
              "text": "divisor = x <= y ? x : y ;",
              "children": [
                {
                  "type": "assignment_expression",
                  "start_byte": 59,
                  "end_byte": 83,
                  "text": "divisor = x <= y ? x : y",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 59,
                      "end_byte": 66,
                      "text": "divisor",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 67,
                      "end_byte": 68,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "conditional_expression",
                      "start_byte": 69,
                      "end_byte": 83,
                      "text": "x <= y ? x : y",
                      "children": [
                        {
                          "type": "binary_expression",
                          "start_byte": 69,
                          "end_byte": 75,
                          "text": "x <= y",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 69,
                              "end_byte": 70,
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": "<=",
                              "start_byte": 71,
                              "end_byte": 73,
                              "text": "<=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 74,
                              "end_byte": 75,
                              "text": "y",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "?",
                          "start_byte": 76,
                          "end_byte": 77,
                          "text": "?",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 78,
                          "end_byte": 79,
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ":",
                          "start_byte": 80,
                          "end_byte": 81,
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 82,
                          "end_byte": 83,
                          "text": "y",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 84,
                  "end_byte": 85,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 86,
              "end_byte": 113,
              "text": "dividend = x >= y ? x : y ;",
              "children": [
                {
                  "type": "assignment_expression",
                  "start_byte": 86,
                  "end_byte": 111,
                  "text": "dividend = x >= y ? x : y",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 86,
                      "end_byte": 94,
                      "text": "dividend",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 95,
                      "end_byte": 96,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "conditional_expression",
                      "start_byte": 97,
                      "end_byte": 111,
                      "text": "x >= y ? x : y",
                      "children": [
                        {
                          "type": "binary_expression",
                          "start_byte": 97,
                          "end_byte": 103,
                          "text": "x >= y",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 97,
                              "end_byte": 98,
                              "text": "x",
                              "children": []
                            },
                            {
                              "type": ">=",
                              "start_byte": 99,
                              "end_byte": 101,
                              "text": ">=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 102,
                              "end_byte": 103,
                              "text": "y",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "?",
                          "start_byte": 104,
                          "end_byte": 105,
                          "text": "?",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 106,
                          "end_byte": 107,
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ":",
                          "start_byte": 108,
                          "end_byte": 109,
                          "text": ":",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 110,
                          "end_byte": 111,
                          "text": "y",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 112,
                  "end_byte": 113,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 114,
              "end_byte": 204,
              "text": "while ( divisor != 0 ) { rem = dividend % divisor ; dividend = divisor ; divisor = rem ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 114,
                  "end_byte": 119,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 120,
                  "end_byte": 136,
                  "text": "( divisor != 0 )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 120,
                      "end_byte": 121,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 122,
                      "end_byte": 134,
                      "text": "divisor != 0",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 122,
                          "end_byte": 129,
                          "text": "divisor",
                          "children": []
                        },
                        {
                          "type": "!=",
                          "start_byte": 130,
                          "end_byte": 132,
                          "text": "!=",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "start_byte": 133,
                          "end_byte": 134,
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 135,
                      "end_byte": 136,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 137,
                  "end_byte": 204,
                  "text": "{ rem = dividend % divisor ; dividend = divisor ; divisor = rem ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 137,
                      "end_byte": 138,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 139,
                      "end_byte": 165,
                      "text": "rem = dividend % divisor ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 139,
                          "end_byte": 163,
                          "text": "rem = dividend % divisor",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 139,
                              "end_byte": 142,
                              "text": "rem",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 143,
                              "end_byte": 144,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 145,
                              "end_byte": 163,
                              "text": "dividend % divisor",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 145,
                                  "end_byte": 153,
                                  "text": "dividend",
                                  "children": []
                                },
                                {
                                  "type": "%",
                                  "start_byte": 154,
                                  "end_byte": 155,
                                  "text": "%",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 156,
                                  "end_byte": 163,
                                  "text": "divisor",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 164,
                          "end_byte": 165,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 166,
                      "end_byte": 186,
                      "text": "dividend = divisor ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 166,
                          "end_byte": 184,
                          "text": "dividend = divisor",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 166,
                              "end_byte": 174,
                              "text": "dividend",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 175,
                              "end_byte": 176,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 177,
                              "end_byte": 184,
                              "text": "divisor",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 185,
                          "end_byte": 186,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 187,
                      "end_byte": 202,
                      "text": "divisor = rem ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 187,
                          "end_byte": 200,
                          "text": "divisor = rem",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 187,
                              "end_byte": 194,
                              "text": "divisor",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 195,
                              "end_byte": 196,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 197,
                              "end_byte": 200,
                              "text": "rem",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 201,
                          "end_byte": 202,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 203,
                      "end_byte": 204,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 205,
              "end_byte": 222,
              "text": "return dividend ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 205,
                  "end_byte": 211,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 212,
                  "end_byte": 220,
                  "text": "dividend",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 221,
                  "end_byte": 222,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 223,
              "end_byte": 224,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    },
    {
      "type": "function_definition",
      "start_byte": 225,
      "end_byte": 438,
      "text": "int main ( ) { int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y , hcf , lcm ; scanf ( \"%d%d\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d %d\\n\" , hcf , lcm ) ; } return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 225,
          "end_byte": 228,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 229,
          "end_byte": 237,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 229,
              "end_byte": 233,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 234,
              "end_byte": 237,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 234,
                  "end_byte": 235,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 236,
                  "end_byte": 237,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 238,
          "end_byte": 438,
          "text": "{ int t ; scanf ( \"%d\" , & t ) ; while ( t -- ) { int x , y , hcf , lcm ; scanf ( \"%d%d\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d %d\\n\" , hcf , lcm ) ; } return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 238,
              "end_byte": 239,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 240,
              "end_byte": 247,
              "text": "int t ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 240,
                  "end_byte": 243,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 244,
                  "end_byte": 245,
                  "text": "t",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 246,
                  "end_byte": 247,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 248,
              "end_byte": 270,
              "text": "scanf ( \"%d\" , & t ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 248,
                  "end_byte": 268,
                  "text": "scanf ( \"%d\" , & t )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 248,
                      "end_byte": 253,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 254,
                      "end_byte": 268,
                      "text": "( \"%d\" , & t )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 254,
                          "end_byte": 255,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 256,
                          "end_byte": 260,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 256,
                              "end_byte": 257,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 257,
                              "end_byte": 259,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 259,
                              "end_byte": 260,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 261,
                          "end_byte": 262,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 263,
                          "end_byte": 266,
                          "text": "& t",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 263,
                              "end_byte": 264,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 265,
                              "end_byte": 266,
                              "text": "t",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 267,
                          "end_byte": 268,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 269,
                  "end_byte": 270,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 271,
              "end_byte": 425,
              "text": "while ( t -- ) { int x , y , hcf , lcm ; scanf ( \"%d%d\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d %d\\n\" , hcf , lcm ) ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 271,
                  "end_byte": 276,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 277,
                  "end_byte": 285,
                  "text": "( t -- )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 277,
                      "end_byte": 278,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "update_expression",
                      "start_byte": 279,
                      "end_byte": 283,
                      "text": "t --",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 279,
                          "end_byte": 280,
                          "text": "t",
                          "children": []
                        },
                        {
                          "type": "--",
                          "start_byte": 281,
                          "end_byte": 283,
                          "text": "--",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 284,
                      "end_byte": 285,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 286,
                  "end_byte": 425,
                  "text": "{ int x , y , hcf , lcm ; scanf ( \"%d%d\" , & x , & y ) ; hcf = gcd ( x , y ) ; lcm = ( x * y ) / hcf ; printf ( \"%d %d\\n\" , hcf , lcm ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 286,
                      "end_byte": 287,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "declaration",
                      "start_byte": 288,
                      "end_byte": 311,
                      "text": "int x , y , hcf , lcm ;",
                      "children": [
                        {
                          "type": "primitive_type",
                          "start_byte": 288,
                          "end_byte": 291,
                          "text": "int",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 292,
                          "end_byte": 293,
                          "text": "x",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 294,
                          "end_byte": 295,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 296,
                          "end_byte": 297,
                          "text": "y",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 298,
                          "end_byte": 299,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 300,
                          "end_byte": 303,
                          "text": "hcf",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 304,
                          "end_byte": 305,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 306,
                          "end_byte": 309,
                          "text": "lcm",
                          "children": []
                        },
                        {
                          "type": ";",
                          "start_byte": 310,
                          "end_byte": 311,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 312,
                      "end_byte": 342,
                      "text": "scanf ( \"%d%d\" , & x , & y ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 312,
                          "end_byte": 340,
                          "text": "scanf ( \"%d%d\" , & x , & y )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 312,
                              "end_byte": 317,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 318,
                              "end_byte": 340,
                              "text": "( \"%d%d\" , & x , & y )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 318,
                                  "end_byte": 319,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 320,
                                  "end_byte": 326,
                                  "text": "\"%d%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 320,
                                      "end_byte": 321,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 321,
                                      "end_byte": 325,
                                      "text": "%d%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 325,
                                      "end_byte": 326,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 327,
                                  "end_byte": 328,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 329,
                                  "end_byte": 332,
                                  "text": "& x",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 329,
                                      "end_byte": 330,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 331,
                                      "end_byte": 332,
                                      "text": "x",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 333,
                                  "end_byte": 334,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 335,
                                  "end_byte": 338,
                                  "text": "& y",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 335,
                                      "end_byte": 336,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 337,
                                      "end_byte": 338,
                                      "text": "y",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 339,
                                  "end_byte": 340,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 341,
                          "end_byte": 342,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 343,
                      "end_byte": 364,
                      "text": "hcf = gcd ( x , y ) ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 343,
                          "end_byte": 362,
                          "text": "hcf = gcd ( x , y )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 343,
                              "end_byte": 346,
                              "text": "hcf",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 347,
                              "end_byte": 348,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "call_expression",
                              "start_byte": 349,
                              "end_byte": 362,
                              "text": "gcd ( x , y )",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 349,
                                  "end_byte": 352,
                                  "text": "gcd",
                                  "children": []
                                },
                                {
                                  "type": "argument_list",
                                  "start_byte": 353,
                                  "end_byte": 362,
                                  "text": "( x , y )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 353,
                                      "end_byte": 354,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 355,
                                      "end_byte": 356,
                                      "text": "x",
                                      "children": []
                                    },
                                    {
                                      "type": ",",
                                      "start_byte": 357,
                                      "end_byte": 358,
                                      "text": ",",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 359,
                                      "end_byte": 360,
                                      "text": "y",
                                      "children": []
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 361,
                                      "end_byte": 362,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 363,
                          "end_byte": 364,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 365,
                      "end_byte": 388,
                      "text": "lcm = ( x * y ) / hcf ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 365,
                          "end_byte": 386,
                          "text": "lcm = ( x * y ) / hcf",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 365,
                              "end_byte": 368,
                              "text": "lcm",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 369,
                              "end_byte": 370,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 371,
                              "end_byte": 386,
                              "text": "( x * y ) / hcf",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "start_byte": 371,
                                  "end_byte": 380,
                                  "text": "( x * y )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 371,
                                      "end_byte": 372,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 373,
                                      "end_byte": 378,
                                      "text": "x * y",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 373,
                                          "end_byte": 374,
                                          "text": "x",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "start_byte": 375,
                                          "end_byte": 376,
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 377,
                                          "end_byte": 378,
                                          "text": "y",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 379,
                                      "end_byte": 380,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "/",
                                  "start_byte": 381,
                                  "end_byte": 382,
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 383,
                                  "end_byte": 386,
                                  "text": "hcf",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 387,
                          "end_byte": 388,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 389,
                      "end_byte": 423,
                      "text": "printf ( \"%d %d\\n\" , hcf , lcm ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 389,
                          "end_byte": 421,
                          "text": "printf ( \"%d %d\\n\" , hcf , lcm )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 389,
                              "end_byte": 395,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 396,
                              "end_byte": 421,
                              "text": "( \"%d %d\\n\" , hcf , lcm )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 396,
                                  "end_byte": 397,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 398,
                                  "end_byte": 407,
                                  "text": "\"%d %d\\n\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 398,
                                      "end_byte": 399,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 399,
                                      "end_byte": 404,
                                      "text": "%d %d",
                                      "children": []
                                    },
                                    {
                                      "type": "escape_sequence",
                                      "start_byte": 404,
                                      "end_byte": 406,
                                      "text": "\\n",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 406,
                                      "end_byte": 407,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 408,
                                  "end_byte": 409,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 410,
                                  "end_byte": 413,
                                  "text": "hcf",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "start_byte": 414,
                                  "end_byte": 415,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 416,
                                  "end_byte": 419,
                                  "text": "lcm",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 420,
                                  "end_byte": 421,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 422,
                          "end_byte": 423,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 424,
                      "end_byte": 425,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 426,
              "end_byte": 436,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 426,
                  "end_byte": 432,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 433,
                  "end_byte": 434,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 435,
                  "end_byte": 436,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 437,
              "end_byte": 438,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}