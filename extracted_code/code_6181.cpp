int top = - 1 , stack [ 10000 ] ; void push ( int value ) { stack [ top ++ ] = value ; } int pop ( ) { return stack [ top -- ] ; } void findSum ( int * * triangle , int height , int sum , int i , int j ) { if ( i == height - 1 ) { push ( sum + triangle [ i ] [ j ] ) ; return ; } findSum ( triangle , height , sum + triangle [ i ] [ j ] , i + 1 , j ) ; findSum ( triangle , height , sum + triangle [ i ] [ j ] , i + 1 , j + 1 ) ; } int findLargestSum ( int * * triangle , int height ) { int largest , temp ; findSum ( triangle , height , 0 , 0 , 0 ) ; while ( top >= 0 ) { temp = pop ( ) ; if ( largest < temp ) largest = temp ; } return largest ; } int main ( void ) { int N , height , i , j , * * triangle ; scanf ( "%d" , & N ) ; while ( N -- ) { scanf ( "%d" , & height ) ; triangle = ( int * * ) malloc ( height * sizeof ( int * ) ) ; for ( i = 0 ; i < height ; i ++ ) { triangle [ i ] = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; } for ( i = 0 ; i < height ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & triangle [ i ] [ j ] ) ; } } printf ( "%d\n" , findLargestSum ( triangle , height ) ) ; } return 0 ; }