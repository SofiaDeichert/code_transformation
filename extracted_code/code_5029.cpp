int range , r ; int A [ 5050 ] ; int max_path ( ) ; int main ( ) { int t , i ; scanf ( "%d" , & t ) ; while ( t -- ) { scanf ( "%d" , & r ) ; range = ( r * ( r + 1 ) ) >> 1 ; for ( i = 0 ; i < range ; ++ i ) scanf ( "%d" , ( A + i ) ) ; printf ( "\n%d" , max_path ( ) ) ; } return 0 ; } int max_path ( ) { int i = 1 , j = 0 , k = 1 , delta = 1 , max ; while ( i < r ) { j = 0 ; A [ k ] += A [ k - delta ] ; ++ j ; ++ k ; while ( j < i ) { if ( A [ k - delta ] > A [ k - delta - 1 ] ) max = k - delta ; else max = k - delta - 1 ; A [ k ] += A [ max ] ; ++ k ; ++ j ; } A [ k ] += A [ k - delta - 1 ] ; ++ k ; ++ delta ; ++ i ; } -- i ; k = ( i * ( i + 1 ) ) >> 1 ; max = A [ k ] ; for ( ; k < range ; ++ k ) { if ( A [ k ] > max ) max = A [ k ] ; } return max ; }