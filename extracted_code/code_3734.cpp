void mergesort ( long long int a [ ] , long int i , long int j ) ; void merge ( long long int a [ ] , long int i1 , long int j1 , long int i2 , long int j2 ) ; int main ( ) { int t , i ; scanf ( "%d" , & t ) ; while ( t -- ) { long int n ; long long int s = 0 ; scanf ( "%ld" , & n ) ; long long int a [ n ] ; for ( i = 0 ; i < n ; i ++ ) { scanf ( "%lld" , & a [ i ] ) ; } mergesort ( a , 0 , n - 1 ) ; s = a [ 0 ] * ( n - 1 ) ; printf ( "%lld\n" , s ) ; } return 0 ; } void mergesort ( long long int a [ ] , long int i , long int j ) { int mid ; if ( i < j ) { mid = ( i + j ) / 2 ; mergesort ( a , i , mid ) ; mergesort ( a , mid + 1 , j ) ; merge ( a , i , mid , mid + 1 , j ) ; } } void merge ( long long int a [ ] , long int i1 , long int j1 , long int i2 , long int j2 ) { int temp [ 50 ] ; int i , j , k ; i = i1 ; j = i2 ; k = 0 ; while ( i <= j1 && j <= j2 ) { if ( a [ i ] < a [ j ] ) temp [ k ++ ] = a [ i ++ ] ; else temp [ k ++ ] = a [ j ++ ] ; } while ( i <= j1 ) temp [ k ++ ] = a [ i ++ ] ; while ( j <= j2 ) temp [ k ++ ] = a [ j ++ ] ; for ( i = i1 , j = 0 ; i <= j2 ; i ++ , j ++ ) a [ i ] = temp [ j ] ; }