int numBuff [ 5501 ] ; int bufIndex ; int N ; int temp ; int max ( int x , int y ) { return ( x > y ) ? x : y ; } int findMaxSum ( int level , int num , int sum ) { if ( level == N ) return sum + numBuff [ level * ( level - 1 ) / 2 + num - 1 ] ; return max ( findMaxSum ( level + 1 , num , numBuff [ level * ( level - 1 ) / 2 + num - 1 ] + sum ) , findMaxSum ( level + 1 , num + 1 , numBuff [ level * ( level - 1 ) / 2 + num - 1 ] + sum ) ) ; } void print_array ( int N ) { int i ; for ( i = 0 ; i < N ; i ++ ) puti ( numBuff [ i ] ) ; } int main ( ) { int T ; int X ; int i , j ; int max ; geti ( T ) ; while ( T -- ) { bufIndex = 0 ; geti ( N ) ; for ( i = 0 ; i < N ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) geti ( numBuff [ bufIndex ++ ] ) ; max = findMaxSum ( 1 , 1 , 0 ) ; printf ( "%d\n" , max ) ; } return 0 ; }