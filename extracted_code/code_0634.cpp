int getMaxPathSum ( int * * arr , int rowcount , int r , int c ) { int j , tempL , tempR ; if ( rowcount == 1 ) return * ( * ( arr + r ) + c ) ; tempL = getMaxPathSum ( arr , rowcount - 1 , r + 1 , c ) ; tempR = getMaxPathSum ( arr , rowcount - 1 , r + 1 , c + 1 ) ; if ( tempL > tempR ) return tempL + * ( * ( arr + r ) + c ) ; return tempR + * ( * ( arr + r ) + c ) ; } int main ( ) { int times , rowcount , i , j ; int * * arr ; for ( scanf ( "%d" , & times ) ; times ; times -- ) { scanf ( "%d" , & rowcount ) ; arr = ( int * * ) malloc ( rowcount * sizeof ( int * ) ) ; if ( ! arr ) { printf ( "\nerror: cannot allocate memory" ) ; exit ( 1 ) ; } for ( i = 0 ; i < rowcount ; i ++ ) { * ( arr + i ) = ( int * ) malloc ( i * sizeof ( int ) ) ; if ( ! ( arr + i ) ) { printf ( "\nerror: cannot allocate memory" ) ; exit ( 1 ) ; } } for ( i = 0 ; i < rowcount ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( "%d" , * ( arr + i ) + j ) ; printf ( "%d" , getMaxPathSum ( arr , rowcount , 0 , 0 ) ) ; } return 0 ; }