long array [ 100 ] [ 100 ] ; long totals [ 100 ] [ 100 ] ; void findMaxSum ( int starti , int startj , int row , int size ) { long temp = ( totals [ starti ] [ startj ] == 0 ) ? array [ starti ] [ startj ] : totals [ starti ] [ startj ] ; long sum1 = temp , sum2 = temp ; if ( starti + 1 < size ) { sum1 = temp + totals [ starti + 1 ] [ startj ] ; } if ( starti + 1 < size && startj + 1 <= row + 1 ) { sum2 = temp + totals [ starti + 1 ] [ startj + 1 ] ; } totals [ starti ] [ startj ] = ( sum1 > sum2 ) ? sum1 : sum2 ; if ( startj > 0 ) findMaxSum ( starti , startj - 1 , row , size ) ; if ( startj == 0 && starti > 0 ) findMaxSum ( starti - 1 , row - 1 , row - 1 , size ) ; return ; } int main ( ) { int totalInputs , a , i , j , size ; long answers [ 1000 ] ; scanf ( " %d" , & totalInputs ) ; for ( a = 0 ; a < totalInputs ; a ++ ) { scanf ( " %d" , & size ) ; for ( i = 0 ; i < size ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) totals [ i ] [ j ] = 0 ; for ( i = 0 ; i < size ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) scanf ( " %d" , & array [ i ] [ j ] ) ; findMaxSum ( size - 1 , size - 1 , size - 1 , size ) ; answers [ a ] = totals [ 0 ] [ 0 ] ; } for ( a = 0 ; a < totalInputs ; a ++ ) printf ( "%ld\n" , answers [ a ] ) ; return 0 ; }