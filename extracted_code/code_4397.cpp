typedef struct node { int key ; struct node * left ; struct node * right ; } node ; node * queue [ SIZE ] ; int front , rear ; int maxsum ; void trav ( node * , int ) ; node * insertonce ( node * , int ) ; node * inserttwice ( node * , int ) ; void enqueue ( node * ) ; void dequeue ( void ) ; int main ( void ) { node * root ; int testcases , num , i , j , val ; scanf ( "%d" , & testcases ) ; while ( testcases -- ) { root = NULL ; maxsum = - 1 ; front = rear = - 1 ; scanf ( "%d" , & num ) ; for ( i = 0 ; i < num ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d" , & val ) ; if ( j == 0 || j == i ) { root = insertonce ( root , val ) ; } else { root = inserttwice ( root , val ) ; } } } trav ( root , 0 ) ; printf ( "%d\n" , maxsum ) ; } return 0 ; } void trav ( node * root , int sum ) { if ( root != NULL ) { sum += root -> key ; trav ( root -> left , sum ) ; trav ( root -> right , sum ) ; } else { if ( sum > maxsum ) maxsum = sum ; } } node * inserttwice ( node * root , int val ) { node * ptr = malloc ( sizeof ( node ) ) ; ptr -> key = val ; ptr -> left = ptr -> right = NULL ; enqueue ( ptr ) ; node * temp = queue [ front ] ; if ( temp -> left == NULL ) temp -> left = ptr ; else if ( temp -> right == NULL ) temp -> right = ptr ; node * aga = queue [ front + 1 ] ; if ( aga -> left == NULL ) aga -> left = ptr ; else if ( aga -> right == NULL ) aga -> right = ptr ; if ( temp -> right != NULL && temp -> left != NULL ) dequeue ( ) ; if ( aga -> left != NULL && aga -> right != NULL ) dequeue ( ) ; return root ; } node * insertonce ( node * root , int val ) { node * ptr = malloc ( sizeof ( node ) ) ; ptr -> key = val ; ptr -> left = ptr -> right = NULL ; if ( front == - 1 ) { root = ptr ; enqueue ( ptr ) ; } else { node * temp = queue [ front ] ; if ( temp -> left == NULL ) temp -> left = ptr ; else if ( temp -> right == NULL ) temp -> right = ptr ; enqueue ( ptr ) ; if ( temp -> left != NULL && temp -> right != NULL ) dequeue ( ) ; } return root ; } void enqueue ( node * ptr ) { if ( front == - 1 ) front = rear = 0 ; else rear ++ ; queue [ rear ] = ptr ; } void dequeue ( void ) { if ( front == rear ) front = rear = - 1 ; else front ++ ; }