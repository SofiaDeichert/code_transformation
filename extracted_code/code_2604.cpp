int max_num ( int num1 , int num2 ) { if ( num1 > num2 ) return num1 ; return num2 ; } int main ( ) { int * * input , * * res , test_cases , no_of_lines , i , j , k , max = 0 ; scanf ( "%d" , & test_cases ) ; for ( i = 0 ; i < test_cases ; i ++ ) { max = 0 ; scanf ( "%d" , & no_of_lines ) ; input = ( int * * ) malloc ( sizeof ( int ) * no_of_lines ) ; res = ( int * * ) malloc ( sizeof ( int ) * no_of_lines ) ; for ( j = 0 ; j < no_of_lines ; j ++ ) { input [ j ] = ( int * ) malloc ( sizeof ( int ) * ( j + 1 ) ) ; res [ j ] = ( int * ) malloc ( sizeof ( int ) * ( j + 1 ) ) ; for ( k = 0 ; k <= j ; k ++ ) { scanf ( "%d" , & input [ j ] [ k ] ) ; } } res [ 0 ] [ 0 ] = input [ 0 ] [ 0 ] ; for ( j = 1 ; j < no_of_lines ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { if ( k == 0 ) { res [ j ] [ k ] = res [ j - 1 ] [ k ] + input [ j ] [ k ] ; } else if ( k == j ) { res [ j ] [ k ] = res [ j - 1 ] [ k - 1 ] + input [ j ] [ k ] ; } else { res [ j ] [ k ] = max_num ( res [ j - 1 ] [ k ] , res [ j - 1 ] [ k - 1 ] ) + input [ j ] [ k ] ; } } } for ( k = 0 ; k < no_of_lines - 1 ; k ++ ) { if ( max < res [ no_of_lines - 1 ] [ k ] ) max = res [ no_of_lines - 1 ] [ k ] ; } printf ( "%d\n" , max ) ; } return 0 ; }