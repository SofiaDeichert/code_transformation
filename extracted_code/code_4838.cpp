int p [ 100 ] [ 100 ] ; int finds_sum ( int ) ; void reset ( void ) ; int max ( int , int ) ; int main ( ) { int n ; int test_case ; int rows ; int i , j ; int k ; scanf ( "%d" , & test_case ) ; for ( k = 0 ; k < test_case ; k ++ ) { scanf ( "%d" , & rows ) ; { reset ( ) ; for ( i = 0 ; i < rows ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) scanf ( "%d" , & p [ i ] [ j ] ) ; } printf ( "%d\n" , find_sum ( rows ) ) ; } } return 0 ; } int find_sum ( int rows ) { int i , j ; int result = 0 ; for ( i = 0 ; i < rows ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) { if ( i == 0 && j == 0 ) p [ i ] [ j ] = p [ i ] [ j ] ; else p [ i ] [ j ] = max ( p [ i - 1 ] [ j ] + p [ i ] [ j ] , p [ i - 1 ] [ j - 1 ] + p [ i ] [ j ] ) ; } for ( i = 0 ; i < rows ; i ++ ) if ( p [ rows - 1 ] [ i ] > result ) result = p [ rows - 1 ] [ i ] ; return result ; } void reset ( ) { int i ; int j ; for ( i = 0 ; i < 100 ; i ++ ) for ( j = 0 ; j < 100 ; j ++ ) { p [ i ] [ j ] = 0 ; } } int max ( int a , int b ) { if ( a > b ) return a ; else return b ; }