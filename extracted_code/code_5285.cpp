static int map [ 100 ] [ 100 ] ; int path ( const int max , int row , int col , int value ) { value += map [ row ] [ col ] ; if ( row >= max ) return value ; int leftval = path ( max , row + 1 , col , value ) ; int rightval = path ( max , row + 1 , col + 1 , value ) ; return ( ( leftval > rightval ) ? leftval : rightval ) ; } int main ( void ) { int tris ; scanf ( "%d" , & tris ) ; int i ; for ( i = 0 ; i < tris ; ++ i ) { int rows ; scanf ( "%d" , & rows ) ; memset ( map , 0 , 100 * 100 ) ; int j ; for ( j = 0 ; j < rows ; ++ j ) { int k ; for ( k = 0 ; k <= j ; ++ k ) { scanf ( "%d" , & ( map [ j ] [ k ] ) ) ; } } printf ( "%d\n" , path ( rows - 1 , 0 , 0 , 0 ) ) ; } return 0 ; }