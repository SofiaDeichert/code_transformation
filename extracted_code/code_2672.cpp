int sol ( int * arr , int N ) { int * * array = ( int * * ) arr ; int i , j ; for ( i = 1 ; i < N ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) if ( j == 0 ) array [ i ] [ j ] += array [ i - 1 ] [ j ] ; else if ( j == i ) array [ i ] [ j ] += array [ i - 1 ] [ j - 1 ] ; else { if ( array [ i - 1 ] [ j ] > array [ i - 1 ] [ j - 1 ] ) array [ i ] [ j ] += array [ i - 1 ] [ j ] ; else array [ i ] [ j ] += array [ i - 1 ] [ j - 1 ] ; } int max = array [ N - 1 ] [ 0 ] ; for ( i = 1 ; i < N ; i ++ ) if ( array [ N - 1 ] [ i ] > max ) max = array [ N - 1 ] [ i ] ; return max ; } int main ( ) { int T ; scanf ( "%d" , & T ) ; while ( T ) { int N ; scanf ( "%d" , & N ) ; int * * array = malloc ( sizeof ( int * ) * N ) ; int i , j ; for ( i = 0 ; i < N ; i ++ ) array [ i ] = malloc ( sizeof ( int ) * N ) ; for ( i = 0 ; i < N ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { char ch ; scanf ( "%d%c" , & array [ i ] [ j ] , & ch ) ; } } int max = sol ( ( int * ) array , N ) ; printf ( "%d\n" , max ) ; for ( i = 0 ; i < N ; i ++ ) free ( array [ i ] ) ; free ( array ) ; T -- ; } return 0 ; }