unsigned short int FindMaxSum ( unsigned short int * * row , int rn ) ; int main ( ) { unsigned short int t , i , j , k , x ; unsigned short int * * row ; unsigned short int * MaxSum ; scanf ( "%hu" , & t ) ; row = ( unsigned short int * * ) malloc ( sizeof ( unsigned short int * ) * ROW_NUM ) ; MaxSum = ( unsigned short int * ) malloc ( sizeof ( unsigned short int ) * t ) ; for ( i = 0 ; i < ROW_NUM ; i ++ ) { row [ i ] = ( unsigned short int * ) malloc ( sizeof ( unsigned short int ) * ( i + 1 ) ) ; } for ( i = 0 ; i < t ; i ++ ) { scanf ( "%hu" , & x ) ; for ( j = 0 ; j < x ; j ++ ) { for ( k = 0 ; k <= j ; k ++ ) { scanf ( "%hu" , & row [ j ] [ k ] ) ; } } MaxSum [ i ] = FindMaxSum ( row , x ) ; } for ( i = 0 ; i < t ; i ++ ) { printf ( "%hu\n" , MaxSum [ i ] ) ; } free ( MaxSum ) ; for ( i = 0 ; i < ROW_NUM ; i ++ ) { free ( row [ i ] ) ; } free ( row ) ; return 0 ; } unsigned short int FindMaxSum ( unsigned short int * * row , int rn ) { unsigned short int * lastMax , * curMax , * last , * cur ; unsigned short int Max = 0 , i , j ; lastMax = ( unsigned short int * ) malloc ( sizeof ( unsigned short int ) * ROW_NUM ) ; curMax = ( unsigned short int * ) malloc ( sizeof ( unsigned short int ) * ROW_NUM ) ; last = lastMax ; cur = curMax ; Max = last [ 0 ] = row [ 0 ] [ 0 ] ; for ( i = 1 ; i < rn ; i ++ ) { for ( j = 1 ; j < i ; j ++ ) { if ( last [ j - 1 ] + row [ i ] [ j ] > last [ j ] + row [ i ] [ j ] ) { cur [ j ] = last [ j - 1 ] + row [ i ] [ j ] ; } else { cur [ j ] = last [ j ] + row [ i ] [ j ] ; } } cur [ 0 ] = last [ 0 ] + row [ i ] [ 0 ] ; if ( Max < cur [ 0 ] ) { Max = cur [ 0 ] ; } cur [ i ] = last [ i - 1 ] + row [ i ] [ i ] ; if ( Max < cur [ i ] ) { Max = cur [ i ] ; } last = curMax ; cur = lastMax ; } free ( lastMax ) ; free ( curMax ) ; return Max ; }