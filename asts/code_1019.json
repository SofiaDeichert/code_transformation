{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 591,
  "text": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( \"Enter two numbers\\n\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"GCD of %d and %d = %d\\n\" , num1 , num2 , gcd ) ; printf ( \"LCM of %d and %d = %d\\n\" , num1 , num2 , lcm ) ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 591,
      "text": "void main ( ) { int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( \"Enter two numbers\\n\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"GCD of %d and %d = %d\\n\" , num1 , num2 , gcd ) ; printf ( \"LCM of %d and %d = %d\\n\" , num1 , num2 , lcm ) ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 4,
          "text": "void",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 5,
          "end_byte": 13,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 5,
              "end_byte": 9,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 10,
              "end_byte": 13,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 10,
                  "end_byte": 11,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 12,
                  "end_byte": 13,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 14,
          "end_byte": 591,
          "text": "{ int num1 , num2 , gcd , lcm , remainder , numerator , denominator ; printf ( \"Enter two numbers\\n\" ) ; scanf ( \"%d %d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; } remainder = numerator % denominator ; while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = num1 * num2 / gcd ; printf ( \"GCD of %d and %d = %d\\n\" , num1 , num2 , gcd ) ; printf ( \"LCM of %d and %d = %d\\n\" , num1 , num2 , lcm ) ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 14,
              "end_byte": 15,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 16,
              "end_byte": 83,
              "text": "int num1 , num2 , gcd , lcm , remainder , numerator , denominator ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 16,
                  "end_byte": 19,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 20,
                  "end_byte": 24,
                  "text": "num1",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 25,
                  "end_byte": 26,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 27,
                  "end_byte": 31,
                  "text": "num2",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 32,
                  "end_byte": 33,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 34,
                  "end_byte": 37,
                  "text": "gcd",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 38,
                  "end_byte": 39,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 40,
                  "end_byte": 43,
                  "text": "lcm",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 44,
                  "end_byte": 45,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 46,
                  "end_byte": 55,
                  "text": "remainder",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 56,
                  "end_byte": 57,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 58,
                  "end_byte": 67,
                  "text": "numerator",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 68,
                  "end_byte": 69,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 70,
                  "end_byte": 81,
                  "text": "denominator",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 82,
                  "end_byte": 83,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 84,
              "end_byte": 118,
              "text": "printf ( \"Enter two numbers\\n\" ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 84,
                  "end_byte": 116,
                  "text": "printf ( \"Enter two numbers\\n\" )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 84,
                      "end_byte": 90,
                      "text": "printf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 91,
                      "end_byte": 116,
                      "text": "( \"Enter two numbers\\n\" )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 91,
                          "end_byte": 92,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 93,
                          "end_byte": 114,
                          "text": "\"Enter two numbers\\n\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 93,
                              "end_byte": 94,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 94,
                              "end_byte": 111,
                              "text": "Enter two numbers",
                              "children": []
                            },
                            {
                              "type": "escape_sequence",
                              "start_byte": 111,
                              "end_byte": 113,
                              "text": "\\n",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 113,
                              "end_byte": 114,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 115,
                          "end_byte": 116,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 117,
                  "end_byte": 118,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 119,
              "end_byte": 156,
              "text": "scanf ( \"%d %d\" , & num1 , & num2 ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 119,
                  "end_byte": 154,
                  "text": "scanf ( \"%d %d\" , & num1 , & num2 )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 119,
                      "end_byte": 124,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 125,
                      "end_byte": 154,
                      "text": "( \"%d %d\" , & num1 , & num2 )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 125,
                          "end_byte": 126,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 127,
                          "end_byte": 134,
                          "text": "\"%d %d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 127,
                              "end_byte": 128,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 128,
                              "end_byte": 133,
                              "text": "%d %d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 133,
                              "end_byte": 134,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 135,
                          "end_byte": 136,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 137,
                          "end_byte": 143,
                          "text": "& num1",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 137,
                              "end_byte": 138,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 139,
                              "end_byte": 143,
                              "text": "num1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 144,
                          "end_byte": 145,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 146,
                          "end_byte": 152,
                          "text": "& num2",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 146,
                              "end_byte": 147,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 148,
                              "end_byte": 152,
                              "text": "num2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 153,
                          "end_byte": 154,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 155,
                  "end_byte": 156,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "if_statement",
              "start_byte": 157,
              "end_byte": 268,
              "text": "if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; } else { numerator = num2 ; denominator = num1 ; }",
              "children": [
                {
                  "type": "if",
                  "start_byte": 157,
                  "end_byte": 159,
                  "text": "if",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 160,
                  "end_byte": 175,
                  "text": "( num1 > num2 )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 160,
                      "end_byte": 161,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 162,
                      "end_byte": 173,
                      "text": "num1 > num2",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 162,
                          "end_byte": 166,
                          "text": "num1",
                          "children": []
                        },
                        {
                          "type": ">",
                          "start_byte": 167,
                          "end_byte": 168,
                          "text": ">",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 169,
                          "end_byte": 173,
                          "text": "num2",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 174,
                      "end_byte": 175,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 176,
                  "end_byte": 219,
                  "text": "{ numerator = num1 ; denominator = num2 ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 176,
                      "end_byte": 177,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 178,
                      "end_byte": 196,
                      "text": "numerator = num1 ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 178,
                          "end_byte": 194,
                          "text": "numerator = num1",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 178,
                              "end_byte": 187,
                              "text": "numerator",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 188,
                              "end_byte": 189,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 190,
                              "end_byte": 194,
                              "text": "num1",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 195,
                          "end_byte": 196,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 197,
                      "end_byte": 217,
                      "text": "denominator = num2 ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 197,
                          "end_byte": 215,
                          "text": "denominator = num2",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 197,
                              "end_byte": 208,
                              "text": "denominator",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 209,
                              "end_byte": 210,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 211,
                              "end_byte": 215,
                              "text": "num2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 216,
                          "end_byte": 217,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 218,
                      "end_byte": 219,
                      "text": "}",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "else_clause",
                  "start_byte": 220,
                  "end_byte": 268,
                  "text": "else { numerator = num2 ; denominator = num1 ; }",
                  "children": [
                    {
                      "type": "else",
                      "start_byte": 220,
                      "end_byte": 224,
                      "text": "else",
                      "children": []
                    },
                    {
                      "type": "compound_statement",
                      "start_byte": 225,
                      "end_byte": 268,
                      "text": "{ numerator = num2 ; denominator = num1 ; }",
                      "children": [
                        {
                          "type": "{",
                          "start_byte": 225,
                          "end_byte": 226,
                          "text": "{",
                          "children": []
                        },
                        {
                          "type": "expression_statement",
                          "start_byte": 227,
                          "end_byte": 245,
                          "text": "numerator = num2 ;",
                          "children": [
                            {
                              "type": "assignment_expression",
                              "start_byte": 227,
                              "end_byte": 243,
                              "text": "numerator = num2",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 227,
                                  "end_byte": 236,
                                  "text": "numerator",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "start_byte": 237,
                                  "end_byte": 238,
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 239,
                                  "end_byte": 243,
                                  "text": "num2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "start_byte": 244,
                              "end_byte": 245,
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "expression_statement",
                          "start_byte": 246,
                          "end_byte": 266,
                          "text": "denominator = num1 ;",
                          "children": [
                            {
                              "type": "assignment_expression",
                              "start_byte": 246,
                              "end_byte": 264,
                              "text": "denominator = num1",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 246,
                                  "end_byte": 257,
                                  "text": "denominator",
                                  "children": []
                                },
                                {
                                  "type": "=",
                                  "start_byte": 258,
                                  "end_byte": 259,
                                  "text": "=",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 260,
                                  "end_byte": 264,
                                  "text": "num1",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ";",
                              "start_byte": 265,
                              "end_byte": 266,
                              "text": ";",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "}",
                          "start_byte": 267,
                          "end_byte": 268,
                          "text": "}",
                          "children": []
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 269,
              "end_byte": 306,
              "text": "remainder = numerator % denominator ;",
              "children": [
                {
                  "type": "assignment_expression",
                  "start_byte": 269,
                  "end_byte": 304,
                  "text": "remainder = numerator % denominator",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 269,
                      "end_byte": 278,
                      "text": "remainder",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 279,
                      "end_byte": 280,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 281,
                      "end_byte": 304,
                      "text": "numerator % denominator",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 281,
                          "end_byte": 290,
                          "text": "numerator",
                          "children": []
                        },
                        {
                          "type": "%",
                          "start_byte": 291,
                          "end_byte": 292,
                          "text": "%",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 293,
                          "end_byte": 304,
                          "text": "denominator",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 305,
                  "end_byte": 306,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "while_statement",
              "start_byte": 307,
              "end_byte": 425,
              "text": "while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; }",
              "children": [
                {
                  "type": "while",
                  "start_byte": 307,
                  "end_byte": 312,
                  "text": "while",
                  "children": []
                },
                {
                  "type": "condition_clause",
                  "start_byte": 313,
                  "end_byte": 331,
                  "text": "( remainder != 0 )",
                  "children": [
                    {
                      "type": "(",
                      "start_byte": 313,
                      "end_byte": 314,
                      "text": "(",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 315,
                      "end_byte": 329,
                      "text": "remainder != 0",
                      "children": [
                        {
                          "type": "identifier",
                          "start_byte": 315,
                          "end_byte": 324,
                          "text": "remainder",
                          "children": []
                        },
                        {
                          "type": "!=",
                          "start_byte": 325,
                          "end_byte": 327,
                          "text": "!=",
                          "children": []
                        },
                        {
                          "type": "number_literal",
                          "start_byte": 328,
                          "end_byte": 329,
                          "text": "0",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": ")",
                      "start_byte": 330,
                      "end_byte": 331,
                      "text": ")",
                      "children": []
                    }
                  ]
                },
                {
                  "type": "compound_statement",
                  "start_byte": 332,
                  "end_byte": 425,
                  "text": "{ numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 332,
                      "end_byte": 333,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 334,
                      "end_byte": 359,
                      "text": "numerator = denominator ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 334,
                          "end_byte": 357,
                          "text": "numerator = denominator",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 334,
                              "end_byte": 343,
                              "text": "numerator",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 344,
                              "end_byte": 345,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 346,
                              "end_byte": 357,
                              "text": "denominator",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 358,
                          "end_byte": 359,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 360,
                      "end_byte": 385,
                      "text": "denominator = remainder ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 360,
                          "end_byte": 383,
                          "text": "denominator = remainder",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 360,
                              "end_byte": 371,
                              "text": "denominator",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 372,
                              "end_byte": 373,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 374,
                              "end_byte": 383,
                              "text": "remainder",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 384,
                          "end_byte": 385,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 386,
                      "end_byte": 423,
                      "text": "remainder = numerator % denominator ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 386,
                          "end_byte": 421,
                          "text": "remainder = numerator % denominator",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 386,
                              "end_byte": 395,
                              "text": "remainder",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 396,
                              "end_byte": 397,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 398,
                              "end_byte": 421,
                              "text": "numerator % denominator",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 398,
                                  "end_byte": 407,
                                  "text": "numerator",
                                  "children": []
                                },
                                {
                                  "type": "%",
                                  "start_byte": 408,
                                  "end_byte": 409,
                                  "text": "%",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 410,
                                  "end_byte": 421,
                                  "text": "denominator",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 422,
                          "end_byte": 423,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 424,
                      "end_byte": 425,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 426,
              "end_byte": 445,
              "text": "gcd = denominator ;",
              "children": [
                {
                  "type": "assignment_expression",
                  "start_byte": 426,
                  "end_byte": 443,
                  "text": "gcd = denominator",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 426,
                      "end_byte": 429,
                      "text": "gcd",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 430,
                      "end_byte": 431,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 432,
                      "end_byte": 443,
                      "text": "denominator",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 444,
                  "end_byte": 445,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 446,
              "end_byte": 471,
              "text": "lcm = num1 * num2 / gcd ;",
              "children": [
                {
                  "type": "assignment_expression",
                  "start_byte": 446,
                  "end_byte": 469,
                  "text": "lcm = num1 * num2 / gcd",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 446,
                      "end_byte": 449,
                      "text": "lcm",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 450,
                      "end_byte": 451,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "binary_expression",
                      "start_byte": 452,
                      "end_byte": 469,
                      "text": "num1 * num2 / gcd",
                      "children": [
                        {
                          "type": "binary_expression",
                          "start_byte": 452,
                          "end_byte": 463,
                          "text": "num1 * num2",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 452,
                              "end_byte": 456,
                              "text": "num1",
                              "children": []
                            },
                            {
                              "type": "*",
                              "start_byte": 457,
                              "end_byte": 458,
                              "text": "*",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 459,
                              "end_byte": 463,
                              "text": "num2",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "/",
                          "start_byte": 464,
                          "end_byte": 465,
                          "text": "/",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 466,
                          "end_byte": 469,
                          "text": "gcd",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 470,
                  "end_byte": 471,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 472,
              "end_byte": 530,
              "text": "printf ( \"GCD of %d and %d = %d\\n\" , num1 , num2 , gcd ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 472,
                  "end_byte": 528,
                  "text": "printf ( \"GCD of %d and %d = %d\\n\" , num1 , num2 , gcd )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 472,
                      "end_byte": 478,
                      "text": "printf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 479,
                      "end_byte": 528,
                      "text": "( \"GCD of %d and %d = %d\\n\" , num1 , num2 , gcd )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 479,
                          "end_byte": 480,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 481,
                          "end_byte": 506,
                          "text": "\"GCD of %d and %d = %d\\n\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 481,
                              "end_byte": 482,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 482,
                              "end_byte": 503,
                              "text": "GCD of %d and %d = %d",
                              "children": []
                            },
                            {
                              "type": "escape_sequence",
                              "start_byte": 503,
                              "end_byte": 505,
                              "text": "\\n",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 505,
                              "end_byte": 506,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 507,
                          "end_byte": 508,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 509,
                          "end_byte": 513,
                          "text": "num1",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 514,
                          "end_byte": 515,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 516,
                          "end_byte": 520,
                          "text": "num2",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 521,
                          "end_byte": 522,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 523,
                          "end_byte": 526,
                          "text": "gcd",
                          "children": []
                        },
                        {
                          "type": ")",
                          "start_byte": 527,
                          "end_byte": 528,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 529,
                  "end_byte": 530,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 531,
              "end_byte": 589,
              "text": "printf ( \"LCM of %d and %d = %d\\n\" , num1 , num2 , lcm ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 531,
                  "end_byte": 587,
                  "text": "printf ( \"LCM of %d and %d = %d\\n\" , num1 , num2 , lcm )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 531,
                      "end_byte": 537,
                      "text": "printf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 538,
                      "end_byte": 587,
                      "text": "( \"LCM of %d and %d = %d\\n\" , num1 , num2 , lcm )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 538,
                          "end_byte": 539,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 540,
                          "end_byte": 565,
                          "text": "\"LCM of %d and %d = %d\\n\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 540,
                              "end_byte": 541,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 541,
                              "end_byte": 562,
                              "text": "LCM of %d and %d = %d",
                              "children": []
                            },
                            {
                              "type": "escape_sequence",
                              "start_byte": 562,
                              "end_byte": 564,
                              "text": "\\n",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 564,
                              "end_byte": 565,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 566,
                          "end_byte": 567,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 568,
                          "end_byte": 572,
                          "text": "num1",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 573,
                          "end_byte": 574,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 575,
                          "end_byte": 579,
                          "text": "num2",
                          "children": []
                        },
                        {
                          "type": ",",
                          "start_byte": 580,
                          "end_byte": 581,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "identifier",
                          "start_byte": 582,
                          "end_byte": 585,
                          "text": "lcm",
                          "children": []
                        },
                        {
                          "type": ")",
                          "start_byte": 586,
                          "end_byte": 587,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 588,
                  "end_byte": 589,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 590,
              "end_byte": 591,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}