void findmax ( int * * triangle , int * * sums , int r , int c , int lines ) ; int main ( int argc , char * argv [ ] ) { char c ; int cases , lines , iter , i , j , * * triangle , * * sums ; scanf ( "%d" , & cases ) ; for ( iter = 1 ; iter <= cases ; iter ++ ) { scanf ( "%d" , & lines ) ; triangle = ( int * * ) malloc ( lines * sizeof ( int * ) ) ; sums = ( int * * ) malloc ( lines * sizeof ( int * ) ) ; for ( i = 0 ; i < lines ; i ++ ) { * ( sums + i ) = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; * ( triangle + i ) = ( int * ) malloc ( ( i + 1 ) * sizeof ( int ) ) ; } for ( i = 0 ; i < lines ; i ++ ) { for ( j = 0 ; j <= i ; j ++ ) { scanf ( "%d%c" , * ( triangle + i ) + j , & c ) ; } } for ( i = 0 ; i < lines - 1 ; i ++ ) for ( j = 0 ; j <= i ; j ++ ) sums [ i ] [ j ] = - 1 ; for ( i = 0 ; i < lines ; i ++ ) sums [ lines - 1 ] [ i ] = triangle [ lines - 1 ] [ i ] ; findmax ( triangle , sums , 0 , 0 , lines ) ; printf ( "%d\n" , sums [ 0 ] [ 0 ] ) ; } return 0 ; } void findmax ( int * * triangle , int * * sums , int r , int c , int lines ) { if ( r == lines - 1 ) return ; if ( sums [ r + 1 ] [ c ] < 0 ) findmax ( triangle , sums , r + 1 , c , lines ) ; if ( sums [ r + 1 ] [ c + 1 ] < 0 ) findmax ( triangle , sums , r + 1 , c + 1 , lines ) ; sums [ r ] [ c ] = triangle [ r ] [ c ] + ( ( sums [ r + 1 ] [ c ] > sums [ r + 1 ] [ c + 1 ] ) ? sums [ r + 1 ] [ c ] : sums [ r + 1 ] [ c + 1 ] ) ; }