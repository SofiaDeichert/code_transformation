int max , sum , i , t , k , j = 0 , f = 0 ; int q [ 3000 ] ; void ser ( int , int ) ; int main ( void ) { fastRead ( & t ) ; while ( t -- ) { fastRead ( & k ) ; k = k * ( k + 1 ) / 2 ; max = 0 ; sum = 0 ; for ( i = 0 ; i < k ; i ++ ) { fastRead ( q [ i ] ) ; } ser ( q [ 0 ] , 0 ) ; printf ( "%d\n" , max ) ; } return 0 ; } void ser ( int old , int opos ) { sum += old ; j ++ ; if ( ( opos + j ) < k ) { ser ( q [ opos + j ] , opos + j ) ; f = 0 ; } else j -- ; max = maxf ( sum , max ) ; if ( f == 0 ) { f = 1 ; sum = sum - old ; ser ( q [ opos + 1 ] , opos + 1 ) ; j -- ; } else { sum = sum - old ; } } void inline fastRead ( int * a ) { register char c = 0 ; while ( c < 33 ) c = getchar_unlocked ( ) ; * a = 0 ; while ( c > 33 ) { * a = * a * 10 + c - '0' ; c = getchar_unlocked ( ) ; } }