{
  "type": "translation_unit",
  "start_byte": 0,
  "end_byte": 587,
  "text": "int main ( ) { int i , t , num1 , num2 , remainder , denominator , numerator , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; remainder = numerator % denominator ; } else { numerator = num2 ; denominator = num2 ; remainder = numerator % denominator ; } while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }",
  "children": [
    {
      "type": "function_definition",
      "start_byte": 0,
      "end_byte": 587,
      "text": "int main ( ) { int i , t , num1 , num2 , remainder , denominator , numerator , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; remainder = numerator % denominator ; } else { numerator = num2 ; denominator = num2 ; remainder = numerator % denominator ; } while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }",
      "children": [
        {
          "type": "primitive_type",
          "start_byte": 0,
          "end_byte": 3,
          "text": "int",
          "children": []
        },
        {
          "type": "function_declarator",
          "start_byte": 4,
          "end_byte": 12,
          "text": "main ( )",
          "children": [
            {
              "type": "identifier",
              "start_byte": 4,
              "end_byte": 8,
              "text": "main",
              "children": []
            },
            {
              "type": "parameter_list",
              "start_byte": 9,
              "end_byte": 12,
              "text": "( )",
              "children": [
                {
                  "type": "(",
                  "start_byte": 9,
                  "end_byte": 10,
                  "text": "(",
                  "children": []
                },
                {
                  "type": ")",
                  "start_byte": 11,
                  "end_byte": 12,
                  "text": ")",
                  "children": []
                }
              ]
            }
          ]
        },
        {
          "type": "compound_statement",
          "start_byte": 13,
          "end_byte": 587,
          "text": "{ int i , t , num1 , num2 , remainder , denominator , numerator , gcd , lcm ; scanf ( \"%d\" , & t ) ; for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; remainder = numerator % denominator ; } else { numerator = num2 ; denominator = num2 ; remainder = numerator % denominator ; } while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; } return 0 ; }",
          "children": [
            {
              "type": "{",
              "start_byte": 13,
              "end_byte": 14,
              "text": "{",
              "children": []
            },
            {
              "type": "declaration",
              "start_byte": 15,
              "end_byte": 90,
              "text": "int i , t , num1 , num2 , remainder , denominator , numerator , gcd , lcm ;",
              "children": [
                {
                  "type": "primitive_type",
                  "start_byte": 15,
                  "end_byte": 18,
                  "text": "int",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 19,
                  "end_byte": 20,
                  "text": "i",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 21,
                  "end_byte": 22,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 23,
                  "end_byte": 24,
                  "text": "t",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 25,
                  "end_byte": 26,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 27,
                  "end_byte": 31,
                  "text": "num1",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 32,
                  "end_byte": 33,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 34,
                  "end_byte": 38,
                  "text": "num2",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 39,
                  "end_byte": 40,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 41,
                  "end_byte": 50,
                  "text": "remainder",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 51,
                  "end_byte": 52,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 53,
                  "end_byte": 64,
                  "text": "denominator",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 65,
                  "end_byte": 66,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 67,
                  "end_byte": 76,
                  "text": "numerator",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 77,
                  "end_byte": 78,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 79,
                  "end_byte": 82,
                  "text": "gcd",
                  "children": []
                },
                {
                  "type": ",",
                  "start_byte": 83,
                  "end_byte": 84,
                  "text": ",",
                  "children": []
                },
                {
                  "type": "identifier",
                  "start_byte": 85,
                  "end_byte": 88,
                  "text": "lcm",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 89,
                  "end_byte": 90,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "expression_statement",
              "start_byte": 91,
              "end_byte": 113,
              "text": "scanf ( \"%d\" , & t ) ;",
              "children": [
                {
                  "type": "call_expression",
                  "start_byte": 91,
                  "end_byte": 111,
                  "text": "scanf ( \"%d\" , & t )",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 91,
                      "end_byte": 96,
                      "text": "scanf",
                      "children": []
                    },
                    {
                      "type": "argument_list",
                      "start_byte": 97,
                      "end_byte": 111,
                      "text": "( \"%d\" , & t )",
                      "children": [
                        {
                          "type": "(",
                          "start_byte": 97,
                          "end_byte": 98,
                          "text": "(",
                          "children": []
                        },
                        {
                          "type": "string_literal",
                          "start_byte": 99,
                          "end_byte": 103,
                          "text": "\"%d\"",
                          "children": [
                            {
                              "type": "\"",
                              "start_byte": 99,
                              "end_byte": 100,
                              "text": "\"",
                              "children": []
                            },
                            {
                              "type": "string_content",
                              "start_byte": 100,
                              "end_byte": 102,
                              "text": "%d",
                              "children": []
                            },
                            {
                              "type": "\"",
                              "start_byte": 102,
                              "end_byte": 103,
                              "text": "\"",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ",",
                          "start_byte": 104,
                          "end_byte": 105,
                          "text": ",",
                          "children": []
                        },
                        {
                          "type": "pointer_expression",
                          "start_byte": 106,
                          "end_byte": 109,
                          "text": "& t",
                          "children": [
                            {
                              "type": "&",
                              "start_byte": 106,
                              "end_byte": 107,
                              "text": "&",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 108,
                              "end_byte": 109,
                              "text": "t",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ")",
                          "start_byte": 110,
                          "end_byte": 111,
                          "text": ")",
                          "children": []
                        }
                      ]
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 112,
                  "end_byte": 113,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "for_statement",
              "start_byte": 114,
              "end_byte": 574,
              "text": "for ( i = 1 ; i <= t ; i ++ ) { scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; remainder = numerator % denominator ; } else { numerator = num2 ; denominator = num2 ; remainder = numerator % denominator ; } while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; }",
              "children": [
                {
                  "type": "for",
                  "start_byte": 114,
                  "end_byte": 117,
                  "text": "for",
                  "children": []
                },
                {
                  "type": "(",
                  "start_byte": 118,
                  "end_byte": 119,
                  "text": "(",
                  "children": []
                },
                {
                  "type": "assignment_expression",
                  "start_byte": 120,
                  "end_byte": 125,
                  "text": "i = 1",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 120,
                      "end_byte": 121,
                      "text": "i",
                      "children": []
                    },
                    {
                      "type": "=",
                      "start_byte": 122,
                      "end_byte": 123,
                      "text": "=",
                      "children": []
                    },
                    {
                      "type": "number_literal",
                      "start_byte": 124,
                      "end_byte": 125,
                      "text": "1",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 126,
                  "end_byte": 127,
                  "text": ";",
                  "children": []
                },
                {
                  "type": "binary_expression",
                  "start_byte": 128,
                  "end_byte": 134,
                  "text": "i <= t",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 128,
                      "end_byte": 129,
                      "text": "i",
                      "children": []
                    },
                    {
                      "type": "<=",
                      "start_byte": 130,
                      "end_byte": 132,
                      "text": "<=",
                      "children": []
                    },
                    {
                      "type": "identifier",
                      "start_byte": 133,
                      "end_byte": 134,
                      "text": "t",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ";",
                  "start_byte": 135,
                  "end_byte": 136,
                  "text": ";",
                  "children": []
                },
                {
                  "type": "update_expression",
                  "start_byte": 137,
                  "end_byte": 141,
                  "text": "i ++",
                  "children": [
                    {
                      "type": "identifier",
                      "start_byte": 137,
                      "end_byte": 138,
                      "text": "i",
                      "children": []
                    },
                    {
                      "type": "++",
                      "start_byte": 139,
                      "end_byte": 141,
                      "text": "++",
                      "children": []
                    }
                  ]
                },
                {
                  "type": ")",
                  "start_byte": 142,
                  "end_byte": 143,
                  "text": ")",
                  "children": []
                },
                {
                  "type": "compound_statement",
                  "start_byte": 144,
                  "end_byte": 574,
                  "text": "{ scanf ( \"%d%d\" , & num1 , & num2 ) ; if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; remainder = numerator % denominator ; } else { numerator = num2 ; denominator = num2 ; remainder = numerator % denominator ; } while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; } gcd = denominator ; lcm = ( num1 * num2 ) / gcd ; printf ( \"%d %d\" , gcd , lcm ) ; }",
                  "children": [
                    {
                      "type": "{",
                      "start_byte": 144,
                      "end_byte": 145,
                      "text": "{",
                      "children": []
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 146,
                      "end_byte": 182,
                      "text": "scanf ( \"%d%d\" , & num1 , & num2 ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 146,
                          "end_byte": 180,
                          "text": "scanf ( \"%d%d\" , & num1 , & num2 )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 146,
                              "end_byte": 151,
                              "text": "scanf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 152,
                              "end_byte": 180,
                              "text": "( \"%d%d\" , & num1 , & num2 )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 152,
                                  "end_byte": 153,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 154,
                                  "end_byte": 160,
                                  "text": "\"%d%d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 154,
                                      "end_byte": 155,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 155,
                                      "end_byte": 159,
                                      "text": "%d%d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 159,
                                      "end_byte": 160,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 161,
                                  "end_byte": 162,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 163,
                                  "end_byte": 169,
                                  "text": "& num1",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 163,
                                      "end_byte": 164,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 165,
                                      "end_byte": 169,
                                      "text": "num1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 170,
                                  "end_byte": 171,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "pointer_expression",
                                  "start_byte": 172,
                                  "end_byte": 178,
                                  "text": "& num2",
                                  "children": [
                                    {
                                      "type": "&",
                                      "start_byte": 172,
                                      "end_byte": 173,
                                      "text": "&",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 174,
                                      "end_byte": 178,
                                      "text": "num2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ")",
                                  "start_byte": 179,
                                  "end_byte": 180,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 181,
                          "end_byte": 182,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "if_statement",
                      "start_byte": 183,
                      "end_byte": 370,
                      "text": "if ( num1 > num2 ) { numerator = num1 ; denominator = num2 ; remainder = numerator % denominator ; } else { numerator = num2 ; denominator = num2 ; remainder = numerator % denominator ; }",
                      "children": [
                        {
                          "type": "if",
                          "start_byte": 183,
                          "end_byte": 185,
                          "text": "if",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 186,
                          "end_byte": 201,
                          "text": "( num1 > num2 )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 186,
                              "end_byte": 187,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 188,
                              "end_byte": 199,
                              "text": "num1 > num2",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 188,
                                  "end_byte": 192,
                                  "text": "num1",
                                  "children": []
                                },
                                {
                                  "type": ">",
                                  "start_byte": 193,
                                  "end_byte": 194,
                                  "text": ">",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 195,
                                  "end_byte": 199,
                                  "text": "num2",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 200,
                              "end_byte": 201,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 202,
                          "end_byte": 283,
                          "text": "{ numerator = num1 ; denominator = num2 ; remainder = numerator % denominator ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 202,
                              "end_byte": 203,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 204,
                              "end_byte": 222,
                              "text": "numerator = num1 ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 204,
                                  "end_byte": 220,
                                  "text": "numerator = num1",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 204,
                                      "end_byte": 213,
                                      "text": "numerator",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 214,
                                      "end_byte": 215,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 216,
                                      "end_byte": 220,
                                      "text": "num1",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 221,
                                  "end_byte": 222,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 223,
                              "end_byte": 243,
                              "text": "denominator = num2 ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 223,
                                  "end_byte": 241,
                                  "text": "denominator = num2",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 223,
                                      "end_byte": 234,
                                      "text": "denominator",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 235,
                                      "end_byte": 236,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 237,
                                      "end_byte": 241,
                                      "text": "num2",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 242,
                                  "end_byte": 243,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 244,
                              "end_byte": 281,
                              "text": "remainder = numerator % denominator ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 244,
                                  "end_byte": 279,
                                  "text": "remainder = numerator % denominator",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 244,
                                      "end_byte": 253,
                                      "text": "remainder",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 254,
                                      "end_byte": 255,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 256,
                                      "end_byte": 279,
                                      "text": "numerator % denominator",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 256,
                                          "end_byte": 265,
                                          "text": "numerator",
                                          "children": []
                                        },
                                        {
                                          "type": "%",
                                          "start_byte": 266,
                                          "end_byte": 267,
                                          "text": "%",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 268,
                                          "end_byte": 279,
                                          "text": "denominator",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 280,
                                  "end_byte": 281,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 282,
                              "end_byte": 283,
                              "text": "}",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "else_clause",
                          "start_byte": 284,
                          "end_byte": 370,
                          "text": "else { numerator = num2 ; denominator = num2 ; remainder = numerator % denominator ; }",
                          "children": [
                            {
                              "type": "else",
                              "start_byte": 284,
                              "end_byte": 288,
                              "text": "else",
                              "children": []
                            },
                            {
                              "type": "compound_statement",
                              "start_byte": 289,
                              "end_byte": 370,
                              "text": "{ numerator = num2 ; denominator = num2 ; remainder = numerator % denominator ; }",
                              "children": [
                                {
                                  "type": "{",
                                  "start_byte": 289,
                                  "end_byte": 290,
                                  "text": "{",
                                  "children": []
                                },
                                {
                                  "type": "expression_statement",
                                  "start_byte": 291,
                                  "end_byte": 309,
                                  "text": "numerator = num2 ;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "start_byte": 291,
                                      "end_byte": 307,
                                      "text": "numerator = num2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 291,
                                          "end_byte": 300,
                                          "text": "numerator",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "start_byte": 301,
                                          "end_byte": 302,
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 303,
                                          "end_byte": 307,
                                          "text": "num2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "start_byte": 308,
                                      "end_byte": 309,
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "start_byte": 310,
                                  "end_byte": 330,
                                  "text": "denominator = num2 ;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "start_byte": 310,
                                      "end_byte": 328,
                                      "text": "denominator = num2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 310,
                                          "end_byte": 321,
                                          "text": "denominator",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "start_byte": 322,
                                          "end_byte": 323,
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 324,
                                          "end_byte": 328,
                                          "text": "num2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "start_byte": 329,
                                      "end_byte": 330,
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "expression_statement",
                                  "start_byte": 331,
                                  "end_byte": 368,
                                  "text": "remainder = numerator % denominator ;",
                                  "children": [
                                    {
                                      "type": "assignment_expression",
                                      "start_byte": 331,
                                      "end_byte": 366,
                                      "text": "remainder = numerator % denominator",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 331,
                                          "end_byte": 340,
                                          "text": "remainder",
                                          "children": []
                                        },
                                        {
                                          "type": "=",
                                          "start_byte": 341,
                                          "end_byte": 342,
                                          "text": "=",
                                          "children": []
                                        },
                                        {
                                          "type": "binary_expression",
                                          "start_byte": 343,
                                          "end_byte": 366,
                                          "text": "numerator % denominator",
                                          "children": [
                                            {
                                              "type": "identifier",
                                              "start_byte": 343,
                                              "end_byte": 352,
                                              "text": "numerator",
                                              "children": []
                                            },
                                            {
                                              "type": "%",
                                              "start_byte": 353,
                                              "end_byte": 354,
                                              "text": "%",
                                              "children": []
                                            },
                                            {
                                              "type": "identifier",
                                              "start_byte": 355,
                                              "end_byte": 366,
                                              "text": "denominator",
                                              "children": []
                                            }
                                          ]
                                        }
                                      ]
                                    },
                                    {
                                      "type": ";",
                                      "start_byte": 367,
                                      "end_byte": 368,
                                      "text": ";",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "}",
                                  "start_byte": 369,
                                  "end_byte": 370,
                                  "text": "}",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "while_statement",
                      "start_byte": 371,
                      "end_byte": 489,
                      "text": "while ( remainder != 0 ) { numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; }",
                      "children": [
                        {
                          "type": "while",
                          "start_byte": 371,
                          "end_byte": 376,
                          "text": "while",
                          "children": []
                        },
                        {
                          "type": "condition_clause",
                          "start_byte": 377,
                          "end_byte": 395,
                          "text": "( remainder != 0 )",
                          "children": [
                            {
                              "type": "(",
                              "start_byte": 377,
                              "end_byte": 378,
                              "text": "(",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 379,
                              "end_byte": 393,
                              "text": "remainder != 0",
                              "children": [
                                {
                                  "type": "identifier",
                                  "start_byte": 379,
                                  "end_byte": 388,
                                  "text": "remainder",
                                  "children": []
                                },
                                {
                                  "type": "!=",
                                  "start_byte": 389,
                                  "end_byte": 391,
                                  "text": "!=",
                                  "children": []
                                },
                                {
                                  "type": "number_literal",
                                  "start_byte": 392,
                                  "end_byte": 393,
                                  "text": "0",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": ")",
                              "start_byte": 394,
                              "end_byte": 395,
                              "text": ")",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": "compound_statement",
                          "start_byte": 396,
                          "end_byte": 489,
                          "text": "{ numerator = denominator ; denominator = remainder ; remainder = numerator % denominator ; }",
                          "children": [
                            {
                              "type": "{",
                              "start_byte": 396,
                              "end_byte": 397,
                              "text": "{",
                              "children": []
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 398,
                              "end_byte": 423,
                              "text": "numerator = denominator ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 398,
                                  "end_byte": 421,
                                  "text": "numerator = denominator",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 398,
                                      "end_byte": 407,
                                      "text": "numerator",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 408,
                                      "end_byte": 409,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 410,
                                      "end_byte": 421,
                                      "text": "denominator",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 422,
                                  "end_byte": 423,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 424,
                              "end_byte": 449,
                              "text": "denominator = remainder ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 424,
                                  "end_byte": 447,
                                  "text": "denominator = remainder",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 424,
                                      "end_byte": 435,
                                      "text": "denominator",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 436,
                                      "end_byte": 437,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "identifier",
                                      "start_byte": 438,
                                      "end_byte": 447,
                                      "text": "remainder",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 448,
                                  "end_byte": 449,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "expression_statement",
                              "start_byte": 450,
                              "end_byte": 487,
                              "text": "remainder = numerator % denominator ;",
                              "children": [
                                {
                                  "type": "assignment_expression",
                                  "start_byte": 450,
                                  "end_byte": 485,
                                  "text": "remainder = numerator % denominator",
                                  "children": [
                                    {
                                      "type": "identifier",
                                      "start_byte": 450,
                                      "end_byte": 459,
                                      "text": "remainder",
                                      "children": []
                                    },
                                    {
                                      "type": "=",
                                      "start_byte": 460,
                                      "end_byte": 461,
                                      "text": "=",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 462,
                                      "end_byte": 485,
                                      "text": "numerator % denominator",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 462,
                                          "end_byte": 471,
                                          "text": "numerator",
                                          "children": []
                                        },
                                        {
                                          "type": "%",
                                          "start_byte": 472,
                                          "end_byte": 473,
                                          "text": "%",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 474,
                                          "end_byte": 485,
                                          "text": "denominator",
                                          "children": []
                                        }
                                      ]
                                    }
                                  ]
                                },
                                {
                                  "type": ";",
                                  "start_byte": 486,
                                  "end_byte": 487,
                                  "text": ";",
                                  "children": []
                                }
                              ]
                            },
                            {
                              "type": "}",
                              "start_byte": 488,
                              "end_byte": 489,
                              "text": "}",
                              "children": []
                            }
                          ]
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 490,
                      "end_byte": 509,
                      "text": "gcd = denominator ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 490,
                          "end_byte": 507,
                          "text": "gcd = denominator",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 490,
                              "end_byte": 493,
                              "text": "gcd",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 494,
                              "end_byte": 495,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "identifier",
                              "start_byte": 496,
                              "end_byte": 507,
                              "text": "denominator",
                              "children": []
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 508,
                          "end_byte": 509,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 510,
                      "end_byte": 539,
                      "text": "lcm = ( num1 * num2 ) / gcd ;",
                      "children": [
                        {
                          "type": "assignment_expression",
                          "start_byte": 510,
                          "end_byte": 537,
                          "text": "lcm = ( num1 * num2 ) / gcd",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 510,
                              "end_byte": 513,
                              "text": "lcm",
                              "children": []
                            },
                            {
                              "type": "=",
                              "start_byte": 514,
                              "end_byte": 515,
                              "text": "=",
                              "children": []
                            },
                            {
                              "type": "binary_expression",
                              "start_byte": 516,
                              "end_byte": 537,
                              "text": "( num1 * num2 ) / gcd",
                              "children": [
                                {
                                  "type": "parenthesized_expression",
                                  "start_byte": 516,
                                  "end_byte": 531,
                                  "text": "( num1 * num2 )",
                                  "children": [
                                    {
                                      "type": "(",
                                      "start_byte": 516,
                                      "end_byte": 517,
                                      "text": "(",
                                      "children": []
                                    },
                                    {
                                      "type": "binary_expression",
                                      "start_byte": 518,
                                      "end_byte": 529,
                                      "text": "num1 * num2",
                                      "children": [
                                        {
                                          "type": "identifier",
                                          "start_byte": 518,
                                          "end_byte": 522,
                                          "text": "num1",
                                          "children": []
                                        },
                                        {
                                          "type": "*",
                                          "start_byte": 523,
                                          "end_byte": 524,
                                          "text": "*",
                                          "children": []
                                        },
                                        {
                                          "type": "identifier",
                                          "start_byte": 525,
                                          "end_byte": 529,
                                          "text": "num2",
                                          "children": []
                                        }
                                      ]
                                    },
                                    {
                                      "type": ")",
                                      "start_byte": 530,
                                      "end_byte": 531,
                                      "text": ")",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": "/",
                                  "start_byte": 532,
                                  "end_byte": 533,
                                  "text": "/",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 534,
                                  "end_byte": 537,
                                  "text": "gcd",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 538,
                          "end_byte": 539,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "expression_statement",
                      "start_byte": 540,
                      "end_byte": 572,
                      "text": "printf ( \"%d %d\" , gcd , lcm ) ;",
                      "children": [
                        {
                          "type": "call_expression",
                          "start_byte": 540,
                          "end_byte": 570,
                          "text": "printf ( \"%d %d\" , gcd , lcm )",
                          "children": [
                            {
                              "type": "identifier",
                              "start_byte": 540,
                              "end_byte": 546,
                              "text": "printf",
                              "children": []
                            },
                            {
                              "type": "argument_list",
                              "start_byte": 547,
                              "end_byte": 570,
                              "text": "( \"%d %d\" , gcd , lcm )",
                              "children": [
                                {
                                  "type": "(",
                                  "start_byte": 547,
                                  "end_byte": 548,
                                  "text": "(",
                                  "children": []
                                },
                                {
                                  "type": "string_literal",
                                  "start_byte": 549,
                                  "end_byte": 556,
                                  "text": "\"%d %d\"",
                                  "children": [
                                    {
                                      "type": "\"",
                                      "start_byte": 549,
                                      "end_byte": 550,
                                      "text": "\"",
                                      "children": []
                                    },
                                    {
                                      "type": "string_content",
                                      "start_byte": 550,
                                      "end_byte": 555,
                                      "text": "%d %d",
                                      "children": []
                                    },
                                    {
                                      "type": "\"",
                                      "start_byte": 555,
                                      "end_byte": 556,
                                      "text": "\"",
                                      "children": []
                                    }
                                  ]
                                },
                                {
                                  "type": ",",
                                  "start_byte": 557,
                                  "end_byte": 558,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 559,
                                  "end_byte": 562,
                                  "text": "gcd",
                                  "children": []
                                },
                                {
                                  "type": ",",
                                  "start_byte": 563,
                                  "end_byte": 564,
                                  "text": ",",
                                  "children": []
                                },
                                {
                                  "type": "identifier",
                                  "start_byte": 565,
                                  "end_byte": 568,
                                  "text": "lcm",
                                  "children": []
                                },
                                {
                                  "type": ")",
                                  "start_byte": 569,
                                  "end_byte": 570,
                                  "text": ")",
                                  "children": []
                                }
                              ]
                            }
                          ]
                        },
                        {
                          "type": ";",
                          "start_byte": 571,
                          "end_byte": 572,
                          "text": ";",
                          "children": []
                        }
                      ]
                    },
                    {
                      "type": "}",
                      "start_byte": 573,
                      "end_byte": 574,
                      "text": "}",
                      "children": []
                    }
                  ]
                }
              ]
            },
            {
              "type": "return_statement",
              "start_byte": 575,
              "end_byte": 585,
              "text": "return 0 ;",
              "children": [
                {
                  "type": "return",
                  "start_byte": 575,
                  "end_byte": 581,
                  "text": "return",
                  "children": []
                },
                {
                  "type": "number_literal",
                  "start_byte": 582,
                  "end_byte": 583,
                  "text": "0",
                  "children": []
                },
                {
                  "type": ";",
                  "start_byte": 584,
                  "end_byte": 585,
                  "text": ";",
                  "children": []
                }
              ]
            },
            {
              "type": "}",
              "start_byte": 586,
              "end_byte": 587,
              "text": "}",
              "children": []
            }
          ]
        }
      ]
    }
  ]
}