int scanInt ( ) { register int retInt = 0 , d ; while ( ( d = getchar ( ) ) >= '0' ) { retInt = ( retInt << 3 ) + ( retInt << 1 ) + ( d - '0' ) ; } return retInt ; } struct node { unsigned int length ; unsigned int * a ; unsigned int * b ; } ; int main ( void ) { register unsigned int testcase = 0 , i = 0 , j = 0 , k = 0 ; unsigned int * ans ; testcase = scanInt ( ) ; if ( testcase <= 1000 ) { ans = ( int * ) malloc ( testcase * sizeof ( int ) ) ; for ( i = 0 ; i < testcase ; i ++ ) { struct node c ; c . a = NULL ; c . b = NULL ; c . length = scanInt ( ) ; if ( c . length < 100 ) { for ( j = 0 ; j < c . length ; j ++ ) { c . a = ( int * ) malloc ( ( j + 1 ) * sizeof ( int ) ) ; for ( k = 0 ; k <= j ; k ++ ) { int temp = scanInt ( ) ; if ( temp >= 0 && temp <= 99 ) { if ( j == 0 ) c . a [ k ] = temp ; else { if ( k == 0 ) { c . a [ k ] = c . b [ k ] + temp ; } else { if ( j == k ) { c . a [ k ] = c . b [ k - 1 ] + temp ; } else { unsigned int total = temp ; unsigned int a1 = ( c . b [ k - 1 ] + total ) ; unsigned int a2 = ( c . b [ k ] + total ) ; c . a [ k ] = ( a1 < a2 ) ? a2 : a1 ; } } } } else exit ( 0 ) ; } c . b = c . a ; c . a = NULL ; } ans [ i ] = 0 ; j = c . length - 1 ; k = 0 ; while ( k < c . length ) { if ( ans [ i ] < c . b [ k ] ) ans [ i ] = c . b [ k ] ; k ++ ; } } else exit ( 0 ) ; } for ( i = 0 ; i < testcase ; i ++ ) { printf ( "%d\n" , ans [ i ] ) ; } } return 0 ; }